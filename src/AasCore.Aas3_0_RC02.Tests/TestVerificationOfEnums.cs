/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using System.Linq;  // can't alias
using NUnit.Framework;  // can't alias

using Aas = AasCore.Aas3_0_RC02;

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestVerificationOfEnums
    {
        [Test]
        public void Test_ModelingKind_valid()
        {
            var errors = Aas.Verification.VerifyModelingKind(
                Aas.ModelingKind.Template).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_ModelingKind_valid

        [Test]
        public void Test_ModelingKind_invalid()
        {
            int valueAsInt = -1;
            Aas.ModelingKind value = (Aas.ModelingKind)valueAsInt;

            var errors = Aas.Verification.VerifyModelingKind(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid ModelingKind: -1", errors[0].Cause);
        }  // void Test_ModelingKind_invalid

        [Test]
        public void Test_QualifierKind_valid()
        {
            var errors = Aas.Verification.VerifyQualifierKind(
                Aas.QualifierKind.ValueQualifier).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_QualifierKind_valid

        [Test]
        public void Test_QualifierKind_invalid()
        {
            int valueAsInt = -1;
            Aas.QualifierKind value = (Aas.QualifierKind)valueAsInt;

            var errors = Aas.Verification.VerifyQualifierKind(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid QualifierKind: -1", errors[0].Cause);
        }  // void Test_QualifierKind_invalid

        [Test]
        public void Test_AssetKind_valid()
        {
            var errors = Aas.Verification.VerifyAssetKind(
                Aas.AssetKind.Type).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_AssetKind_valid

        [Test]
        public void Test_AssetKind_invalid()
        {
            int valueAsInt = -1;
            Aas.AssetKind value = (Aas.AssetKind)valueAsInt;

            var errors = Aas.Verification.VerifyAssetKind(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid AssetKind: -1", errors[0].Cause);
        }  // void Test_AssetKind_invalid

        [Test]
        public void Test_EntityType_valid()
        {
            var errors = Aas.Verification.VerifyEntityType(
                Aas.EntityType.CoManagedEntity).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_EntityType_valid

        [Test]
        public void Test_EntityType_invalid()
        {
            int valueAsInt = -1;
            Aas.EntityType value = (Aas.EntityType)valueAsInt;

            var errors = Aas.Verification.VerifyEntityType(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid EntityType: -1", errors[0].Cause);
        }  // void Test_EntityType_invalid

        [Test]
        public void Test_Direction_valid()
        {
            var errors = Aas.Verification.VerifyDirection(
                Aas.Direction.Input).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_Direction_valid

        [Test]
        public void Test_Direction_invalid()
        {
            int valueAsInt = -1;
            Aas.Direction value = (Aas.Direction)valueAsInt;

            var errors = Aas.Verification.VerifyDirection(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid Direction: -1", errors[0].Cause);
        }  // void Test_Direction_invalid

        [Test]
        public void Test_StateOfEvent_valid()
        {
            var errors = Aas.Verification.VerifyStateOfEvent(
                Aas.StateOfEvent.On).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_StateOfEvent_valid

        [Test]
        public void Test_StateOfEvent_invalid()
        {
            int valueAsInt = -1;
            Aas.StateOfEvent value = (Aas.StateOfEvent)valueAsInt;

            var errors = Aas.Verification.VerifyStateOfEvent(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid StateOfEvent: -1", errors[0].Cause);
        }  // void Test_StateOfEvent_invalid

        [Test]
        public void Test_ReferenceTypes_valid()
        {
            var errors = Aas.Verification.VerifyReferenceTypes(
                Aas.ReferenceTypes.GlobalReference).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_ReferenceTypes_valid

        [Test]
        public void Test_ReferenceTypes_invalid()
        {
            int valueAsInt = -1;
            Aas.ReferenceTypes value = (Aas.ReferenceTypes)valueAsInt;

            var errors = Aas.Verification.VerifyReferenceTypes(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid ReferenceTypes: -1", errors[0].Cause);
        }  // void Test_ReferenceTypes_invalid

        [Test]
        public void Test_GenericFragmentKeys_valid()
        {
            var errors = Aas.Verification.VerifyGenericFragmentKeys(
                Aas.GenericFragmentKeys.FragmentReference).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_GenericFragmentKeys_valid

        [Test]
        public void Test_GenericFragmentKeys_invalid()
        {
            int valueAsInt = -1;
            Aas.GenericFragmentKeys value = (Aas.GenericFragmentKeys)valueAsInt;

            var errors = Aas.Verification.VerifyGenericFragmentKeys(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid GenericFragmentKeys: -1", errors[0].Cause);
        }  // void Test_GenericFragmentKeys_invalid

        [Test]
        public void Test_GenericGloballyIdentifiables_valid()
        {
            var errors = Aas.Verification.VerifyGenericGloballyIdentifiables(
                Aas.GenericGloballyIdentifiables.GlobalReference).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_GenericGloballyIdentifiables_valid

        [Test]
        public void Test_GenericGloballyIdentifiables_invalid()
        {
            int valueAsInt = -1;
            Aas.GenericGloballyIdentifiables value = (Aas.GenericGloballyIdentifiables)valueAsInt;

            var errors = Aas.Verification.VerifyGenericGloballyIdentifiables(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid GenericGloballyIdentifiables: -1", errors[0].Cause);
        }  // void Test_GenericGloballyIdentifiables_invalid

        [Test]
        public void Test_AasIdentifiables_valid()
        {
            var errors = Aas.Verification.VerifyAasIdentifiables(
                Aas.AasIdentifiables.AssetAdministrationShell).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_AasIdentifiables_valid

        [Test]
        public void Test_AasIdentifiables_invalid()
        {
            int valueAsInt = -1;
            Aas.AasIdentifiables value = (Aas.AasIdentifiables)valueAsInt;

            var errors = Aas.Verification.VerifyAasIdentifiables(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid AasIdentifiables: -1", errors[0].Cause);
        }  // void Test_AasIdentifiables_invalid

        [Test]
        public void Test_AasSubmodelElements_valid()
        {
            var errors = Aas.Verification.VerifyAasSubmodelElements(
                Aas.AasSubmodelElements.AnnotatedRelationshipElement).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_AasSubmodelElements_valid

        [Test]
        public void Test_AasSubmodelElements_invalid()
        {
            int valueAsInt = -1;
            Aas.AasSubmodelElements value = (Aas.AasSubmodelElements)valueAsInt;

            var errors = Aas.Verification.VerifyAasSubmodelElements(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid AasSubmodelElements: -1", errors[0].Cause);
        }  // void Test_AasSubmodelElements_invalid

        [Test]
        public void Test_AasReferableNonIdentifiables_valid()
        {
            var errors = Aas.Verification.VerifyAasReferableNonIdentifiables(
                Aas.AasReferableNonIdentifiables.AnnotatedRelationshipElement).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_AasReferableNonIdentifiables_valid

        [Test]
        public void Test_AasReferableNonIdentifiables_invalid()
        {
            int valueAsInt = -1;
            Aas.AasReferableNonIdentifiables value = (Aas.AasReferableNonIdentifiables)valueAsInt;

            var errors = Aas.Verification.VerifyAasReferableNonIdentifiables(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid AasReferableNonIdentifiables: -1", errors[0].Cause);
        }  // void Test_AasReferableNonIdentifiables_invalid

        [Test]
        public void Test_GloballyIdentifiables_valid()
        {
            var errors = Aas.Verification.VerifyGloballyIdentifiables(
                Aas.GloballyIdentifiables.GlobalReference).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_GloballyIdentifiables_valid

        [Test]
        public void Test_GloballyIdentifiables_invalid()
        {
            int valueAsInt = -1;
            Aas.GloballyIdentifiables value = (Aas.GloballyIdentifiables)valueAsInt;

            var errors = Aas.Verification.VerifyGloballyIdentifiables(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid GloballyIdentifiables: -1", errors[0].Cause);
        }  // void Test_GloballyIdentifiables_invalid

        [Test]
        public void Test_FragmentKeys_valid()
        {
            var errors = Aas.Verification.VerifyFragmentKeys(
                Aas.FragmentKeys.FragmentReference).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_FragmentKeys_valid

        [Test]
        public void Test_FragmentKeys_invalid()
        {
            int valueAsInt = -1;
            Aas.FragmentKeys value = (Aas.FragmentKeys)valueAsInt;

            var errors = Aas.Verification.VerifyFragmentKeys(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid FragmentKeys: -1", errors[0].Cause);
        }  // void Test_FragmentKeys_invalid

        [Test]
        public void Test_KeyTypes_valid()
        {
            var errors = Aas.Verification.VerifyKeyTypes(
                Aas.KeyTypes.FragmentReference).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_KeyTypes_valid

        [Test]
        public void Test_KeyTypes_invalid()
        {
            int valueAsInt = -1;
            Aas.KeyTypes value = (Aas.KeyTypes)valueAsInt;

            var errors = Aas.Verification.VerifyKeyTypes(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid KeyTypes: -1", errors[0].Cause);
        }  // void Test_KeyTypes_invalid

        [Test]
        public void Test_DataTypeDefXsd_valid()
        {
            var errors = Aas.Verification.VerifyDataTypeDefXsd(
                Aas.DataTypeDefXsd.AnyUri).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_DataTypeDefXsd_valid

        [Test]
        public void Test_DataTypeDefXsd_invalid()
        {
            int valueAsInt = -1;
            Aas.DataTypeDefXsd value = (Aas.DataTypeDefXsd)valueAsInt;

            var errors = Aas.Verification.VerifyDataTypeDefXsd(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid DataTypeDefXsd: -1", errors[0].Cause);
        }  // void Test_DataTypeDefXsd_invalid

        [Test]
        public void Test_DataTypeDefRdf_valid()
        {
            var errors = Aas.Verification.VerifyDataTypeDefRdf(
                Aas.DataTypeDefRdf.LangString).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_DataTypeDefRdf_valid

        [Test]
        public void Test_DataTypeDefRdf_invalid()
        {
            int valueAsInt = -1;
            Aas.DataTypeDefRdf value = (Aas.DataTypeDefRdf)valueAsInt;

            var errors = Aas.Verification.VerifyDataTypeDefRdf(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid DataTypeDefRdf: -1", errors[0].Cause);
        }  // void Test_DataTypeDefRdf_invalid

        [Test]
        public void Test_DataTypeDef_valid()
        {
            var errors = Aas.Verification.VerifyDataTypeDef(
                Aas.DataTypeDef.AnyUri).ToList();

            Assert.IsEmpty(errors);
        }  // void Test_DataTypeDef_valid

        [Test]
        public void Test_DataTypeDef_invalid()
        {
            int valueAsInt = -1;
            Aas.DataTypeDef value = (Aas.DataTypeDef)valueAsInt;

            var errors = Aas.Verification.VerifyDataTypeDef(
                value).ToList();

            Assert.AreEqual(1, errors.Count);
            Assert.AreEqual("Invalid DataTypeDef: -1", errors[0].Cause);
        }  // void Test_DataTypeDef_invalid
    }  // class TestVerificationOfEnums
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
