/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Path = System.IO.Path;

using NUnit.Framework;  // can't alias

using Aas = AasCore.Aas3_0_RC02;  // renamed

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestJsonizationOfInterfaces
    {
        [Test]
        public void Test_round_trip_IHasSemantics_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Blob

        [Test]
        public void Test_round_trip_IHasSemantics_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Capability

        [Test]
        public void Test_round_trip_IHasSemantics_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Entity

        [Test]
        public void Test_round_trip_IHasSemantics_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_File

        [Test]
        public void Test_round_trip_IHasSemantics_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasSemantics_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Operation

        [Test]
        public void Test_round_trip_IHasSemantics_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Property

        [Test]
        public void Test_round_trip_IHasSemantics_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Range

        [Test]
        public void Test_round_trip_IHasSemantics_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Submodel

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasExtensions_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AssetAdministrationShell()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasExtensions_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Blob

        [Test]
        public void Test_round_trip_IHasExtensions_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Capability

        [Test]
        public void Test_round_trip_IHasExtensions_from_ConceptDescription()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasExtensions_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Entity

        [Test]
        public void Test_round_trip_IHasExtensions_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_File

        [Test]
        public void Test_round_trip_IHasExtensions_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasExtensions_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Operation

        [Test]
        public void Test_round_trip_IHasExtensions_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Property

        [Test]
        public void Test_round_trip_IHasExtensions_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Range

        [Test]
        public void Test_round_trip_IHasExtensions_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Submodel

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IReferable_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AssetAdministrationShell()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IReferable_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IReferable_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Blob

        [Test]
        public void Test_round_trip_IReferable_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Capability

        [Test]
        public void Test_round_trip_IReferable_from_ConceptDescription()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IReferable_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Entity

        [Test]
        public void Test_round_trip_IReferable_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_File

        [Test]
        public void Test_round_trip_IReferable_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IReferable_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Operation

        [Test]
        public void Test_round_trip_IReferable_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Property

        [Test]
        public void Test_round_trip_IReferable_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Range

        [Test]
        public void Test_round_trip_IReferable_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IReferable_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Submodel

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IIdentifiable_from_AssetAdministrationShell()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IIdentifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IIdentifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IIdentifiable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IIdentifiable_from_ConceptDescription()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IIdentifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IIdentifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IIdentifiable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IIdentifiable_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IIdentifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IIdentifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IIdentifiable_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasKind_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasKind_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasKind_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Blob

        [Test]
        public void Test_round_trip_IHasKind_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Capability

        [Test]
        public void Test_round_trip_IHasKind_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Entity

        [Test]
        public void Test_round_trip_IHasKind_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_File

        [Test]
        public void Test_round_trip_IHasKind_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasKind_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Operation

        [Test]
        public void Test_round_trip_IHasKind_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Property

        [Test]
        public void Test_round_trip_IHasKind_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Range

        [Test]
        public void Test_round_trip_IHasKind_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasKind_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasKind_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Blob

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Capability

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ConceptDescription()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Entity

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_File

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Operation

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Property

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Range

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Submodel

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IQualifiable_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Blob

        [Test]
        public void Test_round_trip_IQualifiable_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Capability

        [Test]
        public void Test_round_trip_IQualifiable_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Entity

        [Test]
        public void Test_round_trip_IQualifiable_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_File

        [Test]
        public void Test_round_trip_IQualifiable_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IQualifiable_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Operation

        [Test]
        public void Test_round_trip_IQualifiable_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Property

        [Test]
        public void Test_round_trip_IQualifiable_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Range

        [Test]
        public void Test_round_trip_IQualifiable_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Submodel()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Submodel

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_ISubmodelElement_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_BasicEventElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Blob

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Capability()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Capability

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Entity()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Entity

        [Test]
        public void Test_round_trip_ISubmodelElement_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_File

        [Test]
        public void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Operation()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Operation

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Property

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Range

        [Test]
        public void Test_round_trip_ISubmodelElement_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementList()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IRelationshipElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IRelationshipElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IRelationshipElement_from_RelationshipElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IRelationshipElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IRelationshipElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IRelationshipElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_IDataElement_from_Blob()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_Blob

        [Test]
        public void Test_round_trip_IDataElement_from_File()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_File

        [Test]
        public void Test_round_trip_IDataElement_from_MultiLanguageProperty()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IDataElement_from_Property()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_Property

        [Test]
        public void Test_round_trip_IDataElement_from_Range()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_Range

        [Test]
        public void Test_round_trip_IDataElement_from_ReferenceElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_IEventElement_from_BasicEventElement()
        {
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IEventElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    $"When we serialize the instance from {pathToCompleteExample} " +
                    "as IEventElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IEventElement_from_BasicEventElement
    }  // class TestJsonizationOfInterfaces
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
