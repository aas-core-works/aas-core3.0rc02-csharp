/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Path = System.IO.Path;

using NUnit.Framework;  // can't alias

using Aas = AasCore.Aas3_0_RC02;  // renamed

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestXmlizationOfInterfaces
    {
        [Test]
        public void Test_round_trip_IHasSemantics_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Blob

        [Test]
        public void Test_round_trip_IHasSemantics_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Capability

        [Test]
        public void Test_round_trip_IHasSemantics_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Entity

        [Test]
        public void Test_round_trip_IHasSemantics_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_File

        [Test]
        public void Test_round_trip_IHasSemantics_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasSemantics_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Operation

        [Test]
        public void Test_round_trip_IHasSemantics_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Property

        [Test]
        public void Test_round_trip_IHasSemantics_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Range

        [Test]
        public void Test_round_trip_IHasSemantics_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Submodel

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasExtensions_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasExtensions_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Blob

        [Test]
        public void Test_round_trip_IHasExtensions_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Capability

        [Test]
        public void Test_round_trip_IHasExtensions_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasExtensions_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Entity

        [Test]
        public void Test_round_trip_IHasExtensions_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_File

        [Test]
        public void Test_round_trip_IHasExtensions_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasExtensions_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Operation

        [Test]
        public void Test_round_trip_IHasExtensions_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Property

        [Test]
        public void Test_round_trip_IHasExtensions_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Range

        [Test]
        public void Test_round_trip_IHasExtensions_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Submodel

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IReferable_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IReferable_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IReferable_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Blob

        [Test]
        public void Test_round_trip_IReferable_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Capability

        [Test]
        public void Test_round_trip_IReferable_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IReferable_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Entity

        [Test]
        public void Test_round_trip_IReferable_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_File

        [Test]
        public void Test_round_trip_IReferable_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IReferable_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Operation

        [Test]
        public void Test_round_trip_IReferable_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Property

        [Test]
        public void Test_round_trip_IReferable_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Range

        [Test]
        public void Test_round_trip_IReferable_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IReferable_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Submodel

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IIdentifiable_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IIdentifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IIdentifiable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IIdentifiable_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IIdentifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IIdentifiable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IIdentifiable_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IIdentifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IIdentifiable_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasKind_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasKind_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasKind_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Blob

        [Test]
        public void Test_round_trip_IHasKind_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Capability

        [Test]
        public void Test_round_trip_IHasKind_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Entity

        [Test]
        public void Test_round_trip_IHasKind_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_File

        [Test]
        public void Test_round_trip_IHasKind_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasKind_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Operation

        [Test]
        public void Test_round_trip_IHasKind_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Property

        [Test]
        public void Test_round_trip_IHasKind_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Range

        [Test]
        public void Test_round_trip_IHasKind_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasKind_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasKind_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Blob

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Capability

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Entity

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_File

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Operation

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Property

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Range

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Submodel

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IQualifiable_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Blob

        [Test]
        public void Test_round_trip_IQualifiable_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Capability

        [Test]
        public void Test_round_trip_IQualifiable_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Entity

        [Test]
        public void Test_round_trip_IQualifiable_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_File

        [Test]
        public void Test_round_trip_IQualifiable_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IQualifiable_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Operation

        [Test]
        public void Test_round_trip_IQualifiable_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Property

        [Test]
        public void Test_round_trip_IQualifiable_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Range

        [Test]
        public void Test_round_trip_IQualifiable_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Submodel

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_ISubmodelElement_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_BasicEventElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Blob

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Capability

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Entity

        [Test]
        public void Test_round_trip_ISubmodelElement_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_File

        [Test]
        public void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Operation

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Property

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Range

        [Test]
        public void Test_round_trip_ISubmodelElement_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IRelationshipElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IRelationshipElement_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IRelationshipElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IRelationshipElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_IDataElement_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_Blob

        [Test]
        public void Test_round_trip_IDataElement_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_File

        [Test]
        public void Test_round_trip_IDataElement_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IDataElement_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_Property

        [Test]
        public void Test_round_trip_IDataElement_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_Range

        [Test]
        public void Test_round_trip_IDataElement_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_IEventElement_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.IEventElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IEventElement_from_BasicEventElement
    }  // class TestXmlizationOfInterfaces
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
