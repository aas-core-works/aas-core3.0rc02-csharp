/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Path = System.IO.Path;

using NUnit.Framework;  // can't alias
using System.Linq; // can't alias

using Aas = AasCore.Aas3_0_RC02;

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestXmlizationOfInterfaces
    {
        [Test]
        public void Test_round_trip_IHasSemantics_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Blob

        [Test]
        public void Test_round_trip_IHasSemantics_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Capability

        [Test]
        public void Test_round_trip_IHasSemantics_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Entity

        [Test]
        public void Test_round_trip_IHasSemantics_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_File

        [Test]
        public void Test_round_trip_IHasSemantics_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasSemantics_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Operation

        [Test]
        public void Test_round_trip_IHasSemantics_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Property

        [Test]
        public void Test_round_trip_IHasSemantics_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Range

        [Test]
        public void Test_round_trip_IHasSemantics_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_Submodel

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHassemantics = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHassemantics,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHassemantics = Aas.Xmlization.Deserialize.IHasSemanticsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHassemantics,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasExtensions_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AssetAdministrationShell)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AssetAdministrationShell)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AssetAdministrationShell could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.AssetAdministrationShell)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasExtensions_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Blob

        [Test]
        public void Test_round_trip_IHasExtensions_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Capability

        [Test]
        public void Test_round_trip_IHasExtensions_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ConceptDescription)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ConceptDescription)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ConceptDescription could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.ConceptDescription)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasExtensions_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Entity

        [Test]
        public void Test_round_trip_IHasExtensions_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_File

        [Test]
        public void Test_round_trip_IHasExtensions_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasExtensions_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Operation

        [Test]
        public void Test_round_trip_IHasExtensions_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Property

        [Test]
        public void Test_round_trip_IHasExtensions_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Range

        [Test]
        public void Test_round_trip_IHasExtensions_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_Submodel

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasextensions = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasextensions,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasextensions = Aas.Xmlization.Deserialize.IHasExtensionsFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasextensions,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IReferable_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AssetAdministrationShell)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AssetAdministrationShell)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AssetAdministrationShell could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.AssetAdministrationShell)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IReferable_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IReferable_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Blob

        [Test]
        public void Test_round_trip_IReferable_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Capability

        [Test]
        public void Test_round_trip_IReferable_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ConceptDescription)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ConceptDescription)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ConceptDescription could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.ConceptDescription)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IReferable_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Entity

        [Test]
        public void Test_round_trip_IReferable_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_File

        [Test]
        public void Test_round_trip_IReferable_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IReferable_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Operation

        [Test]
        public void Test_round_trip_IReferable_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Property

        [Test]
        public void Test_round_trip_IReferable_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Range

        [Test]
        public void Test_round_trip_IReferable_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IReferable_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_Submodel

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theReferable = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theReferable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherReferable = Aas.Xmlization.Deserialize.IReferableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherReferable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IReferable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IIdentifiable_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AssetAdministrationShell)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AssetAdministrationShell)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AssetAdministrationShell could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theIdentifiable = (Aas.AssetAdministrationShell)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theIdentifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherIdentifiable = Aas.Xmlization.Deserialize.IIdentifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherIdentifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IIdentifiable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IIdentifiable_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ConceptDescription)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ConceptDescription)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ConceptDescription could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theIdentifiable = (Aas.ConceptDescription)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theIdentifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherIdentifiable = Aas.Xmlization.Deserialize.IIdentifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherIdentifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IIdentifiable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IIdentifiable_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theIdentifiable = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theIdentifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherIdentifiable = Aas.Xmlization.Deserialize.IIdentifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherIdentifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IIdentifiable_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasKind_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasKind_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasKind_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Blob

        [Test]
        public void Test_round_trip_IHasKind_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Capability

        [Test]
        public void Test_round_trip_IHasKind_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Entity

        [Test]
        public void Test_round_trip_IHasKind_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_File

        [Test]
        public void Test_round_trip_IHasKind_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasKind_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Operation

        [Test]
        public void Test_round_trip_IHasKind_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Property

        [Test]
        public void Test_round_trip_IHasKind_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Range

        [Test]
        public void Test_round_trip_IHasKind_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasKind_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasKind_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHaskind = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHaskind,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHaskind = Aas.Xmlization.Deserialize.IHasKindFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHaskind,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasKind_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AssetAdministrationShell)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AssetAdministrationShell)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AssetAdministrationShell could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.AssetAdministrationShell)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Blob

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Capability

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ConceptDescription)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ConceptDescription)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ConceptDescription could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.ConceptDescription)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Entity

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_File

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Operation

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Property

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Range

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_Submodel

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theHasdataspecification = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theHasdataspecification,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherHasdataspecification = Aas.Xmlization.Deserialize.IHasDataSpecificationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherHasdataspecification,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IQualifiable_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Blob

        [Test]
        public void Test_round_trip_IQualifiable_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Capability

        [Test]
        public void Test_round_trip_IQualifiable_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Entity

        [Test]
        public void Test_round_trip_IQualifiable_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_File

        [Test]
        public void Test_round_trip_IQualifiable_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IQualifiable_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Operation

        [Test]
        public void Test_round_trip_IQualifiable_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Property

        [Test]
        public void Test_round_trip_IQualifiable_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Range

        [Test]
        public void Test_round_trip_IQualifiable_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Submodel)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Submodel)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Submodel could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.Submodel)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_Submodel

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theQualifiable = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theQualifiable,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherQualifiable = Aas.Xmlization.Deserialize.IQualifiableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherQualifiable,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_ISubmodelElement_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_BasicEventElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Blob

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Capability)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Capability)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Capability could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.Capability)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Capability

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Entity)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Entity)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Entity could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.Entity)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Entity

        [Test]
        public void Test_round_trip_ISubmodelElement_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_File

        [Test]
        public void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Operation)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Operation)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Operation could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.Operation)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Operation

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Property

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_Range

        [Test]
        public void Test_round_trip_ISubmodelElement_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementCollection)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementCollection)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementCollection could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.SubmodelElementCollection)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is SubmodelElementList)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is SubmodelElementList)
                      ?? throw new System.InvalidOperationException(
                          "No instance of SubmodelElementList could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theSubmodelelement = (Aas.SubmodelElementList)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theSubmodelelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherSubmodelelement = Aas.Xmlization.Deserialize.ISubmodelElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherSubmodelelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is AnnotatedRelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is AnnotatedRelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of AnnotatedRelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theRelationshipelement = (Aas.AnnotatedRelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theRelationshipelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherRelationshipelement = Aas.Xmlization.Deserialize.IRelationshipElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherRelationshipelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IRelationshipElement_from_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is RelationshipElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is RelationshipElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of RelationshipElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theRelationshipelement = (Aas.RelationshipElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theRelationshipelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherRelationshipelement = Aas.Xmlization.Deserialize.IRelationshipElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherRelationshipelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IRelationshipElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_IDataElement_from_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Blob)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Blob)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Blob could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theDataelement = (Aas.Blob)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theDataelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherDataelement = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherDataelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_Blob

        [Test]
        public void Test_round_trip_IDataElement_from_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is File)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is File)
                      ?? throw new System.InvalidOperationException(
                          "No instance of File could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theDataelement = (Aas.File)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theDataelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherDataelement = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherDataelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_File

        [Test]
        public void Test_round_trip_IDataElement_from_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is MultiLanguageProperty)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is MultiLanguageProperty)
                      ?? throw new System.InvalidOperationException(
                          "No instance of MultiLanguageProperty could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theDataelement = (Aas.MultiLanguageProperty)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theDataelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherDataelement = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherDataelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IDataElement_from_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Property)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Property)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Property could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theDataelement = (Aas.Property)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theDataelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherDataelement = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherDataelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_Property

        [Test]
        public void Test_round_trip_IDataElement_from_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is Range)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is Range)
                      ?? throw new System.InvalidOperationException(
                          "No instance of Range could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theDataelement = (Aas.Range)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theDataelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherDataelement = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherDataelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_Range

        [Test]
        public void Test_round_trip_IDataElement_from_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is ReferenceElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is ReferenceElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of ReferenceElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theDataelement = (Aas.ReferenceElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theDataelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherDataelement = Aas.Xmlization.Deserialize.IDataElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherDataelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IDataElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_IEventElement_from_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                AasCore.Aas3_0_RC02.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = AasCore.Aas3_0_RC02.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = (
                (container is BasicEventElement)
                    ? container
                    : container
                          .Descend()
                          .First(something => something is BasicEventElement)
                      ?? throw new System.InvalidOperationException(
                          "No instance of BasicEventElement could be found")
            );

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                var theEventelement = (Aas.BasicEventElement)instance;

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    theEventelement,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherEventelement = Aas.Xmlization.Deserialize.IEventElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                AasCore.Aas3_0_RC02.Xmlization.Serialize.To(
                    anotherEventelement,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }


            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // void Test_round_trip_IEventElement_from_BasicEventElement
    }  // class TestXmlizationOfInterfaces
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
