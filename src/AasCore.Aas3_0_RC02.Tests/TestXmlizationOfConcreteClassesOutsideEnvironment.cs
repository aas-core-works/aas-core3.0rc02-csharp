/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Path = System.IO.Path;

using NUnit.Framework; // can't alias

using Aas = AasCore.Aas3_0_RC02;  // renamed

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestXmlizationOfConcreteClassesOutsideEnvironment
    {
        [Test]
        public void Test_round_trip_Extension()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Extension",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Extension>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ExtensionFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Extension

        [Test]
        public void Test_round_trip_AdministrativeInformation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AdministrativeInformation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AdministrativeInformation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AdministrativeInformationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AdministrativeInformation

        [Test]
        public void Test_round_trip_Qualifier()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Qualifier",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Qualifier>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.QualifierFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Qualifier

        [Test]
        public void Test_round_trip_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetAdministrationShell",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetAdministrationShell>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AssetAdministrationShellFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AssetAdministrationShell

        [Test]
        public void Test_round_trip_AssetInformation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AssetInformation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AssetInformation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AssetInformationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AssetInformation

        [Test]
        public void Test_round_trip_Resource()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Resource",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Resource>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ResourceFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Resource

        [Test]
        public void Test_round_trip_SpecificAssetId()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SpecificAssetId",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SpecificAssetId>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SpecificAssetIdFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_SpecificAssetId

        [Test]
        public void Test_round_trip_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Submodel",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Submodel>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SubmodelFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Submodel

        [Test]
        public void Test_round_trip_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "RelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.RelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.RelationshipElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_RelationshipElement

        [Test]
        public void Test_round_trip_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementList",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementList>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SubmodelElementListFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_SubmodelElementList

        [Test]
        public void Test_round_trip_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "SubmodelElementCollection",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.SubmodelElementCollection>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SubmodelElementCollectionFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_SubmodelElementCollection

        [Test]
        public void Test_round_trip_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Property",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Property>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.PropertyFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Property

        [Test]
        public void Test_round_trip_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "MultiLanguageProperty",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.MultiLanguageProperty>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.MultiLanguagePropertyFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_MultiLanguageProperty

        [Test]
        public void Test_round_trip_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Range",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Range>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.RangeFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Range

        [Test]
        public void Test_round_trip_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ReferenceElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ReferenceElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ReferenceElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_ReferenceElement

        [Test]
        public void Test_round_trip_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Blob",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Blob>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.BlobFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Blob

        [Test]
        public void Test_round_trip_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "File",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.File>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.FileFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_File

        [Test]
        public void Test_round_trip_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "AnnotatedRelationshipElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.AnnotatedRelationshipElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AnnotatedRelationshipElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Entity",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Entity>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.EntityFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Entity

        [Test]
        public void Test_round_trip_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "BasicEventElement",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.BasicEventElement>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.BasicEventElementFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_BasicEventElement

        [Test]
        public void Test_round_trip_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Operation",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Operation>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.OperationFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Operation

        [Test]
        public void Test_round_trip_OperationVariable()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "OperationVariable",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.OperationVariable>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.OperationVariableFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_OperationVariable

        [Test]
        public void Test_round_trip_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Capability",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Capability>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.CapabilityFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Capability

        [Test]
        public void Test_round_trip_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "ConceptDescription",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.ConceptDescription>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ConceptDescriptionFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_ConceptDescription

        [Test]
        public void Test_round_trip_Reference()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Reference",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Reference>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ReferenceFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Reference

        [Test]
        public void Test_round_trip_Key()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Key",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Key>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.KeyFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Key

        [Test]
        public void Test_round_trip_LangString()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "LangString",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.LangString>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangString

        [Test]
        public void Test_round_trip_LangStringSet()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "LangStringSet",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.LangStringSet>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringSetFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangStringSet

        [Test]
        public void Test_round_trip_Environment()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            string pathToCompleteExample = Path.Combine(
                Aas.Tests.Common.OurTestResourceDir,
                "Json",
                "Expected",
                "Environment",
                "complete.json");

            var container = Aas.Tests.CommonJson.LoadInstance(
                pathToCompleteExample);

            var instance = Aas.Tests.Common.MustFind<Aas.Environment>(
                container);

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.EnvironmentFrom(
                xmlReader,
                "https://www.admin-shell.io/aas/3/0/RC02");

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter,
                    "aas",
                    "https://www.admin-shell.io/aas/3/0/RC02");
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Environment
    }  // class TestXmlizationOfConcreteClassesOutsideEnvironment
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
