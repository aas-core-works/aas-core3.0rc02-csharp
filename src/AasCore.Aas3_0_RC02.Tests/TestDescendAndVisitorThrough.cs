/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Directory = System.IO.Directory;
using Path = System.IO.Path;

using NUnit.Framework; // can't alias
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3_0_RC02;  // renamed

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestDescendAndVisitorThrough
    {
        private static string Trace(Aas.IClass instance)
        {
            switch (instance)
            {
                case IIdentifiable identifiable:
                    {
                        return $"{identifiable.GetType()} with ID {identifiable.Id}";
                    }
                case IReferable referable:
                    {
                        return $"{referable.GetType()} with ID-short {referable.IdShort}";
                    }
                default:
                    {
                        return instance.GetType().Name;
                    }
            }
        }

        class TracingVisitorThrough : Aas.Visitation.VisitorThrough
        {
            public readonly List<string> Log = new List<string>();

            public override void Visit(IClass that)
            {
                Log.Add(Trace(that));
                base.Visit(that);
            }
        }

        private static void AssertDescendAndVisitorThroughSame(
            Aas.IClass instance)
        {
            var logFromDescend = new List<string>();
            foreach (var subInstance in instance.Descend())
            {
                logFromDescend.Add(Trace(subInstance));
            }

            var visitor = new TracingVisitorThrough();
            visitor.Visit(instance);
            var traceFromVisitor = visitor.Log;

            Assert.IsNotEmpty(traceFromVisitor);

            Assert.AreEqual(
                Trace(instance),
                traceFromVisitor[0]);

            traceFromVisitor.RemoveAt(0);

            Assert.That(traceFromVisitor, Is.EquivalentTo(logFromDescend));
        }

        private static void CompareOrRerecordTrace(
            IClass instance,
            string expectedPath)
        {
            var writer = new System.IO.StringWriter();
            foreach (var descendant in instance.Descend())
            {
                switch (descendant)
                {
                    case IIdentifiable identifiable:
                        {
                            writer.WriteLine(
                                $"{identifiable.GetType()} with ID {identifiable.Id}");
                            break;
                        }
                    case IReferable referable:
                        {
                            writer.WriteLine(
                                $"{referable.GetType()} with ID-short {referable.IdShort}");
                            break;
                        }
                    default:
                        {
                            writer.WriteLine(descendant.GetType().Name);
                            break;
                        }
                }
            }

            string got = writer.ToString();

            if (Aas.Tests.Common.RecordMode)
            {
                string? parent = Path.GetDirectoryName(expectedPath);
                if (parent != null)
                {
                    if (!Directory.Exists(parent))
                    {
                        Directory.CreateDirectory(parent);
                    }
                }

                System.IO.File.WriteAllText(expectedPath, got);
            }
            else
            {
                if (!System.IO.File.Exists(expectedPath))
                {
                    throw new System.IO.FileNotFoundException(
                        $"The file with the recorded trace does not exist: {expectedPath}");
                }

                string expected = System.IO.File.ReadAllText(expectedPath);
                Assert.AreEqual(
                    expected.Replace("\r\n", "\n"),
                    got.Replace("\r\n", "\n"),
                    $"The expected trace from {expectedPath} does not match the actual one");
            }
        }

        [Test]
        public void Test_Descend_of_Extension()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadCompleteExtension());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Extension",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Extension

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Extension()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadCompleteExtension());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Extension

        [Test]
        public void Test_Descend_of_AdministrativeInformation()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAdministrativeInformation());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "AdministrativeInformation",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_AdministrativeInformation

        [Test]
        public void Test_Descend_against_VisitorThrough_for_AdministrativeInformation()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAdministrativeInformation());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_AdministrativeInformation

        [Test]
        public void Test_Descend_of_Qualifier()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadCompleteQualifier());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Qualifier",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Qualifier

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Qualifier()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadCompleteQualifier());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Qualifier

        [Test]
        public void Test_Descend_of_AssetAdministrationShell()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetAdministrationShell());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "AssetAdministrationShell",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_AssetAdministrationShell

        [Test]
        public void Test_Descend_against_VisitorThrough_for_AssetAdministrationShell()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetAdministrationShell());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_AssetAdministrationShell

        [Test]
        public void Test_Descend_of_AssetInformation()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetInformation());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "AssetInformation",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_AssetInformation

        [Test]
        public void Test_Descend_against_VisitorThrough_for_AssetInformation()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetInformation());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_AssetInformation

        [Test]
        public void Test_Descend_of_Resource()
        {
            Aas.Resource instance = (
                Aas.Tests.CommonJsonization.LoadCompleteResource());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Resource",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Resource

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Resource()
        {
            Aas.Resource instance = (
                Aas.Tests.CommonJsonization.LoadCompleteResource());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Resource

        [Test]
        public void Test_Descend_of_SpecificAssetId()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSpecificAssetId());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "SpecificAssetId",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_SpecificAssetId

        [Test]
        public void Test_Descend_against_VisitorThrough_for_SpecificAssetId()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSpecificAssetId());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_SpecificAssetId

        [Test]
        public void Test_Descend_of_Submodel()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Submodel",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Submodel

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Submodel()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Submodel

        [Test]
        public void Test_Descend_of_RelationshipElement()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRelationshipElement());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "RelationshipElement",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_RelationshipElement

        [Test]
        public void Test_Descend_against_VisitorThrough_for_RelationshipElement()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRelationshipElement());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_RelationshipElement

        [Test]
        public void Test_Descend_of_SubmodelElementList()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "SubmodelElementList",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_SubmodelElementList

        [Test]
        public void Test_Descend_against_VisitorThrough_for_SubmodelElementList()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_SubmodelElementList

        [Test]
        public void Test_Descend_of_SubmodelElementCollection()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "SubmodelElementCollection",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_SubmodelElementCollection

        [Test]
        public void Test_Descend_against_VisitorThrough_for_SubmodelElementCollection()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_SubmodelElementCollection

        [Test]
        public void Test_Descend_of_Property()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadCompleteProperty());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Property",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Property

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Property()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadCompleteProperty());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Property

        [Test]
        public void Test_Descend_of_MultiLanguageProperty()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadCompleteMultiLanguageProperty());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "MultiLanguageProperty",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_MultiLanguageProperty

        [Test]
        public void Test_Descend_against_VisitorThrough_for_MultiLanguageProperty()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadCompleteMultiLanguageProperty());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_MultiLanguageProperty

        [Test]
        public void Test_Descend_of_Range()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRange());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Range",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Range

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Range()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRange());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Range

        [Test]
        public void Test_Descend_of_ReferenceElement()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReferenceElement());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "ReferenceElement",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_ReferenceElement

        [Test]
        public void Test_Descend_against_VisitorThrough_for_ReferenceElement()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReferenceElement());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_ReferenceElement

        [Test]
        public void Test_Descend_of_Blob()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBlob());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Blob",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Blob

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Blob()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBlob());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Blob

        [Test]
        public void Test_Descend_of_File()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadCompleteFile());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "File",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_File

        [Test]
        public void Test_Descend_against_VisitorThrough_for_File()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadCompleteFile());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_File

        [Test]
        public void Test_Descend_of_AnnotatedRelationshipElement()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "AnnotatedRelationshipElement",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_AnnotatedRelationshipElement

        [Test]
        public void Test_Descend_against_VisitorThrough_for_AnnotatedRelationshipElement()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_AnnotatedRelationshipElement

        [Test]
        public void Test_Descend_of_Entity()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Entity",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Entity

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Entity()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Entity

        [Test]
        public void Test_Descend_of_EventPayload()
        {
            Aas.EventPayload instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEventPayload());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "EventPayload",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_EventPayload

        [Test]
        public void Test_Descend_against_VisitorThrough_for_EventPayload()
        {
            Aas.EventPayload instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEventPayload());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_EventPayload

        [Test]
        public void Test_Descend_of_BasicEventElement()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBasicEventElement());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "BasicEventElement",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_BasicEventElement

        [Test]
        public void Test_Descend_against_VisitorThrough_for_BasicEventElement()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBasicEventElement());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_BasicEventElement

        [Test]
        public void Test_Descend_of_Operation()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Operation",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Operation

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Operation()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Operation

        [Test]
        public void Test_Descend_of_OperationVariable()
        {
            Aas.OperationVariable instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperationVariable());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "OperationVariable",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_OperationVariable

        [Test]
        public void Test_Descend_against_VisitorThrough_for_OperationVariable()
        {
            Aas.OperationVariable instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperationVariable());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_OperationVariable

        [Test]
        public void Test_Descend_of_Capability()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadCompleteCapability());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Capability",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Capability

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Capability()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadCompleteCapability());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Capability

        [Test]
        public void Test_Descend_of_ConceptDescription()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadCompleteConceptDescription());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "ConceptDescription",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_ConceptDescription

        [Test]
        public void Test_Descend_against_VisitorThrough_for_ConceptDescription()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadCompleteConceptDescription());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_ConceptDescription

        [Test]
        public void Test_Descend_of_Reference()
        {
            Aas.Reference instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReference());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Reference",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Reference

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Reference()
        {
            Aas.Reference instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReference());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Reference

        [Test]
        public void Test_Descend_of_Key()
        {
            Aas.Key instance = (
                Aas.Tests.CommonJsonization.LoadCompleteKey());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Key",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Key

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Key()
        {
            Aas.Key instance = (
                Aas.Tests.CommonJsonization.LoadCompleteKey());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Key

        [Test]
        public void Test_Descend_of_LangString()
        {
            Aas.LangString instance = (
                Aas.Tests.CommonJsonization.LoadCompleteLangString());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "LangString",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_LangString

        [Test]
        public void Test_Descend_against_VisitorThrough_for_LangString()
        {
            Aas.LangString instance = (
                Aas.Tests.CommonJsonization.LoadCompleteLangString());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_LangString

        [Test]
        public void Test_Descend_of_LangStringSet()
        {
            Aas.LangStringSet instance = (
                Aas.Tests.CommonJsonization.LoadCompleteLangStringSet());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "LangStringSet",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_LangStringSet

        [Test]
        public void Test_Descend_against_VisitorThrough_for_LangStringSet()
        {
            Aas.LangStringSet instance = (
                Aas.Tests.CommonJsonization.LoadCompleteLangStringSet());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_LangStringSet

        [Test]
        public void Test_Descend_of_DataSpecificationContent()
        {
            Aas.DataSpecificationContent instance = (
                Aas.Tests.CommonJsonization.LoadCompleteDataSpecificationContent());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "DataSpecificationContent",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_DataSpecificationContent

        [Test]
        public void Test_Descend_against_VisitorThrough_for_DataSpecificationContent()
        {
            Aas.DataSpecificationContent instance = (
                Aas.Tests.CommonJsonization.LoadCompleteDataSpecificationContent());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_DataSpecificationContent

        [Test]
        public void Test_Descend_of_DataSpecification()
        {
            Aas.DataSpecification instance = (
                Aas.Tests.CommonJsonization.LoadCompleteDataSpecification());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "DataSpecification",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_DataSpecification

        [Test]
        public void Test_Descend_against_VisitorThrough_for_DataSpecification()
        {
            Aas.DataSpecification instance = (
                Aas.Tests.CommonJsonization.LoadCompleteDataSpecification());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_DataSpecification

        [Test]
        public void Test_Descend_of_Environment()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEnvironment());

            CompareOrRerecordTrace(
                instance,
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Descend",
                    "Environment",
                    "complete.json.trace"));
        }  // public void Test_Descend_of_Environment

        [Test]
        public void Test_Descend_against_VisitorThrough_for_Environment()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEnvironment());

            AssertDescendAndVisitorThroughSame(
                instance);
        }  // public void Test_Descend_against_VisitorThrough_for_Environment
    }  // class TestDescendAndVisitorThrough
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
