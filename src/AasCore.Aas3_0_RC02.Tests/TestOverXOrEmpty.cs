/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using NUnit.Framework;  // can't alias

using Aas = AasCore.Aas3_0_RC02;  // renamed

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestOverXOrEmpty
    {
        [Test]
        public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadCompleteExtension());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMinimalExtension());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_AdministrativeInformation_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAdministrativeInformation());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AdministrativeInformation_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_AdministrativeInformation_OverDataSpecificationsOrEmpty_default()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAdministrativeInformation());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AdministrativeInformation_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadCompleteQualifier());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadMinimalQualifier());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetAdministrationShell());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetAdministrationShell());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AssetAdministrationShell_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverDataSpecificationsOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetAdministrationShell());

            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_default

        [Test]
        public void Test_AssetInformation_OverSpecificAssetIdsOrEmpty_non_default()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAssetInformation());

            int count = 0;
            foreach (var _ in instance.OverSpecificAssetIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AssetInformation_OverSpecificAssetIdsOrEmpty_non_default

        [Test]
        public void Test_AssetInformation_OverSpecificAssetIdsOrEmpty_default()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetInformation());

            int count = 0;
            foreach (var _ in instance.OverSpecificAssetIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AssetInformation_OverSpecificAssetIdsOrEmpty_default

        [Test]
        public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSpecificAssetId());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSpecificAssetId());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Submodel_OverExtensionsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Submodel_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverExtensionsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Submodel_OverQualifiersOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Submodel_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverQualifiersOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Submodel_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Submodel_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Submodel_OverSubmodelElementsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodel());

            int count = 0;
            foreach (var _ in instance.OverSubmodelElementsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Submodel_OverSubmodelElementsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverSubmodelElementsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            int count = 0;
            foreach (var _ in instance.OverSubmodelElementsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverSubmodelElementsOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_RelationshipElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverExtensionsOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_RelationshipElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverQualifiersOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_RelationshipElement_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverDataSpecificationsOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverExtensionsOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementList_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverExtensionsOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverExtensionsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverQualifiersOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementList_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverQualifiersOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverQualifiersOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementList_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverDataSpecificationsOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverValueOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementList_OverValueOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverValueOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverValueOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementCollection_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverDataSpecificationsOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverValueOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadCompleteSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_SubmodelElementCollection_OverValueOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverValueOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverValueOrEmpty_default

        [Test]
        public void Test_Property_OverExtensionsOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadCompleteProperty());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Property_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Property_OverExtensionsOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Property_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadCompleteProperty());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Property_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Property_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Property_OverQualifiersOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadCompleteProperty());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Property_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Property_OverQualifiersOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Property_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadCompleteProperty());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Property_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Property_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadCompleteMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadCompleteMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadCompleteMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadCompleteMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_MultiLanguageProperty_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverDataSpecificationsOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Range_OverExtensionsOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRange());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Range_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Range_OverExtensionsOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Range_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRange());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Range_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Range_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Range_OverQualifiersOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRange());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Range_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Range_OverQualifiersOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Range_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadCompleteRange());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Range_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Range_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ReferenceElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverExtensionsOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ReferenceElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverQualifiersOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ReferenceElement_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverDataSpecificationsOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Blob_OverExtensionsOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBlob());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Blob_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Blob_OverExtensionsOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBlob());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Blob_OverQualifiersOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBlob());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Blob_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Blob_OverQualifiersOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Blob_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBlob());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Blob_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Blob_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_File_OverExtensionsOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadCompleteFile());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_File_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_File_OverExtensionsOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverExtensionsOrEmpty_default

        [Test]
        public void Test_File_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadCompleteFile());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_File_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_File_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_File_OverQualifiersOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadCompleteFile());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_File_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_File_OverQualifiersOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverQualifiersOrEmpty_default

        [Test]
        public void Test_File_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadCompleteFile());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_File_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_File_OverDataSpecificationsOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AnnotatedRelationshipElement_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverDataSpecificationsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverAnnotationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            int count = 0;
            foreach (var _ in instance.OverAnnotationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_default

        [Test]
        public void Test_Entity_OverExtensionsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Entity_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverExtensionsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Entity_OverQualifiersOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Entity_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Entity_OverQualifiersOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Entity_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Entity_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Entity_OverStatementsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEntity());

            int count = 0;
            foreach (var _ in instance.OverStatementsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Entity_OverStatementsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverStatementsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            int count = 0;
            foreach (var _ in instance.OverStatementsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverStatementsOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_BasicEventElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverExtensionsOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_BasicEventElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverQualifiersOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadCompleteBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_BasicEventElement_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverDataSpecificationsOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Operation_OverExtensionsOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Operation_OverExtensionsOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Operation_OverQualifiersOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Operation_OverQualifiersOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Operation_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Operation_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Operation_OverInputVariablesOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverInputVariablesOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverInputVariablesOrEmpty_non_default

        [Test]
        public void Test_Operation_OverInputVariablesOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverInputVariablesOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverInputVariablesOrEmpty_default

        [Test]
        public void Test_Operation_OverOutputVariablesOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverOutputVariablesOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverOutputVariablesOrEmpty_non_default

        [Test]
        public void Test_Operation_OverOutputVariablesOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverOutputVariablesOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverOutputVariablesOrEmpty_default

        [Test]
        public void Test_Operation_OverInoutputVariablesOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadCompleteOperation());

            int count = 0;
            foreach (var _ in instance.OverInoutputVariablesOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Operation_OverInoutputVariablesOrEmpty_non_default

        [Test]
        public void Test_Operation_OverInoutputVariablesOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            int count = 0;
            foreach (var _ in instance.OverInoutputVariablesOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverInoutputVariablesOrEmpty_default

        [Test]
        public void Test_Capability_OverExtensionsOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadCompleteCapability());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Capability_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Capability_OverExtensionsOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadCompleteCapability());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Capability_OverQualifiersOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadCompleteCapability());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Capability_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Capability_OverQualifiersOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Capability_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadCompleteCapability());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Capability_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Capability_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverExtensionsOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadCompleteConceptDescription());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ConceptDescription_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverExtensionsOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverExtensionsOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadCompleteConceptDescription());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ConceptDescription_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverDataSpecificationsOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverDataSpecificationsOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverIsCaseOfOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadCompleteConceptDescription());

            int count = 0;
            foreach (var _ in instance.OverIsCaseOfOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_ConceptDescription_OverIsCaseOfOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverIsCaseOfOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            int count = 0;
            foreach (var _ in instance.OverIsCaseOfOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverIsCaseOfOrEmpty_default

        [Test]
        public void Test_Environment_OverAssetAdministrationShellsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEnvironment());

            int count = 0;
            foreach (var _ in instance.OverAssetAdministrationShellsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Environment_OverAssetAdministrationShellsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverAssetAdministrationShellsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            int count = 0;
            foreach (var _ in instance.OverAssetAdministrationShellsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverAssetAdministrationShellsOrEmpty_default

        [Test]
        public void Test_Environment_OverSubmodelsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEnvironment());

            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Environment_OverSubmodelsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverSubmodelsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverSubmodelsOrEmpty_default

        [Test]
        public void Test_Environment_OverConceptDescriptionsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEnvironment());

            int count = 0;
            foreach (var _ in instance.OverConceptDescriptionsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Environment_OverConceptDescriptionsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverConceptDescriptionsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            int count = 0;
            foreach (var _ in instance.OverConceptDescriptionsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverConceptDescriptionsOrEmpty_default

        [Test]
        public void Test_Environment_OverDataSpecificationsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadCompleteEnvironment());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.Greater(count, 0);
        }  // public void Test_Environment_OverDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverDataSpecificationsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            int count = 0;
            foreach (var _ in instance.OverDataSpecificationsOrEmpty())
            {
                count++;
            }

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverDataSpecificationsOrEmpty_default
    }  // class TestOverXOrEmpty
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
