"""Generate the test code for the JSON de/serialization of enums."""

import io
import json
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.csharp.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
import aas_core_meta.v3rc2

from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped
from aas_core_codegen.csharp import (
    common as csharp_common
)

from testgen.common import load_symbol_table


def main() -> int:
    """Execute the main routine."""
    symbol_table = load_symbol_table()

    # noinspection PyListCreation
    blocks = []  # type: List[str]

    for symbol in symbol_table.symbols:
        if not isinstance(symbol, intermediate.Enumeration):
            continue

        enum_name = aas_core_codegen.csharp.naming.enum_name(symbol.name)

        assert len(symbol.literals) > 0, (
            f"Unexpected enumeration without literals: {symbol.name}"
        )

        literal_value = symbol.literals[0].value
        literal_value_json_str = json.dumps(literal_value)

        blocks.append(
            Stripped(
                    f"""\
[Test]
public void Test_round_trip_{enum_name}()
{{
    var node = Nodes.JsonValue.Create(
        {csharp_common.string_literal(literal_value)})
            ?? throw new System.InvalidOperationException(
                "Unexpected null node");

    var parsed = Aas.Jsonization.Deserialize.{enum_name}From(
        node);

    var serialized = Aas.Jsonization.Serialize.{enum_name}ToJsonValue(
        parsed);
    
    Assert.AreEqual(
        {csharp_common.string_literal(literal_value_json_str)},
        serialized.ToJsonString());
}}  // void Test_round_trip_{enum_name}"""
                )
            )

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Nodes = System.Text.Json.Nodes;

using NUnit.Framework;  // can't alias

using Aas = AasCore.Aas3_0_RC02;  // renamed

namespace AasCore.Aas3_0_RC02.Tests
{
    public class TestJsonizationOfEnums
    {
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, "        "))

    writer.write(
        """
    }  // class TestJsonizationOfEnums
}  // namespace AasCore.Aas3_0_RC02.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent

    target_pth = (
            repo_root / "src/AasCore.Aas3_0_RC02.Tests/TestJsonizationOfEnums.cs"
    )
    target_pth.write_text(writer.getvalue(), encoding='utf-8')

    return 0


if __name__ == "__main__":
    sys.exit(main())
