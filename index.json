{
  "api/AasCore.Aas3_0_RC02.AasSubmodelElements.html": {
    "href": "api/AasCore.Aas3_0_RC02.AasSubmodelElements.html",
    "title": "Enum AasSubmodelElements",
    "keywords": "Enum AasSubmodelElements Enumeration of all possible elements of a SubmodelElementList . Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum AasSubmodelElements Fields Name Description AnnotatedRelationshipElement BasicEventElement Blob Capability DataElement Entity EventElement File MultiLanguageProperty Operation Property Range ReferenceElement RelationshipElement SubmodelElement SubmodelElementCollection SubmodelElementList"
  },
  "api/AasCore.Aas3_0_RC02.AdministrativeInformation.html": {
    "href": "api/AasCore.Aas3_0_RC02.AdministrativeInformation.html",
    "title": "Class AdministrativeInformation",
    "keywords": "Class AdministrativeInformation Administrative meta-information for an element like version information. Inheritance System.Object AdministrativeInformation Implements IAdministrativeInformation IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AdministrativeInformation : IAdministrativeInformation, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-005: If Version is not specified then also Revision shall be unspecified. This means, a revision requires a version. If there is no version there is no revision neither. Revision is optional. Constructors | Improve this Doc View Source AdministrativeInformation(List<EmbeddedDataSpecification>, String, String) Declaration public AdministrativeInformation(List<EmbeddedDataSpecification> embeddedDataSpecifications = null, string version = null, string revision = null) Parameters Type Name Description System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.String version System.String revision Properties | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Revision Revision of the element. Declaration public string Revision { get; set; } Property Value Type Description System.String | Improve this Doc View Source Version Version of the element. Declaration public string Version { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IAdministrativeInformation IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.AnnotatedRelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.AnnotatedRelationshipElement.html",
    "title": "Class AnnotatedRelationshipElement",
    "keywords": "Class AnnotatedRelationshipElement An annotated relationship element is a relationship element that can be annotated with additional data elements. Inheritance System.Object AnnotatedRelationshipElement Implements IAnnotatedRelationshipElement IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AnnotatedRelationshipElement : IAnnotatedRelationshipElement, IRelationshipElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source AnnotatedRelationshipElement(Reference, Reference, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, List<IDataElement>) Declaration public AnnotatedRelationshipElement(Reference first, Reference second, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<IDataElement> annotations = null) Parameters Type Name Description Reference first Reference second System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < IDataElement > annotations Properties | Improve this Doc View Source Annotations A data element that represents an annotation that holds for the relationship between the two elements Declaration public List<IDataElement> Annotations { get; set; } Property Value Type Description System.Collections.Generic.List < IDataElement > | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source First Reference to the first element in the relationship taking the role of the subject. Declaration public Reference First { get; set; } Property Value Type Description Reference | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source Second Reference to the second element in the relationship taking the role of the object. Declaration public Reference Second { get; set; } Property Value Type Description Reference | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverAnnotationsOrEmpty() Iterate over Annotations, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<IDataElement> OverAnnotationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < IDataElement > | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IAnnotatedRelationshipElement IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.AssetAdministrationShell.html": {
    "href": "api/AasCore.Aas3_0_RC02.AssetAdministrationShell.html",
    "title": "Class AssetAdministrationShell",
    "keywords": "Class AssetAdministrationShell An asset administration shell. Inheritance System.Object AssetAdministrationShell Implements IAssetAdministrationShell IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AssetAdministrationShell : IAssetAdministrationShell, IIdentifiable, IReferable, IHasExtensions, IHasDataSpecification, IClass Constructors | Improve this Doc View Source AssetAdministrationShell(String, AssetInformation, List<Extension>, String, String, List<LangString>, List<LangString>, String, AdministrativeInformation, List<EmbeddedDataSpecification>, Reference, List<Reference>) Declaration public AssetAdministrationShell(string id, AssetInformation assetInformation, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, AdministrativeInformation administration = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, Reference derivedFrom = null, List<Reference> submodels = null) Parameters Type Name Description System.String id AssetInformation assetInformation System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum AdministrativeInformation administration System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications Reference derivedFrom System.Collections.Generic.List < Reference > submodels Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration public AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source AssetInformation Meta-information about the asset the AAS is representing. Declaration public AssetInformation AssetInformation { get; set; } Property Value Type Description AssetInformation | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source DerivedFrom The reference to the AAS the AAS was derived from. Declaration public Reference DerivedFrom { get; set; } Property Value Type Description Reference | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source Id The globally unique identification of the element. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Submodels References to submodels of the AAS. Declaration public List<Reference> Submodels { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks A submodel is a description of an aspect of the asset the AAS is representing. The asset of an AAS is typically described by one or more submodels. Temporarily no submodel might be assigned to the AAS. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverSubmodelsOrEmpty() Iterate over Submodels, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSubmodelsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IAssetAdministrationShell IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.AssetInformation.html": {
    "href": "api/AasCore.Aas3_0_RC02.AssetInformation.html",
    "title": "Class AssetInformation",
    "keywords": "Class AssetInformation In AssetInformation identifying meta data of the asset that is represented by an AAS is defined. Inheritance System.Object AssetInformation Implements IAssetInformation IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AssetInformation : IAssetInformation, IClass Remarks The asset may either represent an asset type or an asset instance. The asset has a globally unique identifier plus – if needed – additional domain specific (proprietary) identifiers. However, to support the corner case of very first phase of lifecycle where a stabilised/constant_set global asset identifier does not already exist, the corresponding attribute GlobalAssetId is optional. Constraints: Constraint AASd-116: globalAssetId (case-insensitive) is a reserved key. If used as value for Name then Value shall be identical to GlobalAssetId . Constructors | Improve this Doc View Source AssetInformation(AssetKind, Reference, List<SpecificAssetId>, Resource) Declaration public AssetInformation(AssetKind assetKind, Reference globalAssetId = null, List<SpecificAssetId> specificAssetIds = null, Resource defaultThumbnail = null) Parameters Type Name Description AssetKind assetKind Reference globalAssetId System.Collections.Generic.List < SpecificAssetId > specificAssetIds Resource defaultThumbnail Properties | Improve this Doc View Source AssetKind Denotes whether the Asset is of kind Type or Instance . Declaration public AssetKind AssetKind { get; set; } Property Value Type Description AssetKind | Improve this Doc View Source DefaultThumbnail Thumbnail of the asset represented by the Asset Administration Shell. Declaration public Resource DefaultThumbnail { get; set; } Property Value Type Description Resource Remarks Used as default. | Improve this Doc View Source GlobalAssetId Global identifier of the asset the AAS is representing. Declaration public Reference GlobalAssetId { get; set; } Property Value Type Description Reference Remarks This attribute is required as soon as the AAS is exchanged via partners in the life cycle of the asset. In a first phase of the life cycle the asset might not yet have a global ID but already an internal identifier. The internal identifier would be modelled via SpecificAssetIds . This is a global reference. | Improve this Doc View Source SpecificAssetIds Additional domain-specific, typically proprietary identifier for the asset like e.g., serial number etc. Declaration public List<SpecificAssetId> SpecificAssetIds { get; set; } Property Value Type Description System.Collections.Generic.List < SpecificAssetId > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverSpecificAssetIdsOrEmpty() Iterate over SpecificAssetIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<SpecificAssetId> OverSpecificAssetIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < SpecificAssetId > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IAssetInformation IClass"
  },
  "api/AasCore.Aas3_0_RC02.AssetKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.AssetKind.html",
    "title": "Enum AssetKind",
    "keywords": "Enum AssetKind Enumeration for denoting whether an asset is a type asset or an instance asset. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum AssetKind Fields Name Description Instance concrete, clearly identifiable component of a certain type Type hardware or software element which specifies the common attributes shared by all instances of the type"
  },
  "api/AasCore.Aas3_0_RC02.BasicEventElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.BasicEventElement.html",
    "title": "Class BasicEventElement",
    "keywords": "Class BasicEventElement A basic event element. Inheritance System.Object BasicEventElement Implements IBasicEventElement IEventElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class BasicEventElement : IBasicEventElement, IEventElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source BasicEventElement(Reference, Direction, StateOfEvent, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, String, Reference, String, String, String) Declaration public BasicEventElement(Reference observed, Direction direction, StateOfEvent state, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, string messageTopic = null, Reference messageBroker = null, string lastUpdate = null, string minInterval = null, string maxInterval = null) Parameters Type Name Description Reference observed Direction direction StateOfEvent state System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.String messageTopic Reference messageBroker System.String lastUpdate System.String minInterval System.String maxInterval Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source Direction Direction of event. Declaration public Direction Direction { get; set; } Property Value Type Description Direction Remarks Can be { Input, Output } . | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source LastUpdate Timestamp in UTC, when the last event was received (input direction) or sent (output direction). Declaration public string LastUpdate { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxInterval For input direction: not applicable. Declaration public string MaxInterval { get; set; } Property Value Type Description System.String Remarks For output direction: maximum interval in time, the respective Referable shall send an update of the status of the event, even if no other trigger condition for the event was not met. Might be not specified, that is, there is no maximum interval | Improve this Doc View Source MessageBroker Information, which outer message infrastructure shall handle messages for the IEventElement . Refers to a Submodel , SubmodelElementList , SubmodelElementCollection or Entity , which contains IDataElement 's describing the proprietary specification for the message broker. Declaration public Reference MessageBroker { get; set; } Property Value Type Description Reference Remarks For different message infrastructure, e.g., OPC UA or MQTT or AMQP, this proprietary specification could be standardized by having respective Submodels. | Improve this Doc View Source MessageTopic Information for the outer message infrastructure for scheduling the event to the respective communication channel. Declaration public string MessageTopic { get; set; } Property Value Type Description System.String | Improve this Doc View Source MinInterval For input direction, reports on the maximum frequency, the software entity behind the respective Referable can handle input events. Declaration public string MinInterval { get; set; } Property Value Type Description System.String Remarks For output events, specifies the maximum frequency of outputting this event to an outer infrastructure. Might be not specified, that is, there is no minimum interval. | Improve this Doc View Source Observed Reference to the IReferable , which defines the scope of the event. Can be AssetAdministrationShell , Submodel , or ISubmodelElement . Declaration public Reference Observed { get; set; } Property Value Type Description Reference Remarks Reference to a referable, e.g., a data element or a submodel, that is being observed. | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source State State of event. Declaration public StateOfEvent State { get; set; } Property Value Type Description StateOfEvent Remarks Can be { On, Off } . | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IBasicEventElement IEventElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Blob.html": {
    "href": "api/AasCore.Aas3_0_RC02.Blob.html",
    "title": "Class Blob",
    "keywords": "Class Blob A Blob is a data element that represents a file that is contained with its source code in the value attribute. Inheritance System.Object Blob Implements IBlob IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Blob : IBlob, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source Blob(String, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, Byte[]) Declaration public Blob(string contentType, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, byte[] value = null) Parameters Type Name Description System.String contentType System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Byte [] value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source ContentType Content type of the content of the Blob . Declaration public string ContentType { get; set; } Property Value Type Description System.String Remarks The content type (MIME type) states which file extensions the file can have. Valid values are content types like e.g. application/json , application/xls , image/jpg . The allowed values are defined as in RFC2046. | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the Blob instance of a blob data element. Declaration public byte[] Value { get; set; } Property Value Type Description System.Byte [] Remarks In contrast to the file property the file content is stored directly as value in the Blob data element. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IBlob IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Capability.html": {
    "href": "api/AasCore.Aas3_0_RC02.Capability.html",
    "title": "Class Capability",
    "keywords": "Class Capability A capability is the implementation-independent description of the potential of an asset to achieve a certain effect in the physical or virtual world. Inheritance System.Object Capability Implements ICapability ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Capability : ICapability, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The SemanticId of a capability is typically an ontology. Thus, reasoning on capabilities is enabled. Constructors | Improve this Doc View Source Capability(List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>) Declaration public Capability(List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null) Parameters Type Name Description System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ICapability ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.ConceptDescription.html": {
    "href": "api/AasCore.Aas3_0_RC02.ConceptDescription.html",
    "title": "Class ConceptDescription",
    "keywords": "Class ConceptDescription The semantics of a property or other elements that may have a semantic description is defined by a concept description. Inheritance System.Object ConceptDescription Implements IConceptDescription IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ConceptDescription : IConceptDescription, IIdentifiable, IReferable, IHasExtensions, IHasDataSpecification, IClass Remarks The description of the concept should follow a standardized schema (realized as data specification template). Constraints: Constraint AASd-051: A ConceptDescription shall have one of the following categories VALUE , PROPERTY , REFERENCE , DOCUMENT , CAPABILITY , RELATIONSHIP , COLLECTION , FUNCTION , EVENT , ENTITY , APPLICATION_CLASS , QUALIFIER , VIEW . Default: PROPERTY . Constraint AASc-004: For a ConceptDescription with Category PROPERTY or VALUE using data specification IEC61360, the DataType is mandatory and shall be one of: DATE , STRING , STRING_TRANSLATABLE , INTEGER_MEASURE , INTEGER_COUNT , INTEGER_CURRENCY , REAL_MEASURE , REAL_COUNT , REAL_CURRENCY , BOOLEAN , RATIONAL , RATIONAL_MEASURE , TIME , TIMESTAMP . Constraint AASc-005: For a ConceptDescription with Category REFERENCE using data specification IEC61360, the DataType is mandatory and shall be one of: STRING , IRI , IRDI . Constraint AASc-006: For a ConceptDescription with Category DOCUMENT using data specification IEC61360, the DataType is mandatory and shall be defined. Constraint AASc-007: For a ConceptDescription with Category QUALIFIER_TYPE using data specification IEC61360, the DataType is mandatory and shall be Constraint AASc-008: For all ConceptDescription 's with a category except Category VALUE using data specification IEC61360, Definition is mandatory and shall be defined at least in English. Constraint AASc-003: For a ConceptDescription with Category VALUE using data specification IEC61360, the Value shall be set. Constructors | Improve this Doc View Source ConceptDescription(String, List<Extension>, String, String, List<LangString>, List<LangString>, String, AdministrativeInformation, List<EmbeddedDataSpecification>, List<Reference>) Declaration public ConceptDescription(string id, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, AdministrativeInformation administration = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<Reference> isCaseOf = null) Parameters Type Name Description System.String id System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum AdministrativeInformation administration System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < Reference > isCaseOf Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration public AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source Id The globally unique identification of the element. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source IsCaseOf Reference to an external definition the concept is compatible to or was derived from. Declaration public List<Reference> IsCaseOf { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Compare to is-case-of relationship in ISO 13584-32 & IEC EN 61360\" Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverIsCaseOfOrEmpty() Iterate over IsCaseOf, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverIsCaseOfOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IConceptDescription IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Constants.html": {
    "href": "api/AasCore.Aas3_0_RC02.Constants.html",
    "title": "Class Constants",
    "keywords": "Class Constants Provide constant values of the meta-model. Inheritance System.Object Constants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Constants Fields | Improve this Doc View Source AasIdentifiables Declaration public static readonly HashSet<KeyTypes?> AasIdentifiables Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source AasReferableNonIdentifiables Declaration public static readonly HashSet<KeyTypes?> AasReferableNonIdentifiables Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source AasReferables Declaration public static readonly HashSet<KeyTypes?> AasReferables Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source AasSubmodelElementsAsKeys Declaration public static readonly HashSet<KeyTypes?> AasSubmodelElementsAsKeys Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source DataTypeIec61360ForDocument Declaration public static readonly HashSet<DataTypeIec61360?> DataTypeIec61360ForDocument Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source DataTypeIec61360ForPropertyOrValue Declaration public static readonly HashSet<DataTypeIec61360?> DataTypeIec61360ForPropertyOrValue Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source DataTypeIec61360ForReference Declaration public static readonly HashSet<DataTypeIec61360?> DataTypeIec61360ForReference Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source FragmentKeys Declaration public static readonly HashSet<KeyTypes?> FragmentKeys Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source GenericFragmentKeys Declaration public static readonly HashSet<KeyTypes?> GenericFragmentKeys Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source GenericGloballyIdentifiables Declaration public static readonly HashSet<KeyTypes?> GenericGloballyIdentifiables Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source GloballyIdentifiables Declaration public static readonly HashSet<KeyTypes?> GloballyIdentifiables Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source Iec61360DataTypesWithUnit Declaration public static readonly HashSet<DataTypeIec61360?> Iec61360DataTypesWithUnit Field Value Type Description System.Collections.Generic.HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source ValidCategoriesForConceptDescription Declaration public static readonly HashSet<string> ValidCategoriesForConceptDescription Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source ValidCategoriesForDataElement Declaration public static readonly HashSet<string> ValidCategoriesForDataElement Field Value Type Description System.Collections.Generic.HashSet < System.String >"
  },
  "api/AasCore.Aas3_0_RC02.Copying.html": {
    "href": "api/AasCore.Aas3_0_RC02.Copying.html",
    "title": "Class Copying",
    "keywords": "Class Copying Allow for making shallow and deep copies of AAS model instances. Inheritance System.Object Copying Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Copying Methods | Improve this Doc View Source Deep<T>(T) Make a recursively a deep copy of that . Declaration public static T Deep<T>(T that) where T : IClass Parameters Type Name Description T that to be deeply copied in a recursive manner Returns Type Description T Type Parameters Name Description T type to cast the result to | Improve this Doc View Source Shallow<T>(T) Make a shallow copy of that . Declaration public static T Shallow<T>(T that) where T : IClass Parameters Type Name Description T that to be copied in a shallow manner Returns Type Description T Type Parameters Name Description T type to cast the result to Remarks All the properties are copied by reference. This includes also the lists. Hence, a list property is copied by reference, and not, as sometimes might be expected, as a new list of underlying references."
  },
  "api/AasCore.Aas3_0_RC02.DataSpecificationIec61360.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataSpecificationIec61360.html",
    "title": "Class DataSpecificationIec61360",
    "keywords": "Class DataSpecificationIec61360 Content of data specification template for concept descriptions for properties, values and value lists conformant to IEC 61360. Inheritance System.Object DataSpecificationIec61360 Implements IDataSpecificationIec61360 IDataSpecificationContent IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class DataSpecificationIec61360 : IDataSpecificationIec61360, IDataSpecificationContent, IClass Remarks IEC61360 requires also a globally unique identifier for a concept description. This ID is not part of the data specification template. Instead the Id as inherited via IIdentifiable is used. Same holds for administrative information like the version and revision. IdShort and ShortName are very similar. However, in this case the decision was to add ShortName explicitly to the data specification. Same holds for DisplayName and PreferredName . Same holds for Description and Definition . Constraints: Constraint AASc-010: If Value is not empty then ValueList shall be empty and vice versa. Constraint AASc-009: If DataType one of: IntegerMeasure , RealMeasure , RationalMeasure , IntegerCurrency , RealCurrency , then Unit or UnitId shall be defined. Constructors | Improve this Doc View Source DataSpecificationIec61360(List<LangString>, List<LangString>, String, Reference, String, String, Nullable<DataTypeIec61360>, List<LangString>, String, ValueList, String, Nullable<LevelType>) Declaration public DataSpecificationIec61360(List<LangString> preferredName, List<LangString> shortName = null, string unit = null, Reference unitId = null, string sourceOfDefinition = null, string symbol = null, DataTypeIec61360? dataType = null, List<LangString> definition = null, string valueFormat = null, ValueList valueList = null, string value = null, LevelType? levelType = null) Parameters Type Name Description System.Collections.Generic.List < LangString > preferredName System.Collections.Generic.List < LangString > shortName System.String unit Reference unitId System.String sourceOfDefinition System.String symbol System.Nullable < DataTypeIec61360 > dataType System.Collections.Generic.List < LangString > definition System.String valueFormat ValueList valueList System.String value System.Nullable < LevelType > levelType Properties | Improve this Doc View Source DataType Data Type Declaration public DataTypeIec61360? DataType { get; set; } Property Value Type Description System.Nullable < DataTypeIec61360 > | Improve this Doc View Source Definition Definition in different languages Declaration public List<LangString> Definition { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source LevelType Set of levels. Declaration public LevelType? LevelType { get; set; } Property Value Type Description System.Nullable < LevelType > | Improve this Doc View Source PreferredName Preferred name Declaration public List<LangString> PreferredName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks Constraints: Constraint AASc-002: PreferredName shall be provided at least in English. | Improve this Doc View Source ShortName Short name Declaration public List<LangString> ShortName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source SourceOfDefinition Source of definition Declaration public string SourceOfDefinition { get; set; } Property Value Type Description System.String | Improve this Doc View Source Symbol Symbol Declaration public string Symbol { get; set; } Property Value Type Description System.String | Improve this Doc View Source Unit Unit Declaration public string Unit { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitId Unique unit id Declaration public Reference UnitId { get; set; } Property Value Type Description Reference Remarks Unit and UnitId need to be consistent if both attributes are set It is recommended to use a global reference. Although the UnitId is a global reference there might exist a ConceptDescription with data specification DataSpecificationPhysicalUnit with the same ID. | Improve this Doc View Source Value Value Declaration public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueFormat Value Format Declaration public string ValueFormat { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueList List of allowed values Declaration public ValueList ValueList { get; set; } Property Value Type Description ValueList Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverDefinitionOrEmpty() Iterate over Definition, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDefinitionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverShortNameOrEmpty() Iterate over ShortName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverShortNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataSpecificationIec61360 IDataSpecificationContent IClass"
  },
  "api/AasCore.Aas3_0_RC02.DataSpecificationPhysicalUnit.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataSpecificationPhysicalUnit.html",
    "title": "Class DataSpecificationPhysicalUnit",
    "keywords": "Class DataSpecificationPhysicalUnit Inheritance System.Object DataSpecificationPhysicalUnit Implements IDataSpecificationPhysicalUnit IDataSpecificationContent IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class DataSpecificationPhysicalUnit : IDataSpecificationPhysicalUnit, IDataSpecificationContent, IClass Constructors | Improve this Doc View Source DataSpecificationPhysicalUnit(String, String, List<LangString>, String, String, String, String, String, String, String, String, String, String) Declaration public DataSpecificationPhysicalUnit(string unitName, string unitSymbol, List<LangString> definition, string siNotation = null, string siName = null, string dinNotation = null, string eceName = null, string eceCode = null, string nistName = null, string sourceOfDefinition = null, string conversionFactor = null, string registrationAuthorityId = null, string supplier = null) Parameters Type Name Description System.String unitName System.String unitSymbol System.Collections.Generic.List < LangString > definition System.String siNotation System.String siName System.String dinNotation System.String eceName System.String eceCode System.String nistName System.String sourceOfDefinition System.String conversionFactor System.String registrationAuthorityId System.String supplier Properties | Improve this Doc View Source ConversionFactor Conversion factor Declaration public string ConversionFactor { get; set; } Property Value Type Description System.String | Improve this Doc View Source Definition Definition in different languages Declaration public List<LangString> Definition { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source DinNotation Notation of physical unit conformant to DIN Declaration public string DinNotation { get; set; } Property Value Type Description System.String | Improve this Doc View Source EceCode Code of physical unit conformant to ECE Declaration public string EceCode { get; set; } Property Value Type Description System.String | Improve this Doc View Source EceName Name of physical unit conformant to ECE Declaration public string EceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source NistName Name of NIST physical unit Declaration public string NistName { get; set; } Property Value Type Description System.String | Improve this Doc View Source RegistrationAuthorityId Registration authority ID Declaration public string RegistrationAuthorityId { get; set; } Property Value Type Description System.String | Improve this Doc View Source SiName Name of SI physical unit Declaration public string SiName { get; set; } Property Value Type Description System.String | Improve this Doc View Source SiNotation Notation of SI physical unit Declaration public string SiNotation { get; set; } Property Value Type Description System.String | Improve this Doc View Source SourceOfDefinition Source of definition Declaration public string SourceOfDefinition { get; set; } Property Value Type Description System.String | Improve this Doc View Source Supplier Supplier Declaration public string Supplier { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitName Name of the physical unit Declaration public string UnitName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitSymbol Symbol for the physical unit Declaration public string UnitSymbol { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataSpecificationPhysicalUnit IDataSpecificationContent IClass"
  },
  "api/AasCore.Aas3_0_RC02.DataTypeDefXsd.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataTypeDefXsd.html",
    "title": "Enum DataTypeDefXsd",
    "keywords": "Enum DataTypeDefXsd Enumeration listing all xsd anySimpleTypes Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum DataTypeDefXsd Fields Name Description AnyUri Base64Binary Boolean Byte Date DateTime DateTimeStamp DayTimeDuration Decimal Double Duration Float GDay GMonth GMonthDay GYear GYearMonth HexBinary Int Integer Long NegativeInteger NonNegativeInteger NonPositiveInteger PositiveInteger Short String Time UnsignedByte UnsignedInt UnsignedLong UnsignedShort YearMonthDuration"
  },
  "api/AasCore.Aas3_0_RC02.DataTypeIec61360.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataTypeIec61360.html",
    "title": "Enum DataTypeIec61360",
    "keywords": "Enum DataTypeIec61360 Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum DataTypeIec61360 Fields Name Description Blob values containing the content of a file. Values may be binaries. Boolean values representing truth of logic or Boolean algebra (TRUE, FALSE) Date values containing a calendar date, conformant to ISO 8601:2004 Format yyyy-mm-dd Example from IEC 61360-1:2017: \"1999-05-31\" is the [DATE] representation of: \"31 May 1999\". File values containing an address to a file. The values are of type URI and can represent an absolute or relative path. Html Values containing string with any sequence of characters, using the syntax of HTML5 (see W3C Recommendation 28:2014) IntegerCount values containing values of type INTEGER but are no currencies or measures IntegerCurrency values containing values of type INTEGER that are currencies IntegerMeasure values containing values that are measure of type INTEGER. In addition such a value comes with a physical unit. Irdi values conforming to ISO/IEC 11179 series global identifier sequences Iri values containing values of type STRING conformant to Rfc 3987 Rational values containing values of type rational RationalMeasure values containing values of type rational. In addition such a value comes with a physical unit. RealCount values containing numbers that can be written as a terminating or non-terminating decimal; a rational or irrational number but are no currencies or measures RealCurrency values containing values of type REAL that are currencies RealMeasure values containing values that are measures of type REAL. In addition such a value comes with a physical unit. String values consisting of sequence of characters but cannot be translated into other languages StringTranslatable values containing string but shall be represented as different string in different languages Time values containing a time, conformant to ISO 8601:2004 but restricted to what is allowed in the corresponding type in xml. Timestamp values containing a time, conformant to ISO 8601:2004 but restricted to what is allowed in the corresponding type in xml."
  },
  "api/AasCore.Aas3_0_RC02.Direction.html": {
    "href": "api/AasCore.Aas3_0_RC02.Direction.html",
    "title": "Enum Direction",
    "keywords": "Enum Direction Direction Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum Direction Fields Name Description Input Input direction. Output Output direction"
  },
  "api/AasCore.Aas3_0_RC02.EmbeddedDataSpecification.html": {
    "href": "api/AasCore.Aas3_0_RC02.EmbeddedDataSpecification.html",
    "title": "Class EmbeddedDataSpecification",
    "keywords": "Class EmbeddedDataSpecification Embed the content of a data specification. Inheritance System.Object EmbeddedDataSpecification Implements IEmbeddedDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class EmbeddedDataSpecification : IEmbeddedDataSpecification, IClass Constructors | Improve this Doc View Source EmbeddedDataSpecification(Reference, IDataSpecificationContent) Declaration public EmbeddedDataSpecification(Reference dataSpecification, IDataSpecificationContent dataSpecificationContent) Parameters Type Name Description Reference dataSpecification IDataSpecificationContent dataSpecificationContent Properties | Improve this Doc View Source DataSpecification Reference to the data specification Declaration public Reference DataSpecification { get; set; } Property Value Type Description Reference | Improve this Doc View Source DataSpecificationContent Actual content of the data specification Declaration public IDataSpecificationContent DataSpecificationContent { get; set; } Property Value Type Description IDataSpecificationContent Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IEmbeddedDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Entity.html": {
    "href": "api/AasCore.Aas3_0_RC02.Entity.html",
    "title": "Class Entity",
    "keywords": "Class Entity An entity is a submodel element that is used to model entities. Inheritance System.Object Entity Implements IEntity ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Entity : IEntity, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-014: Either the attribute GlobalAssetId or SpecificAssetId of an Entity must be set if EntityType is set to SelfManagedEntity . They are not existing otherwise. Constructors | Improve this Doc View Source Entity(EntityType, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, List<ISubmodelElement>, Reference, SpecificAssetId) Declaration public Entity(EntityType entityType, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<ISubmodelElement> statements = null, Reference globalAssetId = null, SpecificAssetId specificAssetId = null) Parameters Type Name Description EntityType entityType System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < ISubmodelElement > statements Reference globalAssetId SpecificAssetId specificAssetId Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source EntityType Describes whether the entity is a co-managed entity or a self-managed entity. Declaration public EntityType EntityType { get; set; } Property Value Type Description EntityType | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source GlobalAssetId Global identifier of the asset the entity is representing. Declaration public Reference GlobalAssetId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SpecificAssetId Reference to a specific asset ID representing a supplementary identifier of the asset represented by the Asset Administration Shell. Declaration public SpecificAssetId SpecificAssetId { get; set; } Property Value Type Description SpecificAssetId | Improve this Doc View Source Statements Describes statements applicable to the entity by a set of submodel elements, typically with a qualified value. Declaration public List<ISubmodelElement> Statements { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement > | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverStatementsOrEmpty() Iterate over Statements, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverStatementsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < ISubmodelElement > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IEntity ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.EntityType.html": {
    "href": "api/AasCore.Aas3_0_RC02.EntityType.html",
    "title": "Enum EntityType",
    "keywords": "Enum EntityType Enumeration for denoting whether an entity is a self-managed entity or a co-managed entity. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum EntityType Fields Name Description CoManagedEntity For co-managed entities there is no separate AAS. Co-managed entities need to be part of a self-managed entity. SelfManagedEntity Self-Managed Entities have their own AAS but can be part of the bill of material of a composite self-managed entity."
  },
  "api/AasCore.Aas3_0_RC02.Environment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Environment.html",
    "title": "Class Environment",
    "keywords": "Class Environment Container for the sets of different identifiables. Inheritance System.Object Environment Implements IEnvironment IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Environment : IEnvironment, IClass Remarks w.r.t. file exchange: There is exactly one environment independent on how many files the contained elements are split. If the file is split then there shall be no element with the same identifier in two different files. Constructors | Improve this Doc View Source Environment(List<AssetAdministrationShell>, List<Submodel>, List<ConceptDescription>) Declaration public Environment(List<AssetAdministrationShell> assetAdministrationShells = null, List<Submodel> submodels = null, List<ConceptDescription> conceptDescriptions = null) Parameters Type Name Description System.Collections.Generic.List < AssetAdministrationShell > assetAdministrationShells System.Collections.Generic.List < Submodel > submodels System.Collections.Generic.List < ConceptDescription > conceptDescriptions Properties | Improve this Doc View Source AssetAdministrationShells Asset administration shell Declaration public List<AssetAdministrationShell> AssetAdministrationShells { get; set; } Property Value Type Description System.Collections.Generic.List < AssetAdministrationShell > | Improve this Doc View Source ConceptDescriptions Concept description Declaration public List<ConceptDescription> ConceptDescriptions { get; set; } Property Value Type Description System.Collections.Generic.List < ConceptDescription > | Improve this Doc View Source Submodels Submodel Declaration public List<Submodel> Submodels { get; set; } Property Value Type Description System.Collections.Generic.List < Submodel > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverAssetAdministrationShellsOrEmpty() Iterate over AssetAdministrationShells, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<AssetAdministrationShell> OverAssetAdministrationShellsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < AssetAdministrationShell > | Improve this Doc View Source OverConceptDescriptionsOrEmpty() Iterate over ConceptDescriptions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ConceptDescription> OverConceptDescriptionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < ConceptDescription > | Improve this Doc View Source OverSubmodelsOrEmpty() Iterate over Submodels, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Submodel> OverSubmodelsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Submodel > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IEnvironment IClass"
  },
  "api/AasCore.Aas3_0_RC02.EventPayload.html": {
    "href": "api/AasCore.Aas3_0_RC02.EventPayload.html",
    "title": "Class EventPayload",
    "keywords": "Class EventPayload Defines the necessary information of an event instance sent out or received. Inheritance System.Object EventPayload Implements IEventPayload IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class EventPayload : IEventPayload, IClass Constructors | Improve this Doc View Source EventPayload(Reference, Reference, String, Reference, Reference, String, Reference, String) Declaration public EventPayload(Reference source, Reference observableReference, string timeStamp, Reference sourceSemanticId = null, Reference observableSemanticId = null, string topic = null, Reference subjectId = null, string payload = null) Parameters Type Name Description Reference source Reference observableReference System.String timeStamp Reference sourceSemanticId Reference observableSemanticId System.String topic Reference subjectId System.String payload Properties | Improve this Doc View Source ObservableReference Reference to the referable, which defines the scope of the event. Declaration public Reference ObservableReference { get; set; } Property Value Type Description Reference Remarks Can be AssetAdministrationShell , Submodel or ISubmodelElement . | Improve this Doc View Source ObservableSemanticId SemanticId of the referable which defines the scope of the event, if available. Declaration public Reference ObservableSemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source Payload Event specific payload. Declaration public string Payload { get; set; } Property Value Type Description System.String | Improve this Doc View Source Source Reference to the source event element, including identification of AssetAdministrationShell , Submodel , ISubmodelElement 's. Declaration public Reference Source { get; set; } Property Value Type Description Reference | Improve this Doc View Source SourceSemanticId SemanticId of the source event element, if available Declaration public Reference SourceSemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SubjectId Subject, who/which initiated the creation. Declaration public Reference SubjectId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source TimeStamp Timestamp in UTC, when this event was triggered. Declaration public string TimeStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source Topic Information for the outer message infrastructure for scheduling the event to the respective communication channel. Declaration public string Topic { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IEventPayload IClass"
  },
  "api/AasCore.Aas3_0_RC02.Extension.html": {
    "href": "api/AasCore.Aas3_0_RC02.Extension.html",
    "title": "Class Extension",
    "keywords": "Class Extension Single extension of an element. Inheritance System.Object Extension Implements IExtension IHasSemantics IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Extension : IExtension, IHasSemantics, IClass Constructors | Improve this Doc View Source Extension(String, Reference, List<Reference>, Nullable<DataTypeDefXsd>, String, Reference) Declaration public Extension(string name, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, DataTypeDefXsd? valueType = null, string value = null, Reference refersTo = null) Parameters Type Name Description System.String name Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Nullable < DataTypeDefXsd > valueType System.String value Reference refersTo Properties | Improve this Doc View Source Name Name of the extension. Declaration public string Name { get; set; } Property Value Type Description System.String Remarks Constraints: Constraint AASd-077: The name of an extension within IHasExtensions needs to be unique. | Improve this Doc View Source RefersTo Reference to an element the extension refers to. Declaration public Reference RefersTo { get; set; } Property Value Type Description Reference | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Value of the extension Declaration public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueType Type of the value of the extension. Declaration public DataTypeDefXsd? ValueType { get; set; } Property Value Type Description System.Nullable < DataTypeDefXsd > Remarks Default: String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source ValueTypeOrDefault() Return the ValueType or the default value if it has not been set. Declaration public DataTypeDefXsd ValueTypeOrDefault() Returns Type Description DataTypeDefXsd Implements IExtension IHasSemantics IClass"
  },
  "api/AasCore.Aas3_0_RC02.File.html": {
    "href": "api/AasCore.Aas3_0_RC02.File.html",
    "title": "Class File",
    "keywords": "Class File A File is a data element that represents an address to a file (a locator). Inheritance System.Object File Implements IFile IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class File : IFile, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The value is an URI that can represent an absolute or relative path. Constructors | Improve this Doc View Source File(String, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, String) Declaration public File(string contentType, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, string value = null) Parameters Type Name Description System.String contentType System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.String value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source ContentType Content type of the content of the file. Declaration public string ContentType { get; set; } Property Value Type Description System.String Remarks The content type states which file extensions the file can have. | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Path and name of the referenced file (with file extension). Declaration public string Value { get; set; } Property Value Type Description System.String Remarks The path can be absolute or relative. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IFile IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.html": {
    "href": "api/AasCore.Aas3_0_RC02.html",
    "title": "Namespace AasCore.Aas3_0_RC02",
    "keywords": "Namespace AasCore.Aas3_0_RC02 Classes AdministrativeInformation Administrative meta-information for an element like version information. AnnotatedRelationshipElement An annotated relationship element is a relationship element that can be annotated with additional data elements. AssetAdministrationShell An asset administration shell. AssetInformation In AssetInformation identifying meta data of the asset that is represented by an AAS is defined. BasicEventElement A basic event element. Blob A Blob is a data element that represents a file that is contained with its source code in the value attribute. Capability A capability is the implementation-independent description of the potential of an asset to achieve a certain effect in the physical or virtual world. ConceptDescription The semantics of a property or other elements that may have a semantic description is defined by a concept description. Constants Provide constant values of the meta-model. Copying Allow for making shallow and deep copies of AAS model instances. DataSpecificationIec61360 Content of data specification template for concept descriptions for properties, values and value lists conformant to IEC 61360. DataSpecificationPhysicalUnit EmbeddedDataSpecification Embed the content of a data specification. Entity An entity is a submodel element that is used to model entities. Environment Container for the sets of different identifiables. EventPayload Defines the necessary information of an event instance sent out or received. Extension Single extension of an element. File A File is a data element that represents an address to a file (a locator). Jsonization Provide de/serialization of meta-model classes to/from JSON. Jsonization.Deserialize Deserialize instances of meta-model classes from JSON nodes. Jsonization.Exception Represent a critical error during the deserialization. Jsonization.Serialize Serialize instances of meta-model classes to JSON elements. Key A key is a reference to an element by its ID. LangString Strings with language tags MultiLanguageProperty A property is a data element that has a multi-language value. Operation An operation is a submodel element with input and output variables. OperationVariable The value of an operation variable is a submodel element that is used as input and/or output variable of an operation. Property A property is a data element that has a single value. Qualifier A qualifier is a type-value-pair that makes additional statements w.r.t. the value of the element. Range A range data element is a data element that defines a range with min and max. Reference Reference to either a model element of the same or another AAS or to an external entity. ReferenceElement A reference element is a data element that defines a logical reference to another element within the same or another AAS or a reference to an external object or entity. RelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). Reporting Provide reporting for de/serialization and verification. Reporting.Error Represent an error during the deserialization or the verification. Reporting.IndexSegment Reporting.NameSegment Reporting.Segment Capture a path segment of a value in a model. Resource Resource represents an address to a file (a locator). The value is an URI that can represent an absolute or relative path SpecificAssetId A specific asset ID describes a generic supplementary identifying attribute of the asset. Stringification Submodel A submodel defines a specific aspect of the asset represented by the AAS. SubmodelElementCollection A submodel element collection is a kind of struct, i.e. a a logical encapsulation of multiple named values. It has a fixed number of submodel elements. SubmodelElementList A submodel element list is an ordered list of submodel elements. ValueList A set of value reference pairs. ValueReferencePair A value reference pair within a value list. Each value has a global unique id defining its semantic. Verification Verify that the instances of the meta-model satisfy the invariants. Visitation Visitation.AbstractTransformer<T> Perform double-dispatch to transform recursively the instances into something else. Visitation.AbstractTransformerWithContext<TContext, T> Perform double-dispatch to transform recursively the instances into something else. Visitation.AbstractVisitor Perform double-dispatch to visit the concrete instances. Visitation.AbstractVisitorWithContext<TContext> Perform double-dispatch to visit the concrete instances with context. Visitation.VisitorThrough Just descend through the instances without any action. Xmlization Provide de/serialization of meta-model classes to/from XML. Xmlization.Deserialize Deserialize instances of meta-model classes from XML. Xmlization.Exception Represent a critical error during the deserialization. Xmlization.Serialize Serialize instances of meta-model classes to XML. Interfaces IAdministrativeInformation Administrative meta-information for an element like version information. IAnnotatedRelationshipElement An annotated relationship element is a relationship element that can be annotated with additional data elements. IAssetAdministrationShell An asset administration shell. IAssetInformation In AssetInformation identifying meta data of the asset that is represented by an AAS is defined. IBasicEventElement A basic event element. IBlob A Blob is a data element that represents a file that is contained with its source code in the value attribute. ICapability A capability is the implementation-independent description of the potential of an asset to achieve a certain effect in the physical or virtual world. IClass Represent a general class of an AAS model. IConceptDescription The semantics of a property or other elements that may have a semantic description is defined by a concept description. IDataElement A data element is a submodel element that is not further composed out of other submodel elements. IDataSpecificationContent Data specification content is part of a data specification template and defines which additional attributes shall be added to the element instance that references the data specification template and meta information about the template itself. IDataSpecificationIec61360 Content of data specification template for concept descriptions for properties, values and value lists conformant to IEC 61360. IDataSpecificationPhysicalUnit IEmbeddedDataSpecification Embed the content of a data specification. IEntity An entity is a submodel element that is used to model entities. IEnvironment Container for the sets of different identifiables. IEventElement An event element. IEventPayload Defines the necessary information of an event instance sent out or received. IExtension Single extension of an element. IFile A File is a data element that represents an address to a file (a locator). IHasDataSpecification Element that can be extended by using data specification templates. IHasExtensions Element that can be extended by proprietary extensions. IHasKind An element with a kind is an element that can either represent a template or an instance. IHasSemantics Element that can have a semantic definition plus some supplemental semantic definitions. IIdentifiable An element that has a globally unique identifier. IKey A key is a reference to an element by its ID. ILangString Strings with language tags IMultiLanguageProperty A property is a data element that has a multi-language value. IOperation An operation is a submodel element with input and output variables. IOperationVariable The value of an operation variable is a submodel element that is used as input and/or output variable of an operation. IProperty A property is a data element that has a single value. IQualifiable The value of a qualifiable element may be further qualified by one or more qualifiers. IQualifier A qualifier is a type-value-pair that makes additional statements w.r.t. the value of the element. IRange A range data element is a data element that defines a range with min and max. IReferable An element that is referable by its IdShort . IReference Reference to either a model element of the same or another AAS or to an external entity. IReferenceElement A reference element is a data element that defines a logical reference to another element within the same or another AAS or a reference to an external object or entity. IRelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). IResource Resource represents an address to a file (a locator). The value is an URI that can represent an absolute or relative path ISpecificAssetId A specific asset ID describes a generic supplementary identifying attribute of the asset. ISubmodel A submodel defines a specific aspect of the asset represented by the AAS. ISubmodelElement A submodel element is an element suitable for the description and differentiation of assets. ISubmodelElementCollection A submodel element collection is a kind of struct, i.e. a a logical encapsulation of multiple named values. It has a fixed number of submodel elements. ISubmodelElementList A submodel element list is an ordered list of submodel elements. IValueList A set of value reference pairs. IValueReferencePair A value reference pair within a value list. Each value has a global unique id defining its semantic. Visitation.ITransformer<T> Define the interface for a transformer which transforms recursively the instances into something else. Visitation.ITransformerWithContext<TContext, T> Define the interface for a transformer which recursively transforms the instances into something else while the context is passed along. Visitation.IVisitor Define the interface for a visitor which visits the instances of the model. Visitation.IVisitorWithContext<TContext> Define the interface for a visitor which visits the instances of the model. Enums AasSubmodelElements Enumeration of all possible elements of a SubmodelElementList . AssetKind Enumeration for denoting whether an asset is a type asset or an instance asset. DataTypeDefXsd Enumeration listing all xsd anySimpleTypes DataTypeIec61360 Direction Direction EntityType Enumeration for denoting whether an entity is a self-managed entity or a co-managed entity. KeyTypes Enumeration of different key value types within a key. LevelType ModelingKind Enumeration for denoting whether an element is a template or an instance. QualifierKind Enumeration for kinds of qualifiers. ReferenceTypes ReferenceTypes StateOfEvent State of an event"
  },
  "api/AasCore.Aas3_0_RC02.IAdministrativeInformation.html": {
    "href": "api/AasCore.Aas3_0_RC02.IAdministrativeInformation.html",
    "title": "Interface IAdministrativeInformation",
    "keywords": "Interface IAdministrativeInformation Administrative meta-information for an element like version information. Inherited Members IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IAdministrativeInformation : IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-005: If Version is not specified then also Revision shall be unspecified. This means, a revision requires a version. If there is no version there is no revision neither. Revision is optional. Properties | Improve this Doc View Source Revision Revision of the element. Declaration string Revision { get; set; } Property Value Type Description System.String | Improve this Doc View Source Version Version of the element. Declaration string Version { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IAnnotatedRelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IAnnotatedRelationshipElement.html",
    "title": "Interface IAnnotatedRelationshipElement",
    "keywords": "Interface IAnnotatedRelationshipElement An annotated relationship element is a relationship element that can be annotated with additional data elements. Inherited Members IRelationshipElement.First IRelationshipElement.Second IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IAnnotatedRelationshipElement : IRelationshipElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source Annotations A data element that represents an annotation that holds for the relationship between the two elements Declaration List<IDataElement> Annotations { get; set; } Property Value Type Description System.Collections.Generic.List < IDataElement >"
  },
  "api/AasCore.Aas3_0_RC02.IAssetAdministrationShell.html": {
    "href": "api/AasCore.Aas3_0_RC02.IAssetAdministrationShell.html",
    "title": "Interface IAssetAdministrationShell",
    "keywords": "Interface IAssetAdministrationShell An asset administration shell. Inherited Members IIdentifiable.Administration IIdentifiable.Id IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IAssetAdministrationShell : IIdentifiable, IReferable, IHasExtensions, IHasDataSpecification, IClass Properties | Improve this Doc View Source AssetInformation Meta-information about the asset the AAS is representing. Declaration AssetInformation AssetInformation { get; set; } Property Value Type Description AssetInformation | Improve this Doc View Source DerivedFrom The reference to the AAS the AAS was derived from. Declaration Reference DerivedFrom { get; set; } Property Value Type Description Reference | Improve this Doc View Source Submodels References to submodels of the AAS. Declaration List<Reference> Submodels { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks A submodel is a description of an aspect of the asset the AAS is representing. The asset of an AAS is typically described by one or more submodels. Temporarily no submodel might be assigned to the AAS."
  },
  "api/AasCore.Aas3_0_RC02.IAssetInformation.html": {
    "href": "api/AasCore.Aas3_0_RC02.IAssetInformation.html",
    "title": "Interface IAssetInformation",
    "keywords": "Interface IAssetInformation In AssetInformation identifying meta data of the asset that is represented by an AAS is defined. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IAssetInformation : IClass Remarks The asset may either represent an asset type or an asset instance. The asset has a globally unique identifier plus – if needed – additional domain specific (proprietary) identifiers. However, to support the corner case of very first phase of lifecycle where a stabilised/constant_set global asset identifier does not already exist, the corresponding attribute GlobalAssetId is optional. Constraints: Constraint AASd-116: globalAssetId (case-insensitive) is a reserved key. If used as value for Name then Value shall be identical to GlobalAssetId . Properties | Improve this Doc View Source AssetKind Denotes whether the Asset is of kind Type or Instance . Declaration AssetKind AssetKind { get; set; } Property Value Type Description AssetKind | Improve this Doc View Source DefaultThumbnail Thumbnail of the asset represented by the Asset Administration Shell. Declaration Resource DefaultThumbnail { get; set; } Property Value Type Description Resource Remarks Used as default. | Improve this Doc View Source GlobalAssetId Global identifier of the asset the AAS is representing. Declaration Reference GlobalAssetId { get; set; } Property Value Type Description Reference Remarks This attribute is required as soon as the AAS is exchanged via partners in the life cycle of the asset. In a first phase of the life cycle the asset might not yet have a global ID but already an internal identifier. The internal identifier would be modelled via SpecificAssetIds . This is a global reference. | Improve this Doc View Source SpecificAssetIds Additional domain-specific, typically proprietary identifier for the asset like e.g., serial number etc. Declaration List<SpecificAssetId> SpecificAssetIds { get; set; } Property Value Type Description System.Collections.Generic.List < SpecificAssetId >"
  },
  "api/AasCore.Aas3_0_RC02.IBasicEventElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IBasicEventElement.html",
    "title": "Interface IBasicEventElement",
    "keywords": "Interface IBasicEventElement A basic event element. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IBasicEventElement : IEventElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source Direction Direction of event. Declaration Direction Direction { get; set; } Property Value Type Description Direction Remarks Can be { Input, Output } . | Improve this Doc View Source LastUpdate Timestamp in UTC, when the last event was received (input direction) or sent (output direction). Declaration string LastUpdate { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxInterval For input direction: not applicable. Declaration string MaxInterval { get; set; } Property Value Type Description System.String Remarks For output direction: maximum interval in time, the respective Referable shall send an update of the status of the event, even if no other trigger condition for the event was not met. Might be not specified, that is, there is no maximum interval | Improve this Doc View Source MessageBroker Information, which outer message infrastructure shall handle messages for the IEventElement . Refers to a Submodel , SubmodelElementList , SubmodelElementCollection or Entity , which contains IDataElement 's describing the proprietary specification for the message broker. Declaration Reference MessageBroker { get; set; } Property Value Type Description Reference Remarks For different message infrastructure, e.g., OPC UA or MQTT or AMQP, this proprietary specification could be standardized by having respective Submodels. | Improve this Doc View Source MessageTopic Information for the outer message infrastructure for scheduling the event to the respective communication channel. Declaration string MessageTopic { get; set; } Property Value Type Description System.String | Improve this Doc View Source MinInterval For input direction, reports on the maximum frequency, the software entity behind the respective Referable can handle input events. Declaration string MinInterval { get; set; } Property Value Type Description System.String Remarks For output events, specifies the maximum frequency of outputting this event to an outer infrastructure. Might be not specified, that is, there is no minimum interval. | Improve this Doc View Source Observed Reference to the IReferable , which defines the scope of the event. Can be AssetAdministrationShell , Submodel , or ISubmodelElement . Declaration Reference Observed { get; set; } Property Value Type Description Reference Remarks Reference to a referable, e.g., a data element or a submodel, that is being observed. | Improve this Doc View Source State State of event. Declaration StateOfEvent State { get; set; } Property Value Type Description StateOfEvent Remarks Can be { On, Off } ."
  },
  "api/AasCore.Aas3_0_RC02.IBlob.html": {
    "href": "api/AasCore.Aas3_0_RC02.IBlob.html",
    "title": "Interface IBlob",
    "keywords": "Interface IBlob A Blob is a data element that represents a file that is contained with its source code in the value attribute. Inherited Members IDataElement.CategoryOrDefault() IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IBlob : IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source ContentType Content type of the content of the Blob . Declaration string ContentType { get; set; } Property Value Type Description System.String Remarks The content type (MIME type) states which file extensions the file can have. Valid values are content types like e.g. application/json , application/xls , image/jpg . The allowed values are defined as in RFC2046. | Improve this Doc View Source Value The value of the Blob instance of a blob data element. Declaration byte[] Value { get; set; } Property Value Type Description System.Byte [] Remarks In contrast to the file property the file content is stored directly as value in the Blob data element."
  },
  "api/AasCore.Aas3_0_RC02.ICapability.html": {
    "href": "api/AasCore.Aas3_0_RC02.ICapability.html",
    "title": "Interface ICapability",
    "keywords": "Interface ICapability A capability is the implementation-independent description of the potential of an asset to achieve a certain effect in the physical or virtual world. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ICapability : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The SemanticId of a capability is typically an ontology. Thus, reasoning on capabilities is enabled."
  },
  "api/AasCore.Aas3_0_RC02.IClass.html": {
    "href": "api/AasCore.Aas3_0_RC02.IClass.html",
    "title": "Interface IClass",
    "keywords": "Interface IClass Represent a general class of an AAS model. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IClass Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T"
  },
  "api/AasCore.Aas3_0_RC02.IConceptDescription.html": {
    "href": "api/AasCore.Aas3_0_RC02.IConceptDescription.html",
    "title": "Interface IConceptDescription",
    "keywords": "Interface IConceptDescription The semantics of a property or other elements that may have a semantic description is defined by a concept description. Inherited Members IIdentifiable.Administration IIdentifiable.Id IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IConceptDescription : IIdentifiable, IReferable, IHasExtensions, IHasDataSpecification, IClass Remarks The description of the concept should follow a standardized schema (realized as data specification template). Constraints: Constraint AASd-051: A ConceptDescription shall have one of the following categories VALUE , PROPERTY , REFERENCE , DOCUMENT , CAPABILITY , RELATIONSHIP , COLLECTION , FUNCTION , EVENT , ENTITY , APPLICATION_CLASS , QUALIFIER , VIEW . Default: PROPERTY . Constraint AASc-004: For a ConceptDescription with Category PROPERTY or VALUE using data specification IEC61360, the DataType is mandatory and shall be one of: DATE , STRING , STRING_TRANSLATABLE , INTEGER_MEASURE , INTEGER_COUNT , INTEGER_CURRENCY , REAL_MEASURE , REAL_COUNT , REAL_CURRENCY , BOOLEAN , RATIONAL , RATIONAL_MEASURE , TIME , TIMESTAMP . Constraint AASc-005: For a ConceptDescription with Category REFERENCE using data specification IEC61360, the DataType is mandatory and shall be one of: STRING , IRI , IRDI . Constraint AASc-006: For a ConceptDescription with Category DOCUMENT using data specification IEC61360, the DataType is mandatory and shall be defined. Constraint AASc-007: For a ConceptDescription with Category QUALIFIER_TYPE using data specification IEC61360, the DataType is mandatory and shall be Constraint AASc-008: For all ConceptDescription 's with a category except Category VALUE using data specification IEC61360, Definition is mandatory and shall be defined at least in English. Constraint AASc-003: For a ConceptDescription with Category VALUE using data specification IEC61360, the Value shall be set. Properties | Improve this Doc View Source IsCaseOf Reference to an external definition the concept is compatible to or was derived from. Declaration List<Reference> IsCaseOf { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Compare to is-case-of relationship in ISO 13584-32 & IEC EN 61360\" Methods | Improve this Doc View Source CategoryOrDefault() Declaration string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source OverIsCaseOfOrEmpty() Iterate over IsCaseOf, if set, and otherwise return an empty enumerable. Declaration IEnumerable<Reference> OverIsCaseOfOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference >"
  },
  "api/AasCore.Aas3_0_RC02.IDataElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IDataElement.html",
    "title": "Interface IDataElement",
    "keywords": "Interface IDataElement A data element is a submodel element that is not further composed out of other submodel elements. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IDataElement : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks A data element is a submodel element that has a value. The type of value differs for different subtypes of data elements. Constraints: Constraint AASd-090: For data elements shall be one of the following values: CONSTANT , PARAMETER or VARIABLE . Default: VARIABLE Methods | Improve this Doc View Source CategoryOrDefault() Declaration string CategoryOrDefault() Returns Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IDataSpecificationContent.html": {
    "href": "api/AasCore.Aas3_0_RC02.IDataSpecificationContent.html",
    "title": "Interface IDataSpecificationContent",
    "keywords": "Interface IDataSpecificationContent Data specification content is part of a data specification template and defines which additional attributes shall be added to the element instance that references the data specification template and meta information about the template itself. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IDataSpecificationContent : IClass"
  },
  "api/AasCore.Aas3_0_RC02.IDataSpecificationIec61360.html": {
    "href": "api/AasCore.Aas3_0_RC02.IDataSpecificationIec61360.html",
    "title": "Interface IDataSpecificationIec61360",
    "keywords": "Interface IDataSpecificationIec61360 Content of data specification template for concept descriptions for properties, values and value lists conformant to IEC 61360. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IDataSpecificationIec61360 : IDataSpecificationContent, IClass Remarks IEC61360 requires also a globally unique identifier for a concept description. This ID is not part of the data specification template. Instead the Id as inherited via IIdentifiable is used. Same holds for administrative information like the version and revision. IdShort and ShortName are very similar. However, in this case the decision was to add ShortName explicitly to the data specification. Same holds for DisplayName and PreferredName . Same holds for Description and Definition . Constraints: Constraint AASc-010: If Value is not empty then ValueList shall be empty and vice versa. Constraint AASc-009: If DataType one of: IntegerMeasure , RealMeasure , RationalMeasure , IntegerCurrency , RealCurrency , then Unit or UnitId shall be defined. Properties | Improve this Doc View Source DataType Data Type Declaration DataTypeIec61360? DataType { get; set; } Property Value Type Description System.Nullable < DataTypeIec61360 > | Improve this Doc View Source Definition Definition in different languages Declaration List<LangString> Definition { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source LevelType Set of levels. Declaration LevelType? LevelType { get; set; } Property Value Type Description System.Nullable < LevelType > | Improve this Doc View Source PreferredName Preferred name Declaration List<LangString> PreferredName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks Constraints: Constraint AASc-002: PreferredName shall be provided at least in English. | Improve this Doc View Source ShortName Short name Declaration List<LangString> ShortName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source SourceOfDefinition Source of definition Declaration string SourceOfDefinition { get; set; } Property Value Type Description System.String | Improve this Doc View Source Symbol Symbol Declaration string Symbol { get; set; } Property Value Type Description System.String | Improve this Doc View Source Unit Unit Declaration string Unit { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitId Unique unit id Declaration Reference UnitId { get; set; } Property Value Type Description Reference Remarks Unit and UnitId need to be consistent if both attributes are set It is recommended to use a global reference. Although the UnitId is a global reference there might exist a ConceptDescription with data specification DataSpecificationPhysicalUnit with the same ID. | Improve this Doc View Source Value Value Declaration string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueFormat Value Format Declaration string ValueFormat { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueList List of allowed values Declaration ValueList ValueList { get; set; } Property Value Type Description ValueList"
  },
  "api/AasCore.Aas3_0_RC02.IDataSpecificationPhysicalUnit.html": {
    "href": "api/AasCore.Aas3_0_RC02.IDataSpecificationPhysicalUnit.html",
    "title": "Interface IDataSpecificationPhysicalUnit",
    "keywords": "Interface IDataSpecificationPhysicalUnit Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IDataSpecificationPhysicalUnit : IDataSpecificationContent, IClass Properties | Improve this Doc View Source ConversionFactor Conversion factor Declaration string ConversionFactor { get; set; } Property Value Type Description System.String | Improve this Doc View Source Definition Definition in different languages Declaration List<LangString> Definition { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source DinNotation Notation of physical unit conformant to DIN Declaration string DinNotation { get; set; } Property Value Type Description System.String | Improve this Doc View Source EceCode Code of physical unit conformant to ECE Declaration string EceCode { get; set; } Property Value Type Description System.String | Improve this Doc View Source EceName Name of physical unit conformant to ECE Declaration string EceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source NistName Name of NIST physical unit Declaration string NistName { get; set; } Property Value Type Description System.String | Improve this Doc View Source RegistrationAuthorityId Registration authority ID Declaration string RegistrationAuthorityId { get; set; } Property Value Type Description System.String | Improve this Doc View Source SiName Name of SI physical unit Declaration string SiName { get; set; } Property Value Type Description System.String | Improve this Doc View Source SiNotation Notation of SI physical unit Declaration string SiNotation { get; set; } Property Value Type Description System.String | Improve this Doc View Source SourceOfDefinition Source of definition Declaration string SourceOfDefinition { get; set; } Property Value Type Description System.String | Improve this Doc View Source Supplier Supplier Declaration string Supplier { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitName Name of the physical unit Declaration string UnitName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitSymbol Symbol for the physical unit Declaration string UnitSymbol { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IEmbeddedDataSpecification.html": {
    "href": "api/AasCore.Aas3_0_RC02.IEmbeddedDataSpecification.html",
    "title": "Interface IEmbeddedDataSpecification",
    "keywords": "Interface IEmbeddedDataSpecification Embed the content of a data specification. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IEmbeddedDataSpecification : IClass Properties | Improve this Doc View Source DataSpecification Reference to the data specification Declaration Reference DataSpecification { get; set; } Property Value Type Description Reference | Improve this Doc View Source DataSpecificationContent Actual content of the data specification Declaration IDataSpecificationContent DataSpecificationContent { get; set; } Property Value Type Description IDataSpecificationContent"
  },
  "api/AasCore.Aas3_0_RC02.IEntity.html": {
    "href": "api/AasCore.Aas3_0_RC02.IEntity.html",
    "title": "Interface IEntity",
    "keywords": "Interface IEntity An entity is a submodel element that is used to model entities. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IEntity : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-014: Either the attribute GlobalAssetId or SpecificAssetId of an Entity must be set if EntityType is set to SelfManagedEntity . They are not existing otherwise. Properties | Improve this Doc View Source EntityType Describes whether the entity is a co-managed entity or a self-managed entity. Declaration EntityType EntityType { get; set; } Property Value Type Description EntityType | Improve this Doc View Source GlobalAssetId Global identifier of the asset the entity is representing. Declaration Reference GlobalAssetId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source SpecificAssetId Reference to a specific asset ID representing a supplementary identifier of the asset represented by the Asset Administration Shell. Declaration SpecificAssetId SpecificAssetId { get; set; } Property Value Type Description SpecificAssetId | Improve this Doc View Source Statements Describes statements applicable to the entity by a set of submodel elements, typically with a qualified value. Declaration List<ISubmodelElement> Statements { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement >"
  },
  "api/AasCore.Aas3_0_RC02.IEnvironment.html": {
    "href": "api/AasCore.Aas3_0_RC02.IEnvironment.html",
    "title": "Interface IEnvironment",
    "keywords": "Interface IEnvironment Container for the sets of different identifiables. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IEnvironment : IClass Remarks w.r.t. file exchange: There is exactly one environment independent on how many files the contained elements are split. If the file is split then there shall be no element with the same identifier in two different files. Properties | Improve this Doc View Source AssetAdministrationShells Asset administration shell Declaration List<AssetAdministrationShell> AssetAdministrationShells { get; set; } Property Value Type Description System.Collections.Generic.List < AssetAdministrationShell > | Improve this Doc View Source ConceptDescriptions Concept description Declaration List<ConceptDescription> ConceptDescriptions { get; set; } Property Value Type Description System.Collections.Generic.List < ConceptDescription > | Improve this Doc View Source Submodels Submodel Declaration List<Submodel> Submodels { get; set; } Property Value Type Description System.Collections.Generic.List < Submodel >"
  },
  "api/AasCore.Aas3_0_RC02.IEventElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IEventElement.html",
    "title": "Interface IEventElement",
    "keywords": "Interface IEventElement An event element. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IEventElement : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass"
  },
  "api/AasCore.Aas3_0_RC02.IEventPayload.html": {
    "href": "api/AasCore.Aas3_0_RC02.IEventPayload.html",
    "title": "Interface IEventPayload",
    "keywords": "Interface IEventPayload Defines the necessary information of an event instance sent out or received. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IEventPayload : IClass Properties | Improve this Doc View Source ObservableReference Reference to the referable, which defines the scope of the event. Declaration Reference ObservableReference { get; set; } Property Value Type Description Reference Remarks Can be AssetAdministrationShell , Submodel or ISubmodelElement . | Improve this Doc View Source ObservableSemanticId SemanticId of the referable which defines the scope of the event, if available. Declaration Reference ObservableSemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source Payload Event specific payload. Declaration string Payload { get; set; } Property Value Type Description System.String | Improve this Doc View Source Source Reference to the source event element, including identification of AssetAdministrationShell , Submodel , ISubmodelElement 's. Declaration Reference Source { get; set; } Property Value Type Description Reference | Improve this Doc View Source SourceSemanticId SemanticId of the source event element, if available Declaration Reference SourceSemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SubjectId Subject, who/which initiated the creation. Declaration Reference SubjectId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source TimeStamp Timestamp in UTC, when this event was triggered. Declaration string TimeStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source Topic Information for the outer message infrastructure for scheduling the event to the respective communication channel. Declaration string Topic { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IExtension.html": {
    "href": "api/AasCore.Aas3_0_RC02.IExtension.html",
    "title": "Interface IExtension",
    "keywords": "Interface IExtension Single extension of an element. Inherited Members IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IExtension : IHasSemantics, IClass Properties | Improve this Doc View Source Name Name of the extension. Declaration string Name { get; set; } Property Value Type Description System.String Remarks Constraints: Constraint AASd-077: The name of an extension within IHasExtensions needs to be unique. | Improve this Doc View Source RefersTo Reference to an element the extension refers to. Declaration Reference RefersTo { get; set; } Property Value Type Description Reference | Improve this Doc View Source Value Value of the extension Declaration string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueType Type of the value of the extension. Declaration DataTypeDefXsd? ValueType { get; set; } Property Value Type Description System.Nullable < DataTypeDefXsd > Remarks Default: String Methods | Improve this Doc View Source ValueTypeOrDefault() Declaration DataTypeDefXsd ValueTypeOrDefault() Returns Type Description DataTypeDefXsd"
  },
  "api/AasCore.Aas3_0_RC02.IFile.html": {
    "href": "api/AasCore.Aas3_0_RC02.IFile.html",
    "title": "Interface IFile",
    "keywords": "Interface IFile A File is a data element that represents an address to a file (a locator). Inherited Members IDataElement.CategoryOrDefault() IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IFile : IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The value is an URI that can represent an absolute or relative path. Properties | Improve this Doc View Source ContentType Content type of the content of the file. Declaration string ContentType { get; set; } Property Value Type Description System.String Remarks The content type states which file extensions the file can have. | Improve this Doc View Source Value Path and name of the referenced file (with file extension). Declaration string Value { get; set; } Property Value Type Description System.String Remarks The path can be absolute or relative."
  },
  "api/AasCore.Aas3_0_RC02.IHasDataSpecification.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasDataSpecification.html",
    "title": "Interface IHasDataSpecification",
    "keywords": "Interface IHasDataSpecification Element that can be extended by using data specification templates. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasDataSpecification : IClass Remarks A data specification template defines a named set of additional attributes an element may or shall have. The data specifications used are explicitly specified with their global ID. Properties | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification >"
  },
  "api/AasCore.Aas3_0_RC02.IHasExtensions.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasExtensions.html",
    "title": "Interface IHasExtensions",
    "keywords": "Interface IHasExtensions Element that can be extended by proprietary extensions. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasExtensions : IClass Remarks Extensions are proprietary, i.e. they do not support global interoperability. Properties | Improve this Doc View Source Extensions An extension of the element. Declaration List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension >"
  },
  "api/AasCore.Aas3_0_RC02.IHasKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasKind.html",
    "title": "Interface IHasKind",
    "keywords": "Interface IHasKind An element with a kind is an element that can either represent a template or an instance. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasKind : IClass Remarks Default for an element is that it is representing an instance. Properties | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance Methods | Improve this Doc View Source KindOrDefault() Declaration ModelingKind KindOrDefault() Returns Type Description ModelingKind"
  },
  "api/AasCore.Aas3_0_RC02.IHasSemantics.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasSemantics.html",
    "title": "Interface IHasSemantics",
    "keywords": "Interface IHasSemantics Element that can have a semantic definition plus some supplemental semantic definitions. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasSemantics : IClass Remarks Constraints: Constraint AASd-118: If there are ID SupplementalSemanticIds defined then there shall be also a main semantic ID SemanticId . Properties | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference."
  },
  "api/AasCore.Aas3_0_RC02.IIdentifiable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IIdentifiable.html",
    "title": "Interface IIdentifiable",
    "keywords": "Interface IIdentifiable An element that has a globally unique identifier. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IIdentifiable : IReferable, IHasExtensions, IClass Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source Id The globally unique identification of the element. Declaration string Id { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IKey.html": {
    "href": "api/AasCore.Aas3_0_RC02.IKey.html",
    "title": "Interface IKey",
    "keywords": "Interface IKey A key is a reference to an element by its ID. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IKey : IClass Properties | Improve this Doc View Source Type Denotes which kind of entity is referenced. Declaration KeyTypes Type { get; set; } Property Value Type Description KeyTypes Remarks In case Type = FragmentReference the key represents a bookmark or a similar local identifier within its parent element as specified by the key that precedes this key. In all other cases the key references a model element of the same or of another AAS. The name of the model element is explicitly listed. | Improve this Doc View Source Value The key value, for example an IRDI or an URI Declaration string Value { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.ILangString.html": {
    "href": "api/AasCore.Aas3_0_RC02.ILangString.html",
    "title": "Interface ILangString",
    "keywords": "Interface ILangString Strings with language tags Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ILangString : IClass Properties | Improve this Doc View Source Language Language tag conforming to BCP 47 Declaration string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Text in the Language Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IMultiLanguageProperty.html": {
    "href": "api/AasCore.Aas3_0_RC02.IMultiLanguageProperty.html",
    "title": "Interface IMultiLanguageProperty",
    "keywords": "Interface IMultiLanguageProperty A property is a data element that has a multi-language value. Inherited Members IDataElement.CategoryOrDefault() IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IMultiLanguageProperty : IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-012: If both the Value and the ValueId are present then for each string in a specific language the meaning must be the same as specified in ValueId . Properties | Improve this Doc View Source Value The value of the property instance. Declaration List<LangString> Value { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference."
  },
  "api/AasCore.Aas3_0_RC02.IOperation.html": {
    "href": "api/AasCore.Aas3_0_RC02.IOperation.html",
    "title": "Interface IOperation",
    "keywords": "Interface IOperation An operation is a submodel element with input and output variables. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IOperation : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source InoutputVariables Parameter that is input and output of the operation. Declaration List<OperationVariable> InoutputVariables { get; set; } Property Value Type Description System.Collections.Generic.List < OperationVariable > | Improve this Doc View Source InputVariables Input parameter of the operation. Declaration List<OperationVariable> InputVariables { get; set; } Property Value Type Description System.Collections.Generic.List < OperationVariable > | Improve this Doc View Source OutputVariables Output parameter of the operation. Declaration List<OperationVariable> OutputVariables { get; set; } Property Value Type Description System.Collections.Generic.List < OperationVariable >"
  },
  "api/AasCore.Aas3_0_RC02.IOperationVariable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IOperationVariable.html",
    "title": "Interface IOperationVariable",
    "keywords": "Interface IOperationVariable The value of an operation variable is a submodel element that is used as input and/or output variable of an operation. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IOperationVariable : IClass Properties | Improve this Doc View Source Value Describes an argument or result of an operation via a submodel element Declaration ISubmodelElement Value { get; set; } Property Value Type Description ISubmodelElement"
  },
  "api/AasCore.Aas3_0_RC02.IProperty.html": {
    "href": "api/AasCore.Aas3_0_RC02.IProperty.html",
    "title": "Interface IProperty",
    "keywords": "Interface IProperty A property is a data element that has a single value. Inherited Members IDataElement.CategoryOrDefault() IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IProperty : IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-007: If both, the Value and the ValueId are present then the value of Value needs to be identical to the value of the referenced coded value in ValueId . Properties | Improve this Doc View Source Value The value of the property instance. Declaration string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the value Declaration DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd"
  },
  "api/AasCore.Aas3_0_RC02.IQualifiable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IQualifiable.html",
    "title": "Interface IQualifiable",
    "keywords": "Interface IQualifiable The value of a qualifiable element may be further qualified by one or more qualifiers. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IQualifiable : IClass Remarks Constraints: Constraint AASd-119: If any Kind value of Qualifiers is equal to TemplateQualifier and the qualified element inherits from IHasKind then the qualified element shall be of kind Template ( Kind = Template ). Properties | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type ."
  },
  "api/AasCore.Aas3_0_RC02.IQualifier.html": {
    "href": "api/AasCore.Aas3_0_RC02.IQualifier.html",
    "title": "Interface IQualifier",
    "keywords": "Interface IQualifier A qualifier is a type-value-pair that makes additional statements w.r.t. the value of the element. Inherited Members IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IQualifier : IHasSemantics, IClass Remarks Constraints: Constraint AASd-006: If both the Value and the ValueId of a Qualifier are present then the Value needs to be identical to the value of the referenced coded value in ValueId . Constraint AASd-020: The value of Value shall be consistent to the data type as defined in ValueType . Properties | Improve this Doc View Source Kind The qualifier kind describes the kind of the qualifier that is applied to the element. Declaration QualifierKind? Kind { get; set; } Property Value Type Description System.Nullable < QualifierKind > Remarks Default: ConceptQualifier | Improve this Doc View Source Type The qualifier type describes the type of the qualifier that is applied to the element. Declaration string Type { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The qualifier value is the value of the qualifier. Declaration string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the qualifier value. Declaration DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source KindOrDefault() Declaration QualifierKind KindOrDefault() Returns Type Description QualifierKind"
  },
  "api/AasCore.Aas3_0_RC02.IRange.html": {
    "href": "api/AasCore.Aas3_0_RC02.IRange.html",
    "title": "Interface IRange",
    "keywords": "Interface IRange A range data element is a data element that defines a range with min and max. Inherited Members IDataElement.CategoryOrDefault() IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IRange : IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source Max The maximum value of the range. Declaration string Max { get; set; } Property Value Type Description System.String Remarks If the max value is missing, then the value is assumed to be positive infinite. | Improve this Doc View Source Min The minimum value of the range. Declaration string Min { get; set; } Property Value Type Description System.String Remarks If the min value is missing, then the value is assumed to be negative infinite. | Improve this Doc View Source ValueType Data type of the min und max Declaration DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd"
  },
  "api/AasCore.Aas3_0_RC02.IReferable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IReferable.html",
    "title": "Interface IReferable",
    "keywords": "Interface IReferable An element that is referable by its IdShort . Inherited Members IHasExtensions.Extensions IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IReferable : IHasExtensions, IClass Remarks This ID is not globally unique. This ID is unique within the name space of the element. Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English."
  },
  "api/AasCore.Aas3_0_RC02.IReference.html": {
    "href": "api/AasCore.Aas3_0_RC02.IReference.html",
    "title": "Interface IReference",
    "keywords": "Interface IReference Reference to either a model element of the same or another AAS or to an external entity. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IReference : IClass Remarks A reference is an ordered list of keys. A model reference is an ordered list of keys, each key referencing an element. The complete list of keys may for example be concatenated to a path that then gives unique access to an element. A global reference is a reference to an external entity. Constraints: Constraint AASd-121: For Reference 's the Type of the first key of Keys shall be one of GloballyIdentifiables . Constraint AASd-122: For global references, i.e. Reference 's with Type = GlobalReference , the type of the first key of Keys shall be one of GenericGloballyIdentifiables . Constraint AASd-123: For model references, i.e. Reference 's with Type = ModelReference , the type of the first key of Keys shall be one of AasIdentifiables . Constraint AASd-124: For global references, i.e. Reference 's with Type = GlobalReference , the last key of Keys shall be either one of GenericGloballyIdentifiables or one of GenericFragmentKeys . Constraint AASd-125: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys the type of the keys following the first key of Keys shall be one of FragmentKeys . Constraint AASd-125 ensures that the shortest path is used. Constraint AASd-126: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys the type of the last key in the reference key chain may be one of GenericFragmentKeys or no key at all shall have a value out of GenericFragmentKeys . Constraint AASd-127: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys a key with Type FragmentReference shall be preceded by a key with Type File or Blob . All other AAS fragments, i.e. type values out of AasSubmodelElementsAsKeys , do not support fragments. Which kind of fragments are supported depends on the content type and the specification of allowed fragment identifiers for the corresponding resource being referenced via the reference. Constraint AASd-128: For model references, i.e. Reference 's with Type = ModelReference , the Value of a Key preceded by a Key with Type = SubmodelElementList is an integer number denoting the position in the array of the submodel element list. Properties | Improve this Doc View Source Keys Unique references in their name space. Declaration List<Key> Keys { get; set; } Property Value Type Description System.Collections.Generic.List < Key > | Improve this Doc View Source ReferredSemanticId SemanticId of the referenced model element ( Type = ModelReference ). Declaration Reference ReferredSemanticId { get; set; } Property Value Type Description Reference Remarks For global references there typically is no semantic ID. It is recommended to use a global reference. | Improve this Doc View Source Type Type of the reference. Declaration ReferenceTypes Type { get; set; } Property Value Type Description ReferenceTypes Remarks Denotes, whether reference is a global reference or a model reference."
  },
  "api/AasCore.Aas3_0_RC02.IReferenceElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IReferenceElement.html",
    "title": "Interface IReferenceElement",
    "keywords": "Interface IReferenceElement A reference element is a data element that defines a logical reference to another element within the same or another AAS or a reference to an external object or entity. Inherited Members IDataElement.CategoryOrDefault() IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IReferenceElement : IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source Value Global reference to an external object or entity or a logical reference to another element within the same or another AAS (i.e. a model reference to a Referable). Declaration Reference Value { get; set; } Property Value Type Description Reference"
  },
  "api/AasCore.Aas3_0_RC02.IRelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IRelationshipElement.html",
    "title": "Interface IRelationshipElement",
    "keywords": "Interface IRelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IRelationshipElement : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source First Reference to the first element in the relationship taking the role of the subject. Declaration Reference First { get; set; } Property Value Type Description Reference | Improve this Doc View Source Second Reference to the second element in the relationship taking the role of the object. Declaration Reference Second { get; set; } Property Value Type Description Reference"
  },
  "api/AasCore.Aas3_0_RC02.IResource.html": {
    "href": "api/AasCore.Aas3_0_RC02.IResource.html",
    "title": "Interface IResource",
    "keywords": "Interface IResource Resource represents an address to a file (a locator). The value is an URI that can represent an absolute or relative path Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IResource : IClass Properties | Improve this Doc View Source ContentType Content type of the content of the file. Declaration string ContentType { get; set; } Property Value Type Description System.String Remarks The content type states which file extensions the file can have. | Improve this Doc View Source Path Path and name of the resource (with file extension). Declaration string Path { get; set; } Property Value Type Description System.String Remarks The path can be absolute or relative."
  },
  "api/AasCore.Aas3_0_RC02.ISpecificAssetId.html": {
    "href": "api/AasCore.Aas3_0_RC02.ISpecificAssetId.html",
    "title": "Interface ISpecificAssetId",
    "keywords": "Interface ISpecificAssetId A specific asset ID describes a generic supplementary identifying attribute of the asset. Inherited Members IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ISpecificAssetId : IHasSemantics, IClass Remarks The specific asset ID is not necessarily globally unique. Properties | Improve this Doc View Source ExternalSubjectId The (external) subject the key belongs to or has meaning to. Declaration Reference ExternalSubjectId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source Name Name of the identifier Declaration string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The value of the specific asset identifier with the corresponding name. Declaration string Value { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.ISubmodel.html": {
    "href": "api/AasCore.Aas3_0_RC02.ISubmodel.html",
    "title": "Interface ISubmodel",
    "keywords": "Interface ISubmodel A submodel defines a specific aspect of the asset represented by the AAS. Inherited Members IIdentifiable.Administration IIdentifiable.Id IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ISubmodel : IIdentifiable, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks A submodel is used to structure the digital representation and technical functionality of an Administration Shell into distinguishable parts. Each submodel refers to a well-defined domain or subject matter. Submodels can become standardized and, thus, become submodels templates. Properties | Improve this Doc View Source SubmodelElements A submodel consists of zero or more submodel elements. Declaration List<ISubmodelElement> SubmodelElements { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement >"
  },
  "api/AasCore.Aas3_0_RC02.ISubmodelElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.ISubmodelElement.html",
    "title": "Interface ISubmodelElement",
    "keywords": "Interface ISubmodelElement A submodel element is an element suitable for the description and differentiation of assets. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ISubmodelElement : IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks It is recommended to add a SemanticId to a submodel element."
  },
  "api/AasCore.Aas3_0_RC02.ISubmodelElementCollection.html": {
    "href": "api/AasCore.Aas3_0_RC02.ISubmodelElementCollection.html",
    "title": "Interface ISubmodelElementCollection",
    "keywords": "Interface ISubmodelElementCollection A submodel element collection is a kind of struct, i.e. a a logical encapsulation of multiple named values. It has a fixed number of submodel elements. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ISubmodelElementCollection : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source Value Submodel element contained in the collection. Declaration List<ISubmodelElement> Value { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement >"
  },
  "api/AasCore.Aas3_0_RC02.ISubmodelElementList.html": {
    "href": "api/AasCore.Aas3_0_RC02.ISubmodelElementList.html",
    "title": "Interface ISubmodelElementList",
    "keywords": "Interface ISubmodelElementList A submodel element list is an ordered list of submodel elements. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ISubmodelElementList : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The numbering starts with zero (0). Constraints: Constraint AASd-107: If a first level child element in a SubmodelElementList has a SemanticId it shall be identical to SemanticIdListElement . Constraint AASd-114: If two first level child elements in a SubmodelElementList have a SemanticId then they shall be identical. Constraint AASd-115: If a first level child element in a SubmodelElementList does not specify a SemanticId then the value is assumed to be identical to SemanticIdListElement . Constraint AASd-108: All first level child elements in a SubmodelElementList shall have the same submodel element type as specified in TypeValueListElement . Constraint AASd-109: If TypeValueListElement is equal to Property or Range ValueTypeListElement shall be set and all first level child elements in the SubmodelElementList shall have the value type as specified in ValueTypeListElement . Properties | Improve this Doc View Source OrderRelevant Defines whether order in list is relevant. If OrderRelevant = False then the list is representing a set or a bag. Declaration bool? OrderRelevant { get; set; } Property Value Type Description System.Nullable < System.Boolean > Remarks Default: True | Improve this Doc View Source SemanticIdListElement Semantic ID the submodel elements contained in the list match to. Declaration Reference SemanticIdListElement { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source TypeValueListElement The submodel element type of the submodel elements contained in the list. Declaration AasSubmodelElements TypeValueListElement { get; set; } Property Value Type Description AasSubmodelElements | Improve this Doc View Source Value Submodel element contained in the list. Declaration List<ISubmodelElement> Value { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement > Remarks The list is ordered. | Improve this Doc View Source ValueTypeListElement The value type of the submodel element contained in the list. Declaration DataTypeDefXsd? ValueTypeListElement { get; set; } Property Value Type Description System.Nullable < DataTypeDefXsd > Methods | Improve this Doc View Source OrderRelevantOrDefault() Declaration bool OrderRelevantOrDefault() Returns Type Description System.Boolean | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration IEnumerable<ISubmodelElement> OverValueOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < ISubmodelElement >"
  },
  "api/AasCore.Aas3_0_RC02.IValueList.html": {
    "href": "api/AasCore.Aas3_0_RC02.IValueList.html",
    "title": "Interface IValueList",
    "keywords": "Interface IValueList A set of value reference pairs. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IValueList : IClass Properties | Improve this Doc View Source ValueReferencePairs A pair of a value together with its global unique id. Declaration List<ValueReferencePair> ValueReferencePairs { get; set; } Property Value Type Description System.Collections.Generic.List < ValueReferencePair >"
  },
  "api/AasCore.Aas3_0_RC02.IValueReferencePair.html": {
    "href": "api/AasCore.Aas3_0_RC02.IValueReferencePair.html",
    "title": "Interface IValueReferencePair",
    "keywords": "Interface IValueReferencePair A value reference pair within a value list. Each value has a global unique id defining its semantic. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IValueReferencePair : IClass Properties | Improve this Doc View Source Value The value of the referenced concept definition of the value in valueId. Declaration string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Global unique id of the value. Declaration Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference."
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.Deserialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.Deserialize.html",
    "title": "Class Jsonization.Deserialize",
    "keywords": "Class Jsonization.Deserialize Deserialize instances of meta-model classes from JSON nodes. Inheritance System.Object Jsonization.Deserialize Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Deserialize Examples Here is an example how to parse an instance of IHasSemantics: string someString = \"... some JSON ...\"; var node = System.Text.Json.Nodes.JsonNode.Parse(someString); Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom( node); Methods | Improve this Doc View Source AasSubmodelElementsFrom(JsonNode) Deserialize an instance of AasSubmodelElements from node . Declaration public static AasSubmodelElements AasSubmodelElementsFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AasSubmodelElements Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AasSubmodelElements. | Improve this Doc View Source AdministrativeInformationFrom(JsonNode) Deserialize an instance of AdministrativeInformation from node . Declaration public static AdministrativeInformation AdministrativeInformationFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AdministrativeInformation Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AdministrativeInformation. | Improve this Doc View Source AnnotatedRelationshipElementFrom(JsonNode) Deserialize an instance of AnnotatedRelationshipElement from node . Declaration public static AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AnnotatedRelationshipElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AnnotatedRelationshipElement. | Improve this Doc View Source AssetAdministrationShellFrom(JsonNode) Deserialize an instance of AssetAdministrationShell from node . Declaration public static AssetAdministrationShell AssetAdministrationShellFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AssetAdministrationShell Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AssetAdministrationShell. | Improve this Doc View Source AssetInformationFrom(JsonNode) Deserialize an instance of AssetInformation from node . Declaration public static AssetInformation AssetInformationFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AssetInformation Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AssetInformation. | Improve this Doc View Source AssetKindFrom(JsonNode) Deserialize an instance of AssetKind from node . Declaration public static AssetKind AssetKindFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AssetKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AssetKind. | Improve this Doc View Source BasicEventElementFrom(JsonNode) Deserialize an instance of BasicEventElement from node . Declaration public static BasicEventElement BasicEventElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description BasicEventElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of BasicEventElement. | Improve this Doc View Source BlobFrom(JsonNode) Deserialize an instance of Blob from node . Declaration public static Blob BlobFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Blob Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Blob. | Improve this Doc View Source CapabilityFrom(JsonNode) Deserialize an instance of Capability from node . Declaration public static Capability CapabilityFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Capability Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Capability. | Improve this Doc View Source ConceptDescriptionFrom(JsonNode) Deserialize an instance of ConceptDescription from node . Declaration public static ConceptDescription ConceptDescriptionFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ConceptDescription Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ConceptDescription. | Improve this Doc View Source DataSpecificationIec61360From(JsonNode) Deserialize an instance of DataSpecificationIec61360 from node . Declaration public static DataSpecificationIec61360 DataSpecificationIec61360From(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataSpecificationIec61360 Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataSpecificationIec61360. | Improve this Doc View Source DataSpecificationPhysicalUnitFrom(JsonNode) Deserialize an instance of DataSpecificationPhysicalUnit from node . Declaration public static DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataSpecificationPhysicalUnit Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataSpecificationPhysicalUnit. | Improve this Doc View Source DataTypeDefXsdFrom(JsonNode) Deserialize an instance of DataTypeDefXsd from node . Declaration public static DataTypeDefXsd DataTypeDefXsdFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataTypeDefXsd Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataTypeDefXsd. | Improve this Doc View Source DataTypeIec61360From(JsonNode) Deserialize an instance of DataTypeIec61360 from node . Declaration public static DataTypeIec61360 DataTypeIec61360From(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataTypeIec61360 Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataTypeIec61360. | Improve this Doc View Source DirectionFrom(JsonNode) Deserialize an instance of Direction from node . Declaration public static Direction DirectionFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Direction Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Direction. | Improve this Doc View Source EmbeddedDataSpecificationFrom(JsonNode) Deserialize an instance of EmbeddedDataSpecification from node . Declaration public static EmbeddedDataSpecification EmbeddedDataSpecificationFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description EmbeddedDataSpecification Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of EmbeddedDataSpecification. | Improve this Doc View Source EntityFrom(JsonNode) Deserialize an instance of Entity from node . Declaration public static Entity EntityFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Entity Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Entity. | Improve this Doc View Source EntityTypeFrom(JsonNode) Deserialize an instance of EntityType from node . Declaration public static EntityType EntityTypeFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description EntityType Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of EntityType. | Improve this Doc View Source EnvironmentFrom(JsonNode) Deserialize an instance of Environment from node . Declaration public static Environment EnvironmentFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Environment Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Environment. | Improve this Doc View Source EventPayloadFrom(JsonNode) Deserialize an instance of EventPayload from node . Declaration public static EventPayload EventPayloadFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description EventPayload Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of EventPayload. | Improve this Doc View Source ExtensionFrom(JsonNode) Deserialize an instance of Extension from node . Declaration public static Extension ExtensionFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Extension Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Extension. | Improve this Doc View Source FileFrom(JsonNode) Deserialize an instance of File from node . Declaration public static File FileFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description File Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of File. | Improve this Doc View Source IDataElementFrom(JsonNode) Deserialize an instance of IDataElement from node . Declaration public static IDataElement IDataElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IDataElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IDataElement. | Improve this Doc View Source IDataSpecificationContentFrom(JsonNode) Deserialize an instance of IDataSpecificationContent from node . Declaration public static IDataSpecificationContent IDataSpecificationContentFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IDataSpecificationContent Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IDataSpecificationContent. | Improve this Doc View Source IEventElementFrom(JsonNode) Deserialize an instance of IEventElement from node . Declaration public static IEventElement IEventElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IEventElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IEventElement. | Improve this Doc View Source IHasDataSpecificationFrom(JsonNode) Deserialize an instance of IHasDataSpecification from node . Declaration public static IHasDataSpecification IHasDataSpecificationFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasDataSpecification Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasDataSpecification. | Improve this Doc View Source IHasExtensionsFrom(JsonNode) Deserialize an instance of IHasExtensions from node . Declaration public static IHasExtensions IHasExtensionsFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasExtensions Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasExtensions. | Improve this Doc View Source IHasKindFrom(JsonNode) Deserialize an instance of IHasKind from node . Declaration public static IHasKind IHasKindFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasKind. | Improve this Doc View Source IHasSemanticsFrom(JsonNode) Deserialize an instance of IHasSemantics from node . Declaration public static IHasSemantics IHasSemanticsFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasSemantics Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasSemantics. | Improve this Doc View Source IIdentifiableFrom(JsonNode) Deserialize an instance of IIdentifiable from node . Declaration public static IIdentifiable IIdentifiableFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IIdentifiable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IIdentifiable. | Improve this Doc View Source IQualifiableFrom(JsonNode) Deserialize an instance of IQualifiable from node . Declaration public static IQualifiable IQualifiableFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IQualifiable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IQualifiable. | Improve this Doc View Source IReferableFrom(JsonNode) Deserialize an instance of IReferable from node . Declaration public static IReferable IReferableFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IReferable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IReferable. | Improve this Doc View Source IRelationshipElementFrom(JsonNode) Deserialize an instance of IRelationshipElement from node . Declaration public static IRelationshipElement IRelationshipElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IRelationshipElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IRelationshipElement. | Improve this Doc View Source ISubmodelElementFrom(JsonNode) Deserialize an instance of ISubmodelElement from node . Declaration public static ISubmodelElement ISubmodelElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ISubmodelElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ISubmodelElement. | Improve this Doc View Source KeyFrom(JsonNode) Deserialize an instance of Key from node . Declaration public static Key KeyFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Key Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Key. | Improve this Doc View Source KeyTypesFrom(JsonNode) Deserialize an instance of KeyTypes from node . Declaration public static KeyTypes KeyTypesFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description KeyTypes Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of KeyTypes. | Improve this Doc View Source LangStringFrom(JsonNode) Deserialize an instance of LangString from node . Declaration public static LangString LangStringFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description LangString Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of LangString. | Improve this Doc View Source LevelTypeFrom(JsonNode) Deserialize an instance of LevelType from node . Declaration public static LevelType LevelTypeFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description LevelType Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of LevelType. | Improve this Doc View Source ModelingKindFrom(JsonNode) Deserialize an instance of ModelingKind from node . Declaration public static ModelingKind ModelingKindFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ModelingKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ModelingKind. | Improve this Doc View Source MultiLanguagePropertyFrom(JsonNode) Deserialize an instance of MultiLanguageProperty from node . Declaration public static MultiLanguageProperty MultiLanguagePropertyFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description MultiLanguageProperty Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of MultiLanguageProperty. | Improve this Doc View Source OperationFrom(JsonNode) Deserialize an instance of Operation from node . Declaration public static Operation OperationFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Operation Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Operation. | Improve this Doc View Source OperationVariableFrom(JsonNode) Deserialize an instance of OperationVariable from node . Declaration public static OperationVariable OperationVariableFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description OperationVariable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of OperationVariable. | Improve this Doc View Source PropertyFrom(JsonNode) Deserialize an instance of Property from node . Declaration public static Property PropertyFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Property Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Property. | Improve this Doc View Source QualifierFrom(JsonNode) Deserialize an instance of Qualifier from node . Declaration public static Qualifier QualifierFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Qualifier Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Qualifier. | Improve this Doc View Source QualifierKindFrom(JsonNode) Deserialize an instance of QualifierKind from node . Declaration public static QualifierKind QualifierKindFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description QualifierKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of QualifierKind. | Improve this Doc View Source RangeFrom(JsonNode) Deserialize an instance of Range from node . Declaration public static Range RangeFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Range Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Range. | Improve this Doc View Source ReferenceElementFrom(JsonNode) Deserialize an instance of ReferenceElement from node . Declaration public static ReferenceElement ReferenceElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ReferenceElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ReferenceElement. | Improve this Doc View Source ReferenceFrom(JsonNode) Deserialize an instance of Reference from node . Declaration public static Reference ReferenceFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Reference Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Reference. | Improve this Doc View Source ReferenceTypesFrom(JsonNode) Deserialize an instance of ReferenceTypes from node . Declaration public static ReferenceTypes ReferenceTypesFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ReferenceTypes Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ReferenceTypes. | Improve this Doc View Source RelationshipElementFrom(JsonNode) Deserialize an instance of RelationshipElement from node . Declaration public static RelationshipElement RelationshipElementFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description RelationshipElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of RelationshipElement. | Improve this Doc View Source ResourceFrom(JsonNode) Deserialize an instance of Resource from node . Declaration public static Resource ResourceFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Resource Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Resource. | Improve this Doc View Source SpecificAssetIdFrom(JsonNode) Deserialize an instance of SpecificAssetId from node . Declaration public static SpecificAssetId SpecificAssetIdFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description SpecificAssetId Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of SpecificAssetId. | Improve this Doc View Source StateOfEventFrom(JsonNode) Deserialize an instance of StateOfEvent from node . Declaration public static StateOfEvent StateOfEventFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description StateOfEvent Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of StateOfEvent. | Improve this Doc View Source SubmodelElementCollectionFrom(JsonNode) Deserialize an instance of SubmodelElementCollection from node . Declaration public static SubmodelElementCollection SubmodelElementCollectionFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description SubmodelElementCollection Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of SubmodelElementCollection. | Improve this Doc View Source SubmodelElementListFrom(JsonNode) Deserialize an instance of SubmodelElementList from node . Declaration public static SubmodelElementList SubmodelElementListFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description SubmodelElementList Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of SubmodelElementList. | Improve this Doc View Source SubmodelFrom(JsonNode) Deserialize an instance of Submodel from node . Declaration public static Submodel SubmodelFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Submodel Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Submodel. | Improve this Doc View Source ValueListFrom(JsonNode) Deserialize an instance of ValueList from node . Declaration public static ValueList ValueListFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ValueList Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ValueList. | Improve this Doc View Source ValueReferencePairFrom(JsonNode) Deserialize an instance of ValueReferencePair from node . Declaration public static ValueReferencePair ValueReferencePairFrom(JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ValueReferencePair Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ValueReferencePair."
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.Exception.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.Exception.html",
    "title": "Class Jsonization.Exception",
    "keywords": "Class Jsonization.Exception Represent a critical error during the deserialization. Inheritance System.Object System.Exception Jsonization.Exception Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Exception : Exception, ISerializable Constructors | Improve this Doc View Source Exception(String, String) Declaration public Exception(string path, string cause) Parameters Type Name Description System.String path System.String cause Fields | Improve this Doc View Source Cause Declaration public readonly string Cause Field Value Type Description System.String | Improve this Doc View Source Path Declaration public readonly string Path Field Value Type Description System.String Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.html",
    "title": "Class Jsonization",
    "keywords": "Class Jsonization Provide de/serialization of meta-model classes to/from JSON. Inheritance System.Object Jsonization Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Jsonization Remarks We can not use one-pass deserialization for JSON since the object properties do not have fixed order, and hence we can not read modelType property ahead of the remaining properties."
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.Serialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.Serialize.html",
    "title": "Class Jsonization.Serialize",
    "keywords": "Class Jsonization.Serialize Serialize instances of meta-model classes to JSON elements. Inheritance System.Object Jsonization.Serialize Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Serialize Examples Here is an example how to serialize an instance of IHasSemantics: var anInstance = new Aas.IHasSemantics( // ... some constructor arguments ... ); System.Text.Json.Nodes.JsonObject element = ( Serialize.ToJsonObject( anInstance)); Methods | Improve this Doc View Source AasSubmodelElementsToJsonValue(AasSubmodelElements) Serialize a literal of AasSubmodelElements into a JSON string. Declaration public static JsonValue AasSubmodelElementsToJsonValue(AasSubmodelElements that) Parameters Type Name Description AasSubmodelElements that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source AssetKindToJsonValue(AssetKind) Serialize a literal of AssetKind into a JSON string. Declaration public static JsonValue AssetKindToJsonValue(AssetKind that) Parameters Type Name Description AssetKind that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source DataTypeDefXsdToJsonValue(DataTypeDefXsd) Serialize a literal of DataTypeDefXsd into a JSON string. Declaration public static JsonValue DataTypeDefXsdToJsonValue(DataTypeDefXsd that) Parameters Type Name Description DataTypeDefXsd that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source DataTypeIec61360ToJsonValue(DataTypeIec61360) Serialize a literal of DataTypeIec61360 into a JSON string. Declaration public static JsonValue DataTypeIec61360ToJsonValue(DataTypeIec61360 that) Parameters Type Name Description DataTypeIec61360 that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source DirectionToJsonValue(Direction) Serialize a literal of Direction into a JSON string. Declaration public static JsonValue DirectionToJsonValue(Direction that) Parameters Type Name Description Direction that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source EntityTypeToJsonValue(EntityType) Serialize a literal of EntityType into a JSON string. Declaration public static JsonValue EntityTypeToJsonValue(EntityType that) Parameters Type Name Description EntityType that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source KeyTypesToJsonValue(KeyTypes) Serialize a literal of KeyTypes into a JSON string. Declaration public static JsonValue KeyTypesToJsonValue(KeyTypes that) Parameters Type Name Description KeyTypes that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source LevelTypeToJsonValue(LevelType) Serialize a literal of LevelType into a JSON string. Declaration public static JsonValue LevelTypeToJsonValue(LevelType that) Parameters Type Name Description LevelType that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source ModelingKindToJsonValue(ModelingKind) Serialize a literal of ModelingKind into a JSON string. Declaration public static JsonValue ModelingKindToJsonValue(ModelingKind that) Parameters Type Name Description ModelingKind that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source QualifierKindToJsonValue(QualifierKind) Serialize a literal of QualifierKind into a JSON string. Declaration public static JsonValue QualifierKindToJsonValue(QualifierKind that) Parameters Type Name Description QualifierKind that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source ReferenceTypesToJsonValue(ReferenceTypes) Serialize a literal of ReferenceTypes into a JSON string. Declaration public static JsonValue ReferenceTypesToJsonValue(ReferenceTypes that) Parameters Type Name Description ReferenceTypes that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source StateOfEventToJsonValue(StateOfEvent) Serialize a literal of StateOfEvent into a JSON string. Declaration public static JsonValue StateOfEventToJsonValue(StateOfEvent that) Parameters Type Name Description StateOfEvent that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source ToJsonObject(IClass) Serialize an instance of the meta-model into a JSON object. Declaration public static JsonObject ToJsonObject(IClass that) Parameters Type Name Description IClass that Returns Type Description System.Text.Json.Nodes.JsonObject"
  },
  "api/AasCore.Aas3_0_RC02.Key.html": {
    "href": "api/AasCore.Aas3_0_RC02.Key.html",
    "title": "Class Key",
    "keywords": "Class Key A key is a reference to an element by its ID. Inheritance System.Object Key Implements IKey IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Key : IKey, IClass Constructors | Improve this Doc View Source Key(KeyTypes, String) Declaration public Key(KeyTypes type, string value) Parameters Type Name Description KeyTypes type System.String value Properties | Improve this Doc View Source Type Denotes which kind of entity is referenced. Declaration public KeyTypes Type { get; set; } Property Value Type Description KeyTypes Remarks In case Type = FragmentReference the key represents a bookmark or a similar local identifier within its parent element as specified by the key that precedes this key. In all other cases the key references a model element of the same or of another AAS. The name of the model element is explicitly listed. | Improve this Doc View Source Value The key value, for example an IRDI or an URI Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IKey IClass"
  },
  "api/AasCore.Aas3_0_RC02.KeyTypes.html": {
    "href": "api/AasCore.Aas3_0_RC02.KeyTypes.html",
    "title": "Enum KeyTypes",
    "keywords": "Enum KeyTypes Enumeration of different key value types within a key. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum KeyTypes Fields Name Description AnnotatedRelationshipElement AssetAdministrationShell BasicEventElement Blob Capability ConceptDescription DataElement Data element. Entity EventElement Event. File FragmentReference Bookmark or a similar local identifier of a subordinate part of a primary resource GlobalReference Identifiable Identifiable. MultiLanguageProperty Property with a value that can be provided in multiple languages Operation Property Range Range with min and max Referable ReferenceElement Reference RelationshipElement Relationship Submodel SubmodelElement Submodel Element SubmodelElementCollection Struct of Submodel Elements SubmodelElementList List of Submodel Elements"
  },
  "api/AasCore.Aas3_0_RC02.LangString.html": {
    "href": "api/AasCore.Aas3_0_RC02.LangString.html",
    "title": "Class LangString",
    "keywords": "Class LangString Strings with language tags Inheritance System.Object LangString Implements ILangString IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class LangString : ILangString, IClass Constructors | Improve this Doc View Source LangString(String, String) Declaration public LangString(string language, string text) Parameters Type Name Description System.String language System.String text Properties | Improve this Doc View Source Language Language tag conforming to BCP 47 Declaration public string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Text in the Language Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ILangString IClass"
  },
  "api/AasCore.Aas3_0_RC02.LevelType.html": {
    "href": "api/AasCore.Aas3_0_RC02.LevelType.html",
    "title": "Enum LevelType",
    "keywords": "Enum LevelType Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum LevelType Fields Name Description Max Min Nom Typ"
  },
  "api/AasCore.Aas3_0_RC02.ModelingKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.ModelingKind.html",
    "title": "Enum ModelingKind",
    "keywords": "Enum ModelingKind Enumeration for denoting whether an element is a template or an instance. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum ModelingKind Fields Name Description Instance Concrete, clearly identifiable component of a certain template. Template Software element which specifies the common attributes shared by all instances of the template."
  },
  "api/AasCore.Aas3_0_RC02.MultiLanguageProperty.html": {
    "href": "api/AasCore.Aas3_0_RC02.MultiLanguageProperty.html",
    "title": "Class MultiLanguageProperty",
    "keywords": "Class MultiLanguageProperty A property is a data element that has a multi-language value. Inheritance System.Object MultiLanguageProperty Implements IMultiLanguageProperty IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class MultiLanguageProperty : IMultiLanguageProperty, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-012: If both the Value and the ValueId are present then for each string in a specific language the meaning must be the same as specified in ValueId . Constructors | Improve this Doc View Source MultiLanguageProperty(List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, List<LangString>, Reference) Declaration public MultiLanguageProperty(List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<LangString> value = null, Reference valueId = null) Parameters Type Name Description System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < LangString > value Reference valueId Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the property instance. Declaration public List<LangString> Value { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverValueOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IMultiLanguageProperty IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Operation.html": {
    "href": "api/AasCore.Aas3_0_RC02.Operation.html",
    "title": "Class Operation",
    "keywords": "Class Operation An operation is a submodel element with input and output variables. Inheritance System.Object Operation Implements IOperation ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Operation : IOperation, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source Operation(List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, List<OperationVariable>, List<OperationVariable>, List<OperationVariable>) Declaration public Operation(List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<OperationVariable> inputVariables = null, List<OperationVariable> outputVariables = null, List<OperationVariable> inoutputVariables = null) Parameters Type Name Description System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < OperationVariable > inputVariables System.Collections.Generic.List < OperationVariable > outputVariables System.Collections.Generic.List < OperationVariable > inoutputVariables Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source InoutputVariables Parameter that is input and output of the operation. Declaration public List<OperationVariable> InoutputVariables { get; set; } Property Value Type Description System.Collections.Generic.List < OperationVariable > | Improve this Doc View Source InputVariables Input parameter of the operation. Declaration public List<OperationVariable> InputVariables { get; set; } Property Value Type Description System.Collections.Generic.List < OperationVariable > | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source OutputVariables Output parameter of the operation. Declaration public List<OperationVariable> OutputVariables { get; set; } Property Value Type Description System.Collections.Generic.List < OperationVariable > | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverInoutputVariablesOrEmpty() Iterate over InoutputVariables, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<OperationVariable> OverInoutputVariablesOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < OperationVariable > | Improve this Doc View Source OverInputVariablesOrEmpty() Iterate over InputVariables, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<OperationVariable> OverInputVariablesOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < OperationVariable > | Improve this Doc View Source OverOutputVariablesOrEmpty() Iterate over OutputVariables, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<OperationVariable> OverOutputVariablesOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < OperationVariable > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IOperation ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.OperationVariable.html": {
    "href": "api/AasCore.Aas3_0_RC02.OperationVariable.html",
    "title": "Class OperationVariable",
    "keywords": "Class OperationVariable The value of an operation variable is a submodel element that is used as input and/or output variable of an operation. Inheritance System.Object OperationVariable Implements IOperationVariable IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class OperationVariable : IOperationVariable, IClass Constructors | Improve this Doc View Source OperationVariable(ISubmodelElement) Declaration public OperationVariable(ISubmodelElement value) Parameters Type Name Description ISubmodelElement value Properties | Improve this Doc View Source Value Describes an argument or result of an operation via a submodel element Declaration public ISubmodelElement Value { get; set; } Property Value Type Description ISubmodelElement Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IOperationVariable IClass"
  },
  "api/AasCore.Aas3_0_RC02.Property.html": {
    "href": "api/AasCore.Aas3_0_RC02.Property.html",
    "title": "Class Property",
    "keywords": "Class Property A property is a data element that has a single value. Inheritance System.Object Property Implements IProperty IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Property : IProperty, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-007: If both, the Value and the ValueId are present then the value of Value needs to be identical to the value of the referenced coded value in ValueId . Constructors | Improve this Doc View Source Property(DataTypeDefXsd, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, String, Reference) Declaration public Property(DataTypeDefXsd valueType, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, string value = null, Reference valueId = null) Parameters Type Name Description DataTypeDefXsd valueType System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.String value Reference valueId Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the property instance. Declaration public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the value Declaration public DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IProperty IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Qualifier.html": {
    "href": "api/AasCore.Aas3_0_RC02.Qualifier.html",
    "title": "Class Qualifier",
    "keywords": "Class Qualifier A qualifier is a type-value-pair that makes additional statements w.r.t. the value of the element. Inheritance System.Object Qualifier Implements IQualifier IHasSemantics IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Qualifier : IQualifier, IHasSemantics, IClass Remarks Constraints: Constraint AASd-006: If both the Value and the ValueId of a Qualifier are present then the Value needs to be identical to the value of the referenced coded value in ValueId . Constraint AASd-020: The value of Value shall be consistent to the data type as defined in ValueType . Constructors | Improve this Doc View Source Qualifier(String, DataTypeDefXsd, Reference, List<Reference>, Nullable<QualifierKind>, String, Reference) Declaration public Qualifier(string type, DataTypeDefXsd valueType, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, QualifierKind? kind = null, string value = null, Reference valueId = null) Parameters Type Name Description System.String type DataTypeDefXsd valueType Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Nullable < QualifierKind > kind System.String value Reference valueId Properties | Improve this Doc View Source Kind The qualifier kind describes the kind of the qualifier that is applied to the element. Declaration public QualifierKind? Kind { get; set; } Property Value Type Description System.Nullable < QualifierKind > Remarks Default: ConceptQualifier | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Type The qualifier type describes the type of the qualifier that is applied to the element. Declaration public string Type { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The qualifier value is the value of the qualifier. Declaration public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the qualifier value. Declaration public DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public QualifierKind KindOrDefault() Returns Type Description QualifierKind | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IQualifier IHasSemantics IClass"
  },
  "api/AasCore.Aas3_0_RC02.QualifierKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.QualifierKind.html",
    "title": "Enum QualifierKind",
    "keywords": "Enum QualifierKind Enumeration for kinds of qualifiers. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum QualifierKind Fields Name Description ConceptQualifier qualifies the semantic definition the element is referring to ( SemanticId ) TemplateQualifier qualifies the elements within a specific submodel on concept level. ValueQualifier qualifies the value of the element and can change during run-time."
  },
  "api/AasCore.Aas3_0_RC02.Range.html": {
    "href": "api/AasCore.Aas3_0_RC02.Range.html",
    "title": "Class Range",
    "keywords": "Class Range A range data element is a data element that defines a range with min and max. Inheritance System.Object Range Implements IRange IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Range : IRange, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source Range(DataTypeDefXsd, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, String, String) Declaration public Range(DataTypeDefXsd valueType, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, string min = null, string max = null) Parameters Type Name Description DataTypeDefXsd valueType System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.String min System.String max Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Max The maximum value of the range. Declaration public string Max { get; set; } Property Value Type Description System.String Remarks If the max value is missing, then the value is assumed to be positive infinite. | Improve this Doc View Source Min The minimum value of the range. Declaration public string Min { get; set; } Property Value Type Description System.String Remarks If the min value is missing, then the value is assumed to be negative infinite. | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the min und max Declaration public DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IRange IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Reference.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reference.html",
    "title": "Class Reference",
    "keywords": "Class Reference Reference to either a model element of the same or another AAS or to an external entity. Inheritance System.Object Reference Implements IReference IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Reference : IReference, IClass Remarks A reference is an ordered list of keys. A model reference is an ordered list of keys, each key referencing an element. The complete list of keys may for example be concatenated to a path that then gives unique access to an element. A global reference is a reference to an external entity. Constraints: Constraint AASd-121: For Reference 's the Type of the first key of Keys shall be one of GloballyIdentifiables . Constraint AASd-122: For global references, i.e. Reference 's with Type = GlobalReference , the type of the first key of Keys shall be one of GenericGloballyIdentifiables . Constraint AASd-123: For model references, i.e. Reference 's with Type = ModelReference , the type of the first key of Keys shall be one of AasIdentifiables . Constraint AASd-124: For global references, i.e. Reference 's with Type = GlobalReference , the last key of Keys shall be either one of GenericGloballyIdentifiables or one of GenericFragmentKeys . Constraint AASd-125: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys the type of the keys following the first key of Keys shall be one of FragmentKeys . Constraint AASd-125 ensures that the shortest path is used. Constraint AASd-126: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys the type of the last key in the reference key chain may be one of GenericFragmentKeys or no key at all shall have a value out of GenericFragmentKeys . Constraint AASd-127: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys a key with Type FragmentReference shall be preceded by a key with Type File or Blob . All other AAS fragments, i.e. type values out of AasSubmodelElementsAsKeys , do not support fragments. Which kind of fragments are supported depends on the content type and the specification of allowed fragment identifiers for the corresponding resource being referenced via the reference. Constraint AASd-128: For model references, i.e. Reference 's with Type = ModelReference , the Value of a Key preceded by a Key with Type = SubmodelElementList is an integer number denoting the position in the array of the submodel element list. Constructors | Improve this Doc View Source Reference(ReferenceTypes, List<Key>, Reference) Declaration public Reference(ReferenceTypes type, List<Key> keys, Reference referredSemanticId = null) Parameters Type Name Description ReferenceTypes type System.Collections.Generic.List < Key > keys Reference referredSemanticId Properties | Improve this Doc View Source Keys Unique references in their name space. Declaration public List<Key> Keys { get; set; } Property Value Type Description System.Collections.Generic.List < Key > | Improve this Doc View Source ReferredSemanticId SemanticId of the referenced model element ( Type = ModelReference ). Declaration public Reference ReferredSemanticId { get; set; } Property Value Type Description Reference Remarks For global references there typically is no semantic ID. It is recommended to use a global reference. | Improve this Doc View Source Type Type of the reference. Declaration public ReferenceTypes Type { get; set; } Property Value Type Description ReferenceTypes Remarks Denotes, whether reference is a global reference or a model reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IReference IClass"
  },
  "api/AasCore.Aas3_0_RC02.ReferenceElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.ReferenceElement.html",
    "title": "Class ReferenceElement",
    "keywords": "Class ReferenceElement A reference element is a data element that defines a logical reference to another element within the same or another AAS or a reference to an external object or entity. Inheritance System.Object ReferenceElement Implements IReferenceElement IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ReferenceElement : IReferenceElement, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source ReferenceElement(List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, Reference) Declaration public ReferenceElement(List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, Reference value = null) Parameters Type Name Description System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications Reference value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Global reference to an external object or entity or a logical reference to another element within the same or another AAS (i.e. a model reference to a Referable). Declaration public Reference Value { get; set; } Property Value Type Description Reference Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IReferenceElement IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.ReferenceTypes.html": {
    "href": "api/AasCore.Aas3_0_RC02.ReferenceTypes.html",
    "title": "Enum ReferenceTypes",
    "keywords": "Enum ReferenceTypes ReferenceTypes Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum ReferenceTypes Fields Name Description GlobalReference GlobalReference. ModelReference ModelReference"
  },
  "api/AasCore.Aas3_0_RC02.RelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.RelationshipElement.html",
    "title": "Class RelationshipElement",
    "keywords": "Class RelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). Inheritance System.Object RelationshipElement Implements IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class RelationshipElement : IRelationshipElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source RelationshipElement(Reference, Reference, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>) Declaration public RelationshipElement(Reference first, Reference second, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null) Parameters Type Name Description Reference first Reference second System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source First Reference to the first element in the relationship taking the role of the subject. Declaration public Reference First { get; set; } Property Value Type Description Reference | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source Second Reference to the second element in the relationship taking the role of the object. Declaration public Reference Second { get; set; } Property Value Type Description Reference | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.Error.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.Error.html",
    "title": "Class Reporting.Error",
    "keywords": "Class Reporting.Error Represent an error during the deserialization or the verification. Inheritance System.Object Reporting.Error Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Error Constructors | Improve this Doc View Source Error(String) Declaration public Error(string cause) Parameters Type Name Description System.String cause Fields | Improve this Doc View Source Cause Declaration public readonly string Cause Field Value Type Description System.String Properties | Improve this Doc View Source PathSegments Declaration public ICollection<Reporting.Segment> PathSegments { get; } Property Value Type Description System.Collections.Generic.ICollection < Reporting.Segment > Methods | Improve this Doc View Source PrependSegment(Reporting.Segment) Declaration public void PrependSegment(Reporting.Segment segment) Parameters Type Name Description Reporting.Segment segment"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.html",
    "title": "Class Reporting",
    "keywords": "Class Reporting Provide reporting for de/serialization and verification. Inheritance System.Object Reporting Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Reporting Methods | Improve this Doc View Source GenerateJsonPath(ICollection<Reporting.Segment>) Generate a JSON Path based on the path segments. Declaration public static string GenerateJsonPath(ICollection<Reporting.Segment> segments) Parameters Type Name Description System.Collections.Generic.ICollection < Reporting.Segment > segments Returns Type Description System.String Remarks See, for example, this page for more information on JSON path: https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html | Improve this Doc View Source GenerateRelativeXPath(ICollection<Reporting.Segment>) Generate a relative XPath based on the path segments. Declaration public static string GenerateRelativeXPath(ICollection<Reporting.Segment> segments) Parameters Type Name Description System.Collections.Generic.ICollection < Reporting.Segment > segments Returns Type Description System.String Remarks This method leaves out the leading slash ('/'). This is helpful if to embed the error report in a larger document with a prefix etc."
  },
  "api/AasCore.Aas3_0_RC02.Reporting.IndexSegment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.IndexSegment.html",
    "title": "Class Reporting.IndexSegment",
    "keywords": "Class Reporting.IndexSegment Inheritance System.Object Reporting.Segment Reporting.IndexSegment Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class IndexSegment : Reporting.Segment Constructors | Improve this Doc View Source IndexSegment(Int32) Declaration public IndexSegment(int index) Parameters Type Name Description System.Int32 index Fields | Improve this Doc View Source Index Declaration public readonly int Index Field Value Type Description System.Int32"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.NameSegment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.NameSegment.html",
    "title": "Class Reporting.NameSegment",
    "keywords": "Class Reporting.NameSegment Inheritance System.Object Reporting.Segment Reporting.NameSegment Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class NameSegment : Reporting.Segment Constructors | Improve this Doc View Source NameSegment(String) Declaration public NameSegment(string name) Parameters Type Name Description System.String name Fields | Improve this Doc View Source Name Declaration public readonly string Name Field Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.Segment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.Segment.html",
    "title": "Class Reporting.Segment",
    "keywords": "Class Reporting.Segment Capture a path segment of a value in a model. Inheritance System.Object Reporting.Segment Reporting.IndexSegment Reporting.NameSegment Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class Segment"
  },
  "api/AasCore.Aas3_0_RC02.Resource.html": {
    "href": "api/AasCore.Aas3_0_RC02.Resource.html",
    "title": "Class Resource",
    "keywords": "Class Resource Resource represents an address to a file (a locator). The value is an URI that can represent an absolute or relative path Inheritance System.Object Resource Implements IResource IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Resource : IResource, IClass Constructors | Improve this Doc View Source Resource(String, String) Declaration public Resource(string path, string contentType = null) Parameters Type Name Description System.String path System.String contentType Properties | Improve this Doc View Source ContentType Content type of the content of the file. Declaration public string ContentType { get; set; } Property Value Type Description System.String Remarks The content type states which file extensions the file can have. | Improve this Doc View Source Path Path and name of the resource (with file extension). Declaration public string Path { get; set; } Property Value Type Description System.String Remarks The path can be absolute or relative. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IResource IClass"
  },
  "api/AasCore.Aas3_0_RC02.SpecificAssetId.html": {
    "href": "api/AasCore.Aas3_0_RC02.SpecificAssetId.html",
    "title": "Class SpecificAssetId",
    "keywords": "Class SpecificAssetId A specific asset ID describes a generic supplementary identifying attribute of the asset. Inheritance System.Object SpecificAssetId Implements ISpecificAssetId IHasSemantics IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class SpecificAssetId : ISpecificAssetId, IHasSemantics, IClass Remarks The specific asset ID is not necessarily globally unique. Constructors | Improve this Doc View Source SpecificAssetId(String, String, Reference, Reference, List<Reference>) Declaration public SpecificAssetId(string name, string value, Reference externalSubjectId, Reference semanticId = null, List<Reference> supplementalSemanticIds = null) Parameters Type Name Description System.String name System.String value Reference externalSubjectId Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds Properties | Improve this Doc View Source ExternalSubjectId The (external) subject the key belongs to or has meaning to. Declaration public Reference ExternalSubjectId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source Name Name of the identifier Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the specific asset identifier with the corresponding name. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISpecificAssetId IHasSemantics IClass"
  },
  "api/AasCore.Aas3_0_RC02.StateOfEvent.html": {
    "href": "api/AasCore.Aas3_0_RC02.StateOfEvent.html",
    "title": "Enum StateOfEvent",
    "keywords": "Enum StateOfEvent State of an event Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum StateOfEvent Fields Name Description Off Event is off. On Event is on"
  },
  "api/AasCore.Aas3_0_RC02.Stringification.html": {
    "href": "api/AasCore.Aas3_0_RC02.Stringification.html",
    "title": "Class Stringification",
    "keywords": "Class Stringification Inheritance System.Object Stringification Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Stringification Methods | Improve this Doc View Source AasSubmodelElementsFromString(String) Parse the string representation of AasSubmodelElements . Declaration public static AasSubmodelElements? AasSubmodelElementsFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < AasSubmodelElements > Remarks If text is not a valid string representation of a literal of AasSubmodelElements , return null . | Improve this Doc View Source AssetKindFromString(String) Parse the string representation of AssetKind . Declaration public static AssetKind? AssetKindFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < AssetKind > Remarks If text is not a valid string representation of a literal of AssetKind , return null . | Improve this Doc View Source DataTypeDefXsdFromString(String) Parse the string representation of DataTypeDefXsd . Declaration public static DataTypeDefXsd? DataTypeDefXsdFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < DataTypeDefXsd > Remarks If text is not a valid string representation of a literal of DataTypeDefXsd , return null . | Improve this Doc View Source DataTypeIec61360FromString(String) Parse the string representation of DataTypeIec61360 . Declaration public static DataTypeIec61360? DataTypeIec61360FromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < DataTypeIec61360 > Remarks If text is not a valid string representation of a literal of DataTypeIec61360 , return null . | Improve this Doc View Source DirectionFromString(String) Parse the string representation of Direction . Declaration public static Direction? DirectionFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < Direction > Remarks If text is not a valid string representation of a literal of Direction , return null . | Improve this Doc View Source EntityTypeFromString(String) Parse the string representation of EntityType . Declaration public static EntityType? EntityTypeFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < EntityType > Remarks If text is not a valid string representation of a literal of EntityType , return null . | Improve this Doc View Source KeyTypesFromString(String) Parse the string representation of KeyTypes . Declaration public static KeyTypes? KeyTypesFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < KeyTypes > Remarks If text is not a valid string representation of a literal of KeyTypes , return null . | Improve this Doc View Source LevelTypeFromString(String) Parse the string representation of LevelType . Declaration public static LevelType? LevelTypeFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < LevelType > Remarks If text is not a valid string representation of a literal of LevelType , return null . | Improve this Doc View Source ModelingKindFromString(String) Parse the string representation of ModelingKind . Declaration public static ModelingKind? ModelingKindFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < ModelingKind > Remarks If text is not a valid string representation of a literal of ModelingKind , return null . | Improve this Doc View Source QualifierKindFromString(String) Parse the string representation of QualifierKind . Declaration public static QualifierKind? QualifierKindFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < QualifierKind > Remarks If text is not a valid string representation of a literal of QualifierKind , return null . | Improve this Doc View Source ReferenceTypesFromString(String) Parse the string representation of ReferenceTypes . Declaration public static ReferenceTypes? ReferenceTypesFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < ReferenceTypes > Remarks If text is not a valid string representation of a literal of ReferenceTypes , return null . | Improve this Doc View Source StateOfEventFromString(String) Parse the string representation of StateOfEvent . Declaration public static StateOfEvent? StateOfEventFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < StateOfEvent > Remarks If text is not a valid string representation of a literal of StateOfEvent , return null . | Improve this Doc View Source ToString(Nullable<AasSubmodelElements>) Retrieve the string representation of that . Declaration public static string ToString(AasSubmodelElements? that) Parameters Type Name Description System.Nullable < AasSubmodelElements > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<AssetKind>) Retrieve the string representation of that . Declaration public static string ToString(AssetKind? that) Parameters Type Name Description System.Nullable < AssetKind > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<DataTypeDefXsd>) Retrieve the string representation of that . Declaration public static string ToString(DataTypeDefXsd? that) Parameters Type Name Description System.Nullable < DataTypeDefXsd > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<DataTypeIec61360>) Retrieve the string representation of that . Declaration public static string ToString(DataTypeIec61360? that) Parameters Type Name Description System.Nullable < DataTypeIec61360 > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<Direction>) Retrieve the string representation of that . Declaration public static string ToString(Direction? that) Parameters Type Name Description System.Nullable < Direction > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<EntityType>) Retrieve the string representation of that . Declaration public static string ToString(EntityType? that) Parameters Type Name Description System.Nullable < EntityType > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<KeyTypes>) Retrieve the string representation of that . Declaration public static string ToString(KeyTypes? that) Parameters Type Name Description System.Nullable < KeyTypes > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<LevelType>) Retrieve the string representation of that . Declaration public static string ToString(LevelType? that) Parameters Type Name Description System.Nullable < LevelType > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<ModelingKind>) Retrieve the string representation of that . Declaration public static string ToString(ModelingKind? that) Parameters Type Name Description System.Nullable < ModelingKind > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<QualifierKind>) Retrieve the string representation of that . Declaration public static string ToString(QualifierKind? that) Parameters Type Name Description System.Nullable < QualifierKind > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<ReferenceTypes>) Retrieve the string representation of that . Declaration public static string ToString(ReferenceTypes? that) Parameters Type Name Description System.Nullable < ReferenceTypes > that Returns Type Description System.String Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<StateOfEvent>) Retrieve the string representation of that . Declaration public static string ToString(StateOfEvent? that) Parameters Type Name Description System.Nullable < StateOfEvent > that Returns Type Description System.String Remarks If that is not a valid literal, return null ."
  },
  "api/AasCore.Aas3_0_RC02.Submodel.html": {
    "href": "api/AasCore.Aas3_0_RC02.Submodel.html",
    "title": "Class Submodel",
    "keywords": "Class Submodel A submodel defines a specific aspect of the asset represented by the AAS. Inheritance System.Object Submodel Implements ISubmodel IIdentifiable IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Submodel : ISubmodel, IIdentifiable, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks A submodel is used to structure the digital representation and technical functionality of an Administration Shell into distinguishable parts. Each submodel refers to a well-defined domain or subject matter. Submodels can become standardized and, thus, become submodels templates. Constructors | Improve this Doc View Source Submodel(String, List<Extension>, String, String, List<LangString>, List<LangString>, String, AdministrativeInformation, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, List<ISubmodelElement>) Declaration public Submodel(string id, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, AdministrativeInformation administration = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<ISubmodelElement> submodelElements = null) Parameters Type Name Description System.String id System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum AdministrativeInformation administration System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < ISubmodelElement > submodelElements Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration public AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source Id The globally unique identification of the element. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SubmodelElements A submodel consists of zero or more submodel elements. Declaration public List<ISubmodelElement> SubmodelElements { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement > | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSubmodelElementsOrEmpty() Iterate over SubmodelElements, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverSubmodelElementsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < ISubmodelElement > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodel IIdentifiable IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.SubmodelElementCollection.html": {
    "href": "api/AasCore.Aas3_0_RC02.SubmodelElementCollection.html",
    "title": "Class SubmodelElementCollection",
    "keywords": "Class SubmodelElementCollection A submodel element collection is a kind of struct, i.e. a a logical encapsulation of multiple named values. It has a fixed number of submodel elements. Inheritance System.Object SubmodelElementCollection Implements ISubmodelElementCollection ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class SubmodelElementCollection : ISubmodelElementCollection, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source SubmodelElementCollection(List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, List<ISubmodelElement>) Declaration public SubmodelElementCollection(List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, List<ISubmodelElement> value = null) Parameters Type Name Description System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Collections.Generic.List < ISubmodelElement > value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Submodel element contained in the collection. Declaration public List<ISubmodelElement> Value { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverValueOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < ISubmodelElement > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElementCollection ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.SubmodelElementList.html": {
    "href": "api/AasCore.Aas3_0_RC02.SubmodelElementList.html",
    "title": "Class SubmodelElementList",
    "keywords": "Class SubmodelElementList A submodel element list is an ordered list of submodel elements. Inheritance System.Object SubmodelElementList Implements ISubmodelElementList ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class SubmodelElementList : ISubmodelElementList, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The numbering starts with zero (0). Constraints: Constraint AASd-107: If a first level child element in a SubmodelElementList has a SemanticId it shall be identical to SemanticIdListElement . Constraint AASd-114: If two first level child elements in a SubmodelElementList have a SemanticId then they shall be identical. Constraint AASd-115: If a first level child element in a SubmodelElementList does not specify a SemanticId then the value is assumed to be identical to SemanticIdListElement . Constraint AASd-108: All first level child elements in a SubmodelElementList shall have the same submodel element type as specified in TypeValueListElement . Constraint AASd-109: If TypeValueListElement is equal to Property or Range ValueTypeListElement shall be set and all first level child elements in the SubmodelElementList shall have the value type as specified in ValueTypeListElement . Constructors | Improve this Doc View Source SubmodelElementList(AasSubmodelElements, List<Extension>, String, String, List<LangString>, List<LangString>, String, Nullable<ModelingKind>, Reference, List<Reference>, List<Qualifier>, List<EmbeddedDataSpecification>, Nullable<Boolean>, List<ISubmodelElement>, Reference, Nullable<DataTypeDefXsd>) Declaration public SubmodelElementList(AasSubmodelElements typeValueListElement, List<Extension> extensions = null, string category = null, string idShort = null, List<LangString> displayName = null, List<LangString> description = null, string checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference> supplementalSemanticIds = null, List<Qualifier> qualifiers = null, List<EmbeddedDataSpecification> embeddedDataSpecifications = null, bool? orderRelevant = null, List<ISubmodelElement> value = null, Reference semanticIdListElement = null, DataTypeDefXsd? valueTypeListElement = null) Parameters Type Name Description AasSubmodelElements typeValueListElement System.Collections.Generic.List < Extension > extensions System.String category System.String idShort System.Collections.Generic.List < LangString > displayName System.Collections.Generic.List < LangString > description System.String checksum System.Nullable < ModelingKind > kind Reference semanticId System.Collections.Generic.List < Reference > supplementalSemanticIds System.Collections.Generic.List < Qualifier > qualifiers System.Collections.Generic.List < EmbeddedDataSpecification > embeddedDataSpecifications System.Nullable < System.Boolean > orderRelevant System.Collections.Generic.List < ISubmodelElement > value Reference semanticIdListElement System.Nullable < DataTypeDefXsd > valueTypeListElement Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string Category { get; set; } Property Value Type Description System.String Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string Checksum { get; set; } Property Value Type Description System.String Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString> Description { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString> DisplayName { get; set; } Property Value Type Description System.Collections.Generic.List < LangString > Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification> EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Collections.Generic.List < EmbeddedDataSpecification > | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension> Extensions { get; set; } Property Value Type Description System.Collections.Generic.List < Extension > | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string IdShort { get; set; } Property Value Type Description System.String Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source OrderRelevant Defines whether order in list is relevant. If OrderRelevant = False then the list is representing a set or a bag. Declaration public bool? OrderRelevant { get; set; } Property Value Type Description System.Nullable < System.Boolean > Remarks Default: True | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier> Qualifiers { get; set; } Property Value Type Description System.Collections.Generic.List < Qualifier > Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SemanticIdListElement Semantic ID the submodel elements contained in the list match to. Declaration public Reference SemanticIdListElement { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference> SupplementalSemanticIds { get; set; } Property Value Type Description System.Collections.Generic.List < Reference > Remarks It is recommended to use a global reference. | Improve this Doc View Source TypeValueListElement The submodel element type of the submodel elements contained in the list. Declaration public AasSubmodelElements TypeValueListElement { get; set; } Property Value Type Description AasSubmodelElements | Improve this Doc View Source Value Submodel element contained in the list. Declaration public List<ISubmodelElement> Value { get; set; } Property Value Type Description System.Collections.Generic.List < ISubmodelElement > Remarks The list is ordered. | Improve this Doc View Source ValueTypeListElement The value type of the submodel element contained in the list. Declaration public DataTypeDefXsd? ValueTypeListElement { get; set; } Property Value Type Description System.Nullable < DataTypeDefXsd > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OrderRelevantOrDefault() Return the OrderRelevant or the default value if it has not been set. Declaration public bool OrderRelevantOrDefault() Returns Type Description System.Boolean | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < Reference > | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverValueOrEmpty() Returns Type Description System.Collections.Generic.IEnumerable < ISubmodelElement > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElementList ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.ValueList.html": {
    "href": "api/AasCore.Aas3_0_RC02.ValueList.html",
    "title": "Class ValueList",
    "keywords": "Class ValueList A set of value reference pairs. Inheritance System.Object ValueList Implements IValueList IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ValueList : IValueList, IClass Constructors | Improve this Doc View Source ValueList(List<ValueReferencePair>) Declaration public ValueList(List<ValueReferencePair> valueReferencePairs) Parameters Type Name Description System.Collections.Generic.List < ValueReferencePair > valueReferencePairs Properties | Improve this Doc View Source ValueReferencePairs A pair of a value together with its global unique id. Declaration public List<ValueReferencePair> ValueReferencePairs { get; set; } Property Value Type Description System.Collections.Generic.List < ValueReferencePair > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IValueList IClass"
  },
  "api/AasCore.Aas3_0_RC02.ValueReferencePair.html": {
    "href": "api/AasCore.Aas3_0_RC02.ValueReferencePair.html",
    "title": "Class ValueReferencePair",
    "keywords": "Class ValueReferencePair A value reference pair within a value list. Each value has a global unique id defining its semantic. Inheritance System.Object ValueReferencePair Implements IValueReferencePair IClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ValueReferencePair : IValueReferencePair, IClass Constructors | Improve this Doc View Source ValueReferencePair(String, Reference) Declaration public ValueReferencePair(string value, Reference valueId) Parameters Type Name Description System.String value Reference valueId Properties | Improve this Doc View Source Value The value of the referenced concept definition of the value in valueId. Declaration public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Global unique id of the value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description System.Collections.Generic.IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IValueReferencePair IClass"
  },
  "api/AasCore.Aas3_0_RC02.Verification.html": {
    "href": "api/AasCore.Aas3_0_RC02.Verification.html",
    "title": "Class Verification",
    "keywords": "Class Verification Verify that the instances of the meta-model satisfy the invariants. Inheritance System.Object Verification Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Verification Examples Here is an example how to verify an instance of IHasSemantics: var anInstance = new Aas.IHasSemantics( // ... some constructor arguments ... ); foreach (var error in Verification.Verify(anInstance)) { System.Console.Writeln( $\"{error.Cause} at: \" + Reporting.GenerateJsonPath(error.PathSegments)); } Methods | Improve this Doc View Source DataSpecificationIec61360sForDocumentHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined appropriately for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sForDocumentHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined appropriately for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sForReferenceHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined appropriately for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sForReferenceHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sHaveDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sHaveDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(IEnumerable<EmbeddedDataSpecification>) Check that the Definition is defined for all data specifications whose content is given as IEC 61360 at least in English. Declaration public static bool DataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sHaveValue(IEnumerable<EmbeddedDataSpecification>) Check that the Value is defined for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sHaveValue(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description System.Collections.Generic.IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source ExtensionNamesAreUnique(IEnumerable<Extension>) Check that all Name are unique among extensions . Declaration public static bool ExtensionNamesAreUnique(IEnumerable<Extension> extensions) Parameters Type Name Description System.Collections.Generic.IEnumerable < Extension > extensions Returns Type Description System.Boolean | Improve this Doc View Source IdShortsAreUnique(IEnumerable<IReferable>) Check that all IdShort are unique among referables . Declaration public static bool IdShortsAreUnique(IEnumerable<IReferable> referables) Parameters Type Name Description System.Collections.Generic.IEnumerable < IReferable > referables Returns Type Description System.Boolean | Improve this Doc View Source IsBcp47ForEnglish(String) Check that the text corresponds to a BCP47 code for english. Declaration public static bool IsBcp47ForEnglish(string text) Parameters Type Name Description System.String text Returns Type Description System.Boolean | Improve this Doc View Source IsLeapYear(BigInteger) Check whether the given year is a leap year. Declaration public static bool IsLeapYear(BigInteger year) Parameters Type Name Description System.Numerics.BigInteger year to be checked Returns Type Description System.Boolean True if year is a leap year Remarks Year 1 BCE is a leap year. | Improve this Doc View Source IsModelReferenceTo(Reference, KeyTypes) Check that the target of the model reference matches the expectedType . Declaration public static bool IsModelReferenceTo(Reference reference, KeyTypes expectedType) Parameters Type Name Description Reference reference KeyTypes expectedType Returns Type Description System.Boolean | Improve this Doc View Source IsModelReferenceToReferable(Reference) Check that the target of the reference matches a AasReferables . Declaration public static bool IsModelReferenceToReferable(Reference reference) Parameters Type Name Description Reference reference Returns Type Description System.Boolean | Improve this Doc View Source IsXsDateTimeStampUtc(String) Check that value is a xs:dateTimeStamp with the time zone set to UTC. Declaration public static bool IsXsDateTimeStampUtc(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean | Improve this Doc View Source LangStringsHaveUniqueLanguages(IEnumerable<LangString>) Check that langStrings are specified each for a unique language. Declaration public static bool LangStringsHaveUniqueLanguages(IEnumerable<LangString> langStrings) Parameters Type Name Description System.Collections.Generic.IEnumerable < LangString > langStrings Returns Type Description System.Boolean | Improve this Doc View Source MatchesBcp47(String) Check that text is a valid BCP 47 language tag. Declaration public static bool MatchesBcp47(string text) Parameters Type Name Description System.String text Returns Type Description System.Boolean Remarks See: https://en.wikipedia.org/wiki/IETF_language_tag | Improve this Doc View Source MatchesGlobalAssetIdLiterally(String) Check that the text matches globalAssetId case-insensitive. Declaration public static bool MatchesGlobalAssetIdLiterally(string text) Parameters Type Name Description System.String text which needs to match globalAssetId literally Returns Type Description System.Boolean True if the text matches case-insensitive Remarks The case-insensitivity depends on the culture. For example in Turkish, uppercase \"i\" is \"İ\", not \"I\". We assume the culture to be English, and explicitly check for English case-folding. | Improve this Doc View Source MatchesIdShort(String) Check that text is a valid short ID. Declaration public static bool MatchesIdShort(string text) Parameters Type Name Description System.String text Returns Type Description System.Boolean | Improve this Doc View Source MatchesMimeType(String) Check that text conforms to the pattern of MIME type. Declaration public static bool MatchesMimeType(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks The definition has been taken from: https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1 , https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6 . | Improve this Doc View Source MatchesRfc8089Path(String) Check that text is a path conforming to the pattern of RFC 8089. Declaration public static bool MatchesRfc8089Path(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks The definition has been taken from: https://datatracker.ietf.org/doc/html/rfc8089 | Improve this Doc View Source MatchesXsAnyUri(String) Check that text conforms to the pattern of an xs:anyURI . Declaration public static bool MatchesXsAnyUri(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#anyURI and https://datatracker.ietf.org/doc/html/rfc3987 | Improve this Doc View Source MatchesXsBase64Binary(String) Check that text conforms to the pattern of an xs:base64Binary . Declaration public static bool MatchesXsBase64Binary(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#base64Binary | Improve this Doc View Source MatchesXsBoolean(String) Check that text conforms to the pattern of an xs:boolean . Declaration public static bool MatchesXsBoolean(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#boolean | Improve this Doc View Source MatchesXsByte(String) Check that text conforms to the pattern of an xs:byte . Declaration public static bool MatchesXsByte(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#byte | Improve this Doc View Source MatchesXsDate(String) Check that text conforms to the pattern of an xs:date . Declaration public static bool MatchesXsDate(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#date | Improve this Doc View Source MatchesXsDateTime(String) Check that text conforms to the pattern of an xs:dateTime . Declaration public static bool MatchesXsDateTime(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#dateTime | Improve this Doc View Source MatchesXsDateTimeStamp(String) Check that text conforms to the pattern of an xs:dateTimeStamp . Declaration public static bool MatchesXsDateTimeStamp(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp | Improve this Doc View Source MatchesXsDateTimeStampUtc(String) Check that text conforms to the pattern of an xs:dateTimeStamp . Declaration public static bool MatchesXsDateTimeStampUtc(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks The time zone must be fixed to UTC. We verify only that the text matches a pre-defined pattern. We do not verify that the day of month is correct nor do we check for leap seconds. See: https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp | Improve this Doc View Source MatchesXsDayTimeDuration(String) Check that text conforms to the pattern of an xs:dayTimeDuration . Declaration public static bool MatchesXsDayTimeDuration(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#dayTimeDuration | Improve this Doc View Source MatchesXsDecimal(String) Check that text conforms to the pattern of an xs:decimal . Declaration public static bool MatchesXsDecimal(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#decimal | Improve this Doc View Source MatchesXsDouble(String) Check that text conforms to the pattern of an xs:double . Declaration public static bool MatchesXsDouble(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#double | Improve this Doc View Source MatchesXsDuration(String) Check that text conforms to the pattern of an xs:duration . Declaration public static bool MatchesXsDuration(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#duration | Improve this Doc View Source MatchesXsFloat(String) Check that text conforms to the pattern of an xs:float . Declaration public static bool MatchesXsFloat(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#float | Improve this Doc View Source MatchesXsGDay(String) Check that text conforms to the pattern of an xs:gDay . Declaration public static bool MatchesXsGDay(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gDay | Improve this Doc View Source MatchesXsGMonth(String) Check that text conforms to the pattern of an xs:gMonth . Declaration public static bool MatchesXsGMonth(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gMonth | Improve this Doc View Source MatchesXsGMonthDay(String) Check that text conforms to the pattern of an xs:gMonthDay . Declaration public static bool MatchesXsGMonthDay(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gMonthDay | Improve this Doc View Source MatchesXsGYear(String) Check that text conforms to the pattern of an xs:gYear . Declaration public static bool MatchesXsGYear(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gYear | Improve this Doc View Source MatchesXsGYearMonth(String) Check that text conforms to the pattern of an xs:gYearMonth . Declaration public static bool MatchesXsGYearMonth(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gYearMonth | Improve this Doc View Source MatchesXsHexBinary(String) Check that text conforms to the pattern of an xs:hexBinary . Declaration public static bool MatchesXsHexBinary(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#hexBinary | Improve this Doc View Source MatchesXsInt(String) Check that text conforms to the pattern of an xs:int . Declaration public static bool MatchesXsInt(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#int | Improve this Doc View Source MatchesXsInteger(String) Check that text conforms to the pattern of an xs:integer . Declaration public static bool MatchesXsInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#integer | Improve this Doc View Source MatchesXsLong(String) Check that text conforms to the pattern of an xs:long . Declaration public static bool MatchesXsLong(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#long | Improve this Doc View Source MatchesXsNegativeInteger(String) Check that text conforms to the pattern of an xs:negativeInteger . Declaration public static bool MatchesXsNegativeInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#negativeInteger | Improve this Doc View Source MatchesXsNonNegativeInteger(String) Check that text conforms to the pattern of an xs:nonNegativeInteger . Declaration public static bool MatchesXsNonNegativeInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger | Improve this Doc View Source MatchesXsNonPositiveInteger(String) Check that text conforms to the pattern of an xs:nonPositiveInteger . Declaration public static bool MatchesXsNonPositiveInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#nonPositiveInteger | Improve this Doc View Source MatchesXsPositiveInteger(String) Check that text conforms to the pattern of an xs:positiveInteger . Declaration public static bool MatchesXsPositiveInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#positiveInteger | Improve this Doc View Source MatchesXsShort(String) Check that text conforms to the pattern of an xs:short . Declaration public static bool MatchesXsShort(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#short | Improve this Doc View Source MatchesXsString(String) Check that text conforms to the pattern of an xs:string . Declaration public static bool MatchesXsString(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#string | Improve this Doc View Source MatchesXsTime(String) Check that text conforms to the pattern of an xs:time . Declaration public static bool MatchesXsTime(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#time | Improve this Doc View Source MatchesXsUnsignedByte(String) Check that text conforms to the pattern of an xs:unsignedByte . Declaration public static bool MatchesXsUnsignedByte(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedByte | Improve this Doc View Source MatchesXsUnsignedInt(String) Check that text conforms to the pattern of an xs:unsignedInt . Declaration public static bool MatchesXsUnsignedInt(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedInt | Improve this Doc View Source MatchesXsUnsignedLong(String) Check that text conforms to the pattern of an xs:unsignedLong . Declaration public static bool MatchesXsUnsignedLong(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedLong | Improve this Doc View Source MatchesXsUnsignedShort(String) Check that text conforms to the pattern of an xs:unsignedShort . Declaration public static bool MatchesXsUnsignedShort(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedShort | Improve this Doc View Source MatchesXsYearMonthDuration(String) Check that text conforms to the pattern of an xs:yearMonthDuration . Declaration public static bool MatchesXsYearMonthDuration(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#yearMonthDuration | Improve this Doc View Source PropertiesOrRangesHaveValueType(IEnumerable<ISubmodelElement>, Nullable<DataTypeDefXsd>) Check that the elements which are Property or Range have the given valueType . Declaration public static bool PropertiesOrRangesHaveValueType(IEnumerable<ISubmodelElement> elements, DataTypeDefXsd? valueType) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISubmodelElement > elements System.Nullable < DataTypeDefXsd > valueType Returns Type Description System.Boolean Remarks We have to use nullable valueType since the compiler does not really handle nullable C# value types. See https://endjin.com/blog/2022/02/csharp-10-generics-nullable-references-improvements-allownull | Improve this Doc View Source QualifierTypesAreUnique(IEnumerable<Qualifier>) Check that there are no duplicate Type 's in the qualifiers . Declaration public static bool QualifierTypesAreUnique(IEnumerable<Qualifier> qualifiers) Parameters Type Name Description System.Collections.Generic.IEnumerable < Qualifier > qualifiers Returns Type Description System.Boolean | Improve this Doc View Source ReferenceKeyValuesEqual(Reference, Reference) Check that the two references, that and other , are equal by comparing their Keys by Value 's. Declaration public static bool ReferenceKeyValuesEqual(Reference that, Reference other) Parameters Type Name Description Reference that Reference other Returns Type Description System.Boolean | Improve this Doc View Source SubmodelElementIsOfType(ISubmodelElement, AasSubmodelElements) Declaration public static bool SubmodelElementIsOfType(ISubmodelElement element, AasSubmodelElements expectedType) Parameters Type Name Description ISubmodelElement element AasSubmodelElements expectedType Returns Type Description System.Boolean | Improve this Doc View Source SubmodelElementsHaveIdenticalSemanticIds(IEnumerable<ISubmodelElement>) Check that all elements have the identical SemanticId 's. Declaration public static bool SubmodelElementsHaveIdenticalSemanticIds(IEnumerable<ISubmodelElement> elements) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISubmodelElement > elements Returns Type Description System.Boolean | Improve this Doc View Source ValueConsistentWithXsdType(String, DataTypeDefXsd) Check that the value is consistent with the given valueType . Declaration public static bool ValueConsistentWithXsdType(string value, DataTypeDefXsd valueType) Parameters Type Name Description System.String value DataTypeDefXsd valueType Returns Type Description System.Boolean | Improve this Doc View Source Verify(IClass) Verify the constraints of that recursively. Declaration public static IEnumerable<Reporting.Error> Verify(IClass that) Parameters Type Name Description IClass that The instance of the meta-model to be verified Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyAasSubmodelElements(AasSubmodelElements) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyAasSubmodelElements(AasSubmodelElements that) Parameters Type Name Description AasSubmodelElements that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyAssetKind(AssetKind) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyAssetKind(AssetKind that) Parameters Type Name Description AssetKind that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyBcp47LanguageTag(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyBcp47LanguageTag(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyBlobType(Byte[]) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyBlobType(byte[] that) Parameters Type Name Description System.Byte [] that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyContentType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyContentType(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDataTypeDefXsd(DataTypeDefXsd) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyDataTypeDefXsd(DataTypeDefXsd that) Parameters Type Name Description DataTypeDefXsd that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDataTypeIec61360(DataTypeIec61360) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyDataTypeIec61360(DataTypeIec61360 that) Parameters Type Name Description DataTypeIec61360 that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDateTimeStampUtc(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyDateTimeStampUtc(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDirection(Direction) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyDirection(Direction that) Parameters Type Name Description Direction that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyEntityType(EntityType) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyEntityType(EntityType that) Parameters Type Name Description EntityType that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyIdentifier(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyIdentifier(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyIdShort(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyIdShort(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyKeyTypes(KeyTypes) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyKeyTypes(KeyTypes that) Parameters Type Name Description KeyTypes that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyLevelType(LevelType) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyLevelType(LevelType that) Parameters Type Name Description LevelType that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyModelingKind(ModelingKind) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyModelingKind(ModelingKind that) Parameters Type Name Description ModelingKind that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyNonEmptyString(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyNonEmptyString(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyPathType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyPathType(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyQualifierKind(QualifierKind) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyQualifierKind(QualifierKind that) Parameters Type Name Description QualifierKind that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyQualifierType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyQualifierType(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyReferenceTypes(ReferenceTypes) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyReferenceTypes(ReferenceTypes that) Parameters Type Name Description ReferenceTypes that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyStateOfEvent(StateOfEvent) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyStateOfEvent(StateOfEvent that) Parameters Type Name Description StateOfEvent that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyValueDataType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyValueDataType(string that) Parameters Type Name Description System.String that Returns Type Description System.Collections.Generic.IEnumerable < Reporting.Error >"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformer-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformer-1.html",
    "title": "Class Visitation.AbstractTransformer<T>",
    "keywords": "Class Visitation.AbstractTransformer<T> Perform double-dispatch to transform recursively the instances into something else. Inheritance System.Object Visitation.AbstractTransformer<T> Implements Visitation.ITransformer <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractTransformer<T> : Visitation.ITransformer<T> Type Parameters Name Description T The type of the transformation result Methods | Improve this Doc View Source Transform(IClass) Declaration public T Transform(IClass that) Parameters Type Name Description IClass that Returns Type Description T | Improve this Doc View Source TransformAdministrativeInformation(IAdministrativeInformation) Declaration public abstract T TransformAdministrativeInformation(IAdministrativeInformation that) Parameters Type Name Description IAdministrativeInformation that Returns Type Description T | Improve this Doc View Source TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement) Declaration public abstract T TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement that) Parameters Type Name Description IAnnotatedRelationshipElement that Returns Type Description T | Improve this Doc View Source TransformAssetAdministrationShell(IAssetAdministrationShell) Declaration public abstract T TransformAssetAdministrationShell(IAssetAdministrationShell that) Parameters Type Name Description IAssetAdministrationShell that Returns Type Description T | Improve this Doc View Source TransformAssetInformation(IAssetInformation) Declaration public abstract T TransformAssetInformation(IAssetInformation that) Parameters Type Name Description IAssetInformation that Returns Type Description T | Improve this Doc View Source TransformBasicEventElement(IBasicEventElement) Declaration public abstract T TransformBasicEventElement(IBasicEventElement that) Parameters Type Name Description IBasicEventElement that Returns Type Description T | Improve this Doc View Source TransformBlob(IBlob) Declaration public abstract T TransformBlob(IBlob that) Parameters Type Name Description IBlob that Returns Type Description T | Improve this Doc View Source TransformCapability(ICapability) Declaration public abstract T TransformCapability(ICapability that) Parameters Type Name Description ICapability that Returns Type Description T | Improve this Doc View Source TransformConceptDescription(IConceptDescription) Declaration public abstract T TransformConceptDescription(IConceptDescription that) Parameters Type Name Description IConceptDescription that Returns Type Description T | Improve this Doc View Source TransformDataSpecificationIec61360(IDataSpecificationIec61360) Declaration public abstract T TransformDataSpecificationIec61360(IDataSpecificationIec61360 that) Parameters Type Name Description IDataSpecificationIec61360 that Returns Type Description T | Improve this Doc View Source TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit) Declaration public abstract T TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that) Parameters Type Name Description IDataSpecificationPhysicalUnit that Returns Type Description T | Improve this Doc View Source TransformEmbeddedDataSpecification(IEmbeddedDataSpecification) Declaration public abstract T TransformEmbeddedDataSpecification(IEmbeddedDataSpecification that) Parameters Type Name Description IEmbeddedDataSpecification that Returns Type Description T | Improve this Doc View Source TransformEntity(IEntity) Declaration public abstract T TransformEntity(IEntity that) Parameters Type Name Description IEntity that Returns Type Description T | Improve this Doc View Source TransformEnvironment(IEnvironment) Declaration public abstract T TransformEnvironment(IEnvironment that) Parameters Type Name Description IEnvironment that Returns Type Description T | Improve this Doc View Source TransformEventPayload(IEventPayload) Declaration public abstract T TransformEventPayload(IEventPayload that) Parameters Type Name Description IEventPayload that Returns Type Description T | Improve this Doc View Source TransformExtension(IExtension) Declaration public abstract T TransformExtension(IExtension that) Parameters Type Name Description IExtension that Returns Type Description T | Improve this Doc View Source TransformFile(IFile) Declaration public abstract T TransformFile(IFile that) Parameters Type Name Description IFile that Returns Type Description T | Improve this Doc View Source TransformKey(IKey) Declaration public abstract T TransformKey(IKey that) Parameters Type Name Description IKey that Returns Type Description T | Improve this Doc View Source TransformLangString(ILangString) Declaration public abstract T TransformLangString(ILangString that) Parameters Type Name Description ILangString that Returns Type Description T | Improve this Doc View Source TransformMultiLanguageProperty(IMultiLanguageProperty) Declaration public abstract T TransformMultiLanguageProperty(IMultiLanguageProperty that) Parameters Type Name Description IMultiLanguageProperty that Returns Type Description T | Improve this Doc View Source TransformOperation(IOperation) Declaration public abstract T TransformOperation(IOperation that) Parameters Type Name Description IOperation that Returns Type Description T | Improve this Doc View Source TransformOperationVariable(IOperationVariable) Declaration public abstract T TransformOperationVariable(IOperationVariable that) Parameters Type Name Description IOperationVariable that Returns Type Description T | Improve this Doc View Source TransformProperty(IProperty) Declaration public abstract T TransformProperty(IProperty that) Parameters Type Name Description IProperty that Returns Type Description T | Improve this Doc View Source TransformQualifier(IQualifier) Declaration public abstract T TransformQualifier(IQualifier that) Parameters Type Name Description IQualifier that Returns Type Description T | Improve this Doc View Source TransformRange(IRange) Declaration public abstract T TransformRange(IRange that) Parameters Type Name Description IRange that Returns Type Description T | Improve this Doc View Source TransformReference(IReference) Declaration public abstract T TransformReference(IReference that) Parameters Type Name Description IReference that Returns Type Description T | Improve this Doc View Source TransformReferenceElement(IReferenceElement) Declaration public abstract T TransformReferenceElement(IReferenceElement that) Parameters Type Name Description IReferenceElement that Returns Type Description T | Improve this Doc View Source TransformRelationshipElement(IRelationshipElement) Declaration public abstract T TransformRelationshipElement(IRelationshipElement that) Parameters Type Name Description IRelationshipElement that Returns Type Description T | Improve this Doc View Source TransformResource(IResource) Declaration public abstract T TransformResource(IResource that) Parameters Type Name Description IResource that Returns Type Description T | Improve this Doc View Source TransformSpecificAssetId(ISpecificAssetId) Declaration public abstract T TransformSpecificAssetId(ISpecificAssetId that) Parameters Type Name Description ISpecificAssetId that Returns Type Description T | Improve this Doc View Source TransformSubmodel(ISubmodel) Declaration public abstract T TransformSubmodel(ISubmodel that) Parameters Type Name Description ISubmodel that Returns Type Description T | Improve this Doc View Source TransformSubmodelElementCollection(ISubmodelElementCollection) Declaration public abstract T TransformSubmodelElementCollection(ISubmodelElementCollection that) Parameters Type Name Description ISubmodelElementCollection that Returns Type Description T | Improve this Doc View Source TransformSubmodelElementList(ISubmodelElementList) Declaration public abstract T TransformSubmodelElementList(ISubmodelElementList that) Parameters Type Name Description ISubmodelElementList that Returns Type Description T | Improve this Doc View Source TransformValueList(IValueList) Declaration public abstract T TransformValueList(IValueList that) Parameters Type Name Description IValueList that Returns Type Description T | Improve this Doc View Source TransformValueReferencePair(IValueReferencePair) Declaration public abstract T TransformValueReferencePair(IValueReferencePair that) Parameters Type Name Description IValueReferencePair that Returns Type Description T Implements Visitation.ITransformer<T>"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformerWithContext-2.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformerWithContext-2.html",
    "title": "Class Visitation.AbstractTransformerWithContext<TContext, T>",
    "keywords": "Class Visitation.AbstractTransformerWithContext<TContext, T> Perform double-dispatch to transform recursively the instances into something else. Inheritance System.Object Visitation.AbstractTransformerWithContext<TContext, T> Implements Visitation.ITransformerWithContext <TContext, T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractTransformerWithContext<TContext, T> : Visitation.ITransformerWithContext<TContext, T> Type Parameters Name Description TContext The type of the transformation context T The type of the transformation result Remarks When you use the transformer, please always call the main dispatching method Transform(IClass, TContext) . You should most probably never call the Transform* methods directly. They are only made public so that model classes can access them. Methods | Improve this Doc View Source Transform(IClass, TContext) Declaration public T Transform(IClass that, TContext context) Parameters Type Name Description IClass that TContext context Returns Type Description T | Improve this Doc View Source TransformAdministrativeInformation(IAdministrativeInformation, TContext) Declaration public abstract T TransformAdministrativeInformation(IAdministrativeInformation that, TContext context) Parameters Type Name Description IAdministrativeInformation that TContext context Returns Type Description T | Improve this Doc View Source TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement, TContext) Declaration public abstract T TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement that, TContext context) Parameters Type Name Description IAnnotatedRelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source TransformAssetAdministrationShell(IAssetAdministrationShell, TContext) Declaration public abstract T TransformAssetAdministrationShell(IAssetAdministrationShell that, TContext context) Parameters Type Name Description IAssetAdministrationShell that TContext context Returns Type Description T | Improve this Doc View Source TransformAssetInformation(IAssetInformation, TContext) Declaration public abstract T TransformAssetInformation(IAssetInformation that, TContext context) Parameters Type Name Description IAssetInformation that TContext context Returns Type Description T | Improve this Doc View Source TransformBasicEventElement(IBasicEventElement, TContext) Declaration public abstract T TransformBasicEventElement(IBasicEventElement that, TContext context) Parameters Type Name Description IBasicEventElement that TContext context Returns Type Description T | Improve this Doc View Source TransformBlob(IBlob, TContext) Declaration public abstract T TransformBlob(IBlob that, TContext context) Parameters Type Name Description IBlob that TContext context Returns Type Description T | Improve this Doc View Source TransformCapability(ICapability, TContext) Declaration public abstract T TransformCapability(ICapability that, TContext context) Parameters Type Name Description ICapability that TContext context Returns Type Description T | Improve this Doc View Source TransformConceptDescription(IConceptDescription, TContext) Declaration public abstract T TransformConceptDescription(IConceptDescription that, TContext context) Parameters Type Name Description IConceptDescription that TContext context Returns Type Description T | Improve this Doc View Source TransformDataSpecificationIec61360(IDataSpecificationIec61360, TContext) Declaration public abstract T TransformDataSpecificationIec61360(IDataSpecificationIec61360 that, TContext context) Parameters Type Name Description IDataSpecificationIec61360 that TContext context Returns Type Description T | Improve this Doc View Source TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit, TContext) Declaration public abstract T TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description IDataSpecificationPhysicalUnit that TContext context Returns Type Description T | Improve this Doc View Source TransformEmbeddedDataSpecification(IEmbeddedDataSpecification, TContext) Declaration public abstract T TransformEmbeddedDataSpecification(IEmbeddedDataSpecification that, TContext context) Parameters Type Name Description IEmbeddedDataSpecification that TContext context Returns Type Description T | Improve this Doc View Source TransformEntity(IEntity, TContext) Declaration public abstract T TransformEntity(IEntity that, TContext context) Parameters Type Name Description IEntity that TContext context Returns Type Description T | Improve this Doc View Source TransformEnvironment(IEnvironment, TContext) Declaration public abstract T TransformEnvironment(IEnvironment that, TContext context) Parameters Type Name Description IEnvironment that TContext context Returns Type Description T | Improve this Doc View Source TransformEventPayload(IEventPayload, TContext) Declaration public abstract T TransformEventPayload(IEventPayload that, TContext context) Parameters Type Name Description IEventPayload that TContext context Returns Type Description T | Improve this Doc View Source TransformExtension(IExtension, TContext) Declaration public abstract T TransformExtension(IExtension that, TContext context) Parameters Type Name Description IExtension that TContext context Returns Type Description T | Improve this Doc View Source TransformFile(IFile, TContext) Declaration public abstract T TransformFile(IFile that, TContext context) Parameters Type Name Description IFile that TContext context Returns Type Description T | Improve this Doc View Source TransformKey(IKey, TContext) Declaration public abstract T TransformKey(IKey that, TContext context) Parameters Type Name Description IKey that TContext context Returns Type Description T | Improve this Doc View Source TransformLangString(ILangString, TContext) Declaration public abstract T TransformLangString(ILangString that, TContext context) Parameters Type Name Description ILangString that TContext context Returns Type Description T | Improve this Doc View Source TransformMultiLanguageProperty(IMultiLanguageProperty, TContext) Declaration public abstract T TransformMultiLanguageProperty(IMultiLanguageProperty that, TContext context) Parameters Type Name Description IMultiLanguageProperty that TContext context Returns Type Description T | Improve this Doc View Source TransformOperation(IOperation, TContext) Declaration public abstract T TransformOperation(IOperation that, TContext context) Parameters Type Name Description IOperation that TContext context Returns Type Description T | Improve this Doc View Source TransformOperationVariable(IOperationVariable, TContext) Declaration public abstract T TransformOperationVariable(IOperationVariable that, TContext context) Parameters Type Name Description IOperationVariable that TContext context Returns Type Description T | Improve this Doc View Source TransformProperty(IProperty, TContext) Declaration public abstract T TransformProperty(IProperty that, TContext context) Parameters Type Name Description IProperty that TContext context Returns Type Description T | Improve this Doc View Source TransformQualifier(IQualifier, TContext) Declaration public abstract T TransformQualifier(IQualifier that, TContext context) Parameters Type Name Description IQualifier that TContext context Returns Type Description T | Improve this Doc View Source TransformRange(IRange, TContext) Declaration public abstract T TransformRange(IRange that, TContext context) Parameters Type Name Description IRange that TContext context Returns Type Description T | Improve this Doc View Source TransformReference(IReference, TContext) Declaration public abstract T TransformReference(IReference that, TContext context) Parameters Type Name Description IReference that TContext context Returns Type Description T | Improve this Doc View Source TransformReferenceElement(IReferenceElement, TContext) Declaration public abstract T TransformReferenceElement(IReferenceElement that, TContext context) Parameters Type Name Description IReferenceElement that TContext context Returns Type Description T | Improve this Doc View Source TransformRelationshipElement(IRelationshipElement, TContext) Declaration public abstract T TransformRelationshipElement(IRelationshipElement that, TContext context) Parameters Type Name Description IRelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source TransformResource(IResource, TContext) Declaration public abstract T TransformResource(IResource that, TContext context) Parameters Type Name Description IResource that TContext context Returns Type Description T | Improve this Doc View Source TransformSpecificAssetId(ISpecificAssetId, TContext) Declaration public abstract T TransformSpecificAssetId(ISpecificAssetId that, TContext context) Parameters Type Name Description ISpecificAssetId that TContext context Returns Type Description T | Improve this Doc View Source TransformSubmodel(ISubmodel, TContext) Declaration public abstract T TransformSubmodel(ISubmodel that, TContext context) Parameters Type Name Description ISubmodel that TContext context Returns Type Description T | Improve this Doc View Source TransformSubmodelElementCollection(ISubmodelElementCollection, TContext) Declaration public abstract T TransformSubmodelElementCollection(ISubmodelElementCollection that, TContext context) Parameters Type Name Description ISubmodelElementCollection that TContext context Returns Type Description T | Improve this Doc View Source TransformSubmodelElementList(ISubmodelElementList, TContext) Declaration public abstract T TransformSubmodelElementList(ISubmodelElementList that, TContext context) Parameters Type Name Description ISubmodelElementList that TContext context Returns Type Description T | Improve this Doc View Source TransformValueList(IValueList, TContext) Declaration public abstract T TransformValueList(IValueList that, TContext context) Parameters Type Name Description IValueList that TContext context Returns Type Description T | Improve this Doc View Source TransformValueReferencePair(IValueReferencePair, TContext) Declaration public abstract T TransformValueReferencePair(IValueReferencePair that, TContext context) Parameters Type Name Description IValueReferencePair that TContext context Returns Type Description T Implements Visitation.ITransformerWithContext<TContext, T>"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitor.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitor.html",
    "title": "Class Visitation.AbstractVisitor",
    "keywords": "Class Visitation.AbstractVisitor Perform double-dispatch to visit the concrete instances. Inheritance System.Object Visitation.AbstractVisitor Implements Visitation.IVisitor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractVisitor : Visitation.IVisitor Methods | Improve this Doc View Source Visit(IClass) Declaration public virtual void Visit(IClass that) Parameters Type Name Description IClass that | Improve this Doc View Source VisitAdministrativeInformation(IAdministrativeInformation) Declaration public abstract void VisitAdministrativeInformation(IAdministrativeInformation that) Parameters Type Name Description IAdministrativeInformation that | Improve this Doc View Source VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement) Declaration public abstract void VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement that) Parameters Type Name Description IAnnotatedRelationshipElement that | Improve this Doc View Source VisitAssetAdministrationShell(IAssetAdministrationShell) Declaration public abstract void VisitAssetAdministrationShell(IAssetAdministrationShell that) Parameters Type Name Description IAssetAdministrationShell that | Improve this Doc View Source VisitAssetInformation(IAssetInformation) Declaration public abstract void VisitAssetInformation(IAssetInformation that) Parameters Type Name Description IAssetInformation that | Improve this Doc View Source VisitBasicEventElement(IBasicEventElement) Declaration public abstract void VisitBasicEventElement(IBasicEventElement that) Parameters Type Name Description IBasicEventElement that | Improve this Doc View Source VisitBlob(IBlob) Declaration public abstract void VisitBlob(IBlob that) Parameters Type Name Description IBlob that | Improve this Doc View Source VisitCapability(ICapability) Declaration public abstract void VisitCapability(ICapability that) Parameters Type Name Description ICapability that | Improve this Doc View Source VisitConceptDescription(IConceptDescription) Declaration public abstract void VisitConceptDescription(IConceptDescription that) Parameters Type Name Description IConceptDescription that | Improve this Doc View Source VisitDataSpecificationIec61360(IDataSpecificationIec61360) Declaration public abstract void VisitDataSpecificationIec61360(IDataSpecificationIec61360 that) Parameters Type Name Description IDataSpecificationIec61360 that | Improve this Doc View Source VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit) Declaration public abstract void VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that) Parameters Type Name Description IDataSpecificationPhysicalUnit that | Improve this Doc View Source VisitEmbeddedDataSpecification(IEmbeddedDataSpecification) Declaration public abstract void VisitEmbeddedDataSpecification(IEmbeddedDataSpecification that) Parameters Type Name Description IEmbeddedDataSpecification that | Improve this Doc View Source VisitEntity(IEntity) Declaration public abstract void VisitEntity(IEntity that) Parameters Type Name Description IEntity that | Improve this Doc View Source VisitEnvironment(IEnvironment) Declaration public abstract void VisitEnvironment(IEnvironment that) Parameters Type Name Description IEnvironment that | Improve this Doc View Source VisitEventPayload(IEventPayload) Declaration public abstract void VisitEventPayload(IEventPayload that) Parameters Type Name Description IEventPayload that | Improve this Doc View Source VisitExtension(IExtension) Declaration public abstract void VisitExtension(IExtension that) Parameters Type Name Description IExtension that | Improve this Doc View Source VisitFile(IFile) Declaration public abstract void VisitFile(IFile that) Parameters Type Name Description IFile that | Improve this Doc View Source VisitKey(IKey) Declaration public abstract void VisitKey(IKey that) Parameters Type Name Description IKey that | Improve this Doc View Source VisitLangString(ILangString) Declaration public abstract void VisitLangString(ILangString that) Parameters Type Name Description ILangString that | Improve this Doc View Source VisitMultiLanguageProperty(IMultiLanguageProperty) Declaration public abstract void VisitMultiLanguageProperty(IMultiLanguageProperty that) Parameters Type Name Description IMultiLanguageProperty that | Improve this Doc View Source VisitOperation(IOperation) Declaration public abstract void VisitOperation(IOperation that) Parameters Type Name Description IOperation that | Improve this Doc View Source VisitOperationVariable(IOperationVariable) Declaration public abstract void VisitOperationVariable(IOperationVariable that) Parameters Type Name Description IOperationVariable that | Improve this Doc View Source VisitProperty(IProperty) Declaration public abstract void VisitProperty(IProperty that) Parameters Type Name Description IProperty that | Improve this Doc View Source VisitQualifier(IQualifier) Declaration public abstract void VisitQualifier(IQualifier that) Parameters Type Name Description IQualifier that | Improve this Doc View Source VisitRange(IRange) Declaration public abstract void VisitRange(IRange that) Parameters Type Name Description IRange that | Improve this Doc View Source VisitReference(IReference) Declaration public abstract void VisitReference(IReference that) Parameters Type Name Description IReference that | Improve this Doc View Source VisitReferenceElement(IReferenceElement) Declaration public abstract void VisitReferenceElement(IReferenceElement that) Parameters Type Name Description IReferenceElement that | Improve this Doc View Source VisitRelationshipElement(IRelationshipElement) Declaration public abstract void VisitRelationshipElement(IRelationshipElement that) Parameters Type Name Description IRelationshipElement that | Improve this Doc View Source VisitResource(IResource) Declaration public abstract void VisitResource(IResource that) Parameters Type Name Description IResource that | Improve this Doc View Source VisitSpecificAssetId(ISpecificAssetId) Declaration public abstract void VisitSpecificAssetId(ISpecificAssetId that) Parameters Type Name Description ISpecificAssetId that | Improve this Doc View Source VisitSubmodel(ISubmodel) Declaration public abstract void VisitSubmodel(ISubmodel that) Parameters Type Name Description ISubmodel that | Improve this Doc View Source VisitSubmodelElementCollection(ISubmodelElementCollection) Declaration public abstract void VisitSubmodelElementCollection(ISubmodelElementCollection that) Parameters Type Name Description ISubmodelElementCollection that | Improve this Doc View Source VisitSubmodelElementList(ISubmodelElementList) Declaration public abstract void VisitSubmodelElementList(ISubmodelElementList that) Parameters Type Name Description ISubmodelElementList that | Improve this Doc View Source VisitValueList(IValueList) Declaration public abstract void VisitValueList(IValueList that) Parameters Type Name Description IValueList that | Improve this Doc View Source VisitValueReferencePair(IValueReferencePair) Declaration public abstract void VisitValueReferencePair(IValueReferencePair that) Parameters Type Name Description IValueReferencePair that Implements Visitation.IVisitor"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitorWithContext-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitorWithContext-1.html",
    "title": "Class Visitation.AbstractVisitorWithContext<TContext>",
    "keywords": "Class Visitation.AbstractVisitorWithContext<TContext> Perform double-dispatch to visit the concrete instances with context. Inheritance System.Object Visitation.AbstractVisitorWithContext<TContext> Implements Visitation.IVisitorWithContext <TContext> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractVisitorWithContext<TContext> : Visitation.IVisitorWithContext<TContext> Type Parameters Name Description TContext Context type Methods | Improve this Doc View Source Visit(IClass, TContext) Declaration public void Visit(IClass that, TContext context) Parameters Type Name Description IClass that TContext context | Improve this Doc View Source VisitAdministrativeInformation(IAdministrativeInformation, TContext) Declaration public abstract void VisitAdministrativeInformation(IAdministrativeInformation that, TContext context) Parameters Type Name Description IAdministrativeInformation that TContext context | Improve this Doc View Source VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement, TContext) Declaration public abstract void VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement that, TContext context) Parameters Type Name Description IAnnotatedRelationshipElement that TContext context | Improve this Doc View Source VisitAssetAdministrationShell(IAssetAdministrationShell, TContext) Declaration public abstract void VisitAssetAdministrationShell(IAssetAdministrationShell that, TContext context) Parameters Type Name Description IAssetAdministrationShell that TContext context | Improve this Doc View Source VisitAssetInformation(IAssetInformation, TContext) Declaration public abstract void VisitAssetInformation(IAssetInformation that, TContext context) Parameters Type Name Description IAssetInformation that TContext context | Improve this Doc View Source VisitBasicEventElement(IBasicEventElement, TContext) Declaration public abstract void VisitBasicEventElement(IBasicEventElement that, TContext context) Parameters Type Name Description IBasicEventElement that TContext context | Improve this Doc View Source VisitBlob(IBlob, TContext) Declaration public abstract void VisitBlob(IBlob that, TContext context) Parameters Type Name Description IBlob that TContext context | Improve this Doc View Source VisitCapability(ICapability, TContext) Declaration public abstract void VisitCapability(ICapability that, TContext context) Parameters Type Name Description ICapability that TContext context | Improve this Doc View Source VisitConceptDescription(IConceptDescription, TContext) Declaration public abstract void VisitConceptDescription(IConceptDescription that, TContext context) Parameters Type Name Description IConceptDescription that TContext context | Improve this Doc View Source VisitDataSpecificationIec61360(IDataSpecificationIec61360, TContext) Declaration public abstract void VisitDataSpecificationIec61360(IDataSpecificationIec61360 that, TContext context) Parameters Type Name Description IDataSpecificationIec61360 that TContext context | Improve this Doc View Source VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit, TContext) Declaration public abstract void VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description IDataSpecificationPhysicalUnit that TContext context | Improve this Doc View Source VisitEmbeddedDataSpecification(IEmbeddedDataSpecification, TContext) Declaration public abstract void VisitEmbeddedDataSpecification(IEmbeddedDataSpecification that, TContext context) Parameters Type Name Description IEmbeddedDataSpecification that TContext context | Improve this Doc View Source VisitEntity(IEntity, TContext) Declaration public abstract void VisitEntity(IEntity that, TContext context) Parameters Type Name Description IEntity that TContext context | Improve this Doc View Source VisitEnvironment(IEnvironment, TContext) Declaration public abstract void VisitEnvironment(IEnvironment that, TContext context) Parameters Type Name Description IEnvironment that TContext context | Improve this Doc View Source VisitEventPayload(IEventPayload, TContext) Declaration public abstract void VisitEventPayload(IEventPayload that, TContext context) Parameters Type Name Description IEventPayload that TContext context | Improve this Doc View Source VisitExtension(IExtension, TContext) Declaration public abstract void VisitExtension(IExtension that, TContext context) Parameters Type Name Description IExtension that TContext context | Improve this Doc View Source VisitFile(IFile, TContext) Declaration public abstract void VisitFile(IFile that, TContext context) Parameters Type Name Description IFile that TContext context | Improve this Doc View Source VisitKey(IKey, TContext) Declaration public abstract void VisitKey(IKey that, TContext context) Parameters Type Name Description IKey that TContext context | Improve this Doc View Source VisitLangString(ILangString, TContext) Declaration public abstract void VisitLangString(ILangString that, TContext context) Parameters Type Name Description ILangString that TContext context | Improve this Doc View Source VisitMultiLanguageProperty(IMultiLanguageProperty, TContext) Declaration public abstract void VisitMultiLanguageProperty(IMultiLanguageProperty that, TContext context) Parameters Type Name Description IMultiLanguageProperty that TContext context | Improve this Doc View Source VisitOperation(IOperation, TContext) Declaration public abstract void VisitOperation(IOperation that, TContext context) Parameters Type Name Description IOperation that TContext context | Improve this Doc View Source VisitOperationVariable(IOperationVariable, TContext) Declaration public abstract void VisitOperationVariable(IOperationVariable that, TContext context) Parameters Type Name Description IOperationVariable that TContext context | Improve this Doc View Source VisitProperty(IProperty, TContext) Declaration public abstract void VisitProperty(IProperty that, TContext context) Parameters Type Name Description IProperty that TContext context | Improve this Doc View Source VisitQualifier(IQualifier, TContext) Declaration public abstract void VisitQualifier(IQualifier that, TContext context) Parameters Type Name Description IQualifier that TContext context | Improve this Doc View Source VisitRange(IRange, TContext) Declaration public abstract void VisitRange(IRange that, TContext context) Parameters Type Name Description IRange that TContext context | Improve this Doc View Source VisitReference(IReference, TContext) Declaration public abstract void VisitReference(IReference that, TContext context) Parameters Type Name Description IReference that TContext context | Improve this Doc View Source VisitReferenceElement(IReferenceElement, TContext) Declaration public abstract void VisitReferenceElement(IReferenceElement that, TContext context) Parameters Type Name Description IReferenceElement that TContext context | Improve this Doc View Source VisitRelationshipElement(IRelationshipElement, TContext) Declaration public abstract void VisitRelationshipElement(IRelationshipElement that, TContext context) Parameters Type Name Description IRelationshipElement that TContext context | Improve this Doc View Source VisitResource(IResource, TContext) Declaration public abstract void VisitResource(IResource that, TContext context) Parameters Type Name Description IResource that TContext context | Improve this Doc View Source VisitSpecificAssetId(ISpecificAssetId, TContext) Declaration public abstract void VisitSpecificAssetId(ISpecificAssetId that, TContext context) Parameters Type Name Description ISpecificAssetId that TContext context | Improve this Doc View Source VisitSubmodel(ISubmodel, TContext) Declaration public abstract void VisitSubmodel(ISubmodel that, TContext context) Parameters Type Name Description ISubmodel that TContext context | Improve this Doc View Source VisitSubmodelElementCollection(ISubmodelElementCollection, TContext) Declaration public abstract void VisitSubmodelElementCollection(ISubmodelElementCollection that, TContext context) Parameters Type Name Description ISubmodelElementCollection that TContext context | Improve this Doc View Source VisitSubmodelElementList(ISubmodelElementList, TContext) Declaration public abstract void VisitSubmodelElementList(ISubmodelElementList that, TContext context) Parameters Type Name Description ISubmodelElementList that TContext context | Improve this Doc View Source VisitValueList(IValueList, TContext) Declaration public abstract void VisitValueList(IValueList that, TContext context) Parameters Type Name Description IValueList that TContext context | Improve this Doc View Source VisitValueReferencePair(IValueReferencePair, TContext) Declaration public abstract void VisitValueReferencePair(IValueReferencePair that, TContext context) Parameters Type Name Description IValueReferencePair that TContext context Implements Visitation.IVisitorWithContext<TContext>"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.html",
    "title": "Class Visitation",
    "keywords": "Class Visitation Inheritance System.Object Visitation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Visitation"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.ITransformer-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.ITransformer-1.html",
    "title": "Interface Visitation.ITransformer<T>",
    "keywords": "Interface Visitation.ITransformer<T> Define the interface for a transformer which transforms recursively the instances into something else. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ITransformer<out T> Type Parameters Name Description T The type of the transformation result Remarks When you use the transformer, please always call the main dispatching method Transform(IClass) . You should most probably never call the Transform* methods directly. They are only made public so that model classes can access them. Methods | Improve this Doc View Source Transform(IClass) Declaration T Transform(IClass that) Parameters Type Name Description IClass that Returns Type Description T | Improve this Doc View Source TransformAdministrativeInformation(IAdministrativeInformation) Declaration T TransformAdministrativeInformation(IAdministrativeInformation that) Parameters Type Name Description IAdministrativeInformation that Returns Type Description T | Improve this Doc View Source TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement) Declaration T TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement that) Parameters Type Name Description IAnnotatedRelationshipElement that Returns Type Description T | Improve this Doc View Source TransformAssetAdministrationShell(IAssetAdministrationShell) Declaration T TransformAssetAdministrationShell(IAssetAdministrationShell that) Parameters Type Name Description IAssetAdministrationShell that Returns Type Description T | Improve this Doc View Source TransformAssetInformation(IAssetInformation) Declaration T TransformAssetInformation(IAssetInformation that) Parameters Type Name Description IAssetInformation that Returns Type Description T | Improve this Doc View Source TransformBasicEventElement(IBasicEventElement) Declaration T TransformBasicEventElement(IBasicEventElement that) Parameters Type Name Description IBasicEventElement that Returns Type Description T | Improve this Doc View Source TransformBlob(IBlob) Declaration T TransformBlob(IBlob that) Parameters Type Name Description IBlob that Returns Type Description T | Improve this Doc View Source TransformCapability(ICapability) Declaration T TransformCapability(ICapability that) Parameters Type Name Description ICapability that Returns Type Description T | Improve this Doc View Source TransformConceptDescription(IConceptDescription) Declaration T TransformConceptDescription(IConceptDescription that) Parameters Type Name Description IConceptDescription that Returns Type Description T | Improve this Doc View Source TransformDataSpecificationIec61360(IDataSpecificationIec61360) Declaration T TransformDataSpecificationIec61360(IDataSpecificationIec61360 that) Parameters Type Name Description IDataSpecificationIec61360 that Returns Type Description T | Improve this Doc View Source TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit) Declaration T TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that) Parameters Type Name Description IDataSpecificationPhysicalUnit that Returns Type Description T | Improve this Doc View Source TransformEmbeddedDataSpecification(IEmbeddedDataSpecification) Declaration T TransformEmbeddedDataSpecification(IEmbeddedDataSpecification that) Parameters Type Name Description IEmbeddedDataSpecification that Returns Type Description T | Improve this Doc View Source TransformEntity(IEntity) Declaration T TransformEntity(IEntity that) Parameters Type Name Description IEntity that Returns Type Description T | Improve this Doc View Source TransformEnvironment(IEnvironment) Declaration T TransformEnvironment(IEnvironment that) Parameters Type Name Description IEnvironment that Returns Type Description T | Improve this Doc View Source TransformEventPayload(IEventPayload) Declaration T TransformEventPayload(IEventPayload that) Parameters Type Name Description IEventPayload that Returns Type Description T | Improve this Doc View Source TransformExtension(IExtension) Declaration T TransformExtension(IExtension that) Parameters Type Name Description IExtension that Returns Type Description T | Improve this Doc View Source TransformFile(IFile) Declaration T TransformFile(IFile that) Parameters Type Name Description IFile that Returns Type Description T | Improve this Doc View Source TransformKey(IKey) Declaration T TransformKey(IKey that) Parameters Type Name Description IKey that Returns Type Description T | Improve this Doc View Source TransformLangString(ILangString) Declaration T TransformLangString(ILangString that) Parameters Type Name Description ILangString that Returns Type Description T | Improve this Doc View Source TransformMultiLanguageProperty(IMultiLanguageProperty) Declaration T TransformMultiLanguageProperty(IMultiLanguageProperty that) Parameters Type Name Description IMultiLanguageProperty that Returns Type Description T | Improve this Doc View Source TransformOperation(IOperation) Declaration T TransformOperation(IOperation that) Parameters Type Name Description IOperation that Returns Type Description T | Improve this Doc View Source TransformOperationVariable(IOperationVariable) Declaration T TransformOperationVariable(IOperationVariable that) Parameters Type Name Description IOperationVariable that Returns Type Description T | Improve this Doc View Source TransformProperty(IProperty) Declaration T TransformProperty(IProperty that) Parameters Type Name Description IProperty that Returns Type Description T | Improve this Doc View Source TransformQualifier(IQualifier) Declaration T TransformQualifier(IQualifier that) Parameters Type Name Description IQualifier that Returns Type Description T | Improve this Doc View Source TransformRange(IRange) Declaration T TransformRange(IRange that) Parameters Type Name Description IRange that Returns Type Description T | Improve this Doc View Source TransformReference(IReference) Declaration T TransformReference(IReference that) Parameters Type Name Description IReference that Returns Type Description T | Improve this Doc View Source TransformReferenceElement(IReferenceElement) Declaration T TransformReferenceElement(IReferenceElement that) Parameters Type Name Description IReferenceElement that Returns Type Description T | Improve this Doc View Source TransformRelationshipElement(IRelationshipElement) Declaration T TransformRelationshipElement(IRelationshipElement that) Parameters Type Name Description IRelationshipElement that Returns Type Description T | Improve this Doc View Source TransformResource(IResource) Declaration T TransformResource(IResource that) Parameters Type Name Description IResource that Returns Type Description T | Improve this Doc View Source TransformSpecificAssetId(ISpecificAssetId) Declaration T TransformSpecificAssetId(ISpecificAssetId that) Parameters Type Name Description ISpecificAssetId that Returns Type Description T | Improve this Doc View Source TransformSubmodel(ISubmodel) Declaration T TransformSubmodel(ISubmodel that) Parameters Type Name Description ISubmodel that Returns Type Description T | Improve this Doc View Source TransformSubmodelElementCollection(ISubmodelElementCollection) Declaration T TransformSubmodelElementCollection(ISubmodelElementCollection that) Parameters Type Name Description ISubmodelElementCollection that Returns Type Description T | Improve this Doc View Source TransformSubmodelElementList(ISubmodelElementList) Declaration T TransformSubmodelElementList(ISubmodelElementList that) Parameters Type Name Description ISubmodelElementList that Returns Type Description T | Improve this Doc View Source TransformValueList(IValueList) Declaration T TransformValueList(IValueList that) Parameters Type Name Description IValueList that Returns Type Description T | Improve this Doc View Source TransformValueReferencePair(IValueReferencePair) Declaration T TransformValueReferencePair(IValueReferencePair that) Parameters Type Name Description IValueReferencePair that Returns Type Description T"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.ITransformerWithContext-2.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.ITransformerWithContext-2.html",
    "title": "Interface Visitation.ITransformerWithContext<TContext, T>",
    "keywords": "Interface Visitation.ITransformerWithContext<TContext, T> Define the interface for a transformer which recursively transforms the instances into something else while the context is passed along. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ITransformerWithContext<in TContext, out T> Type Parameters Name Description TContext Type of the transformation context T The type of the transformation result Remarks When you use the transformer, please always call the main dispatching method Transform(IClass, TContext) . You should most probably never call the Transform* methods directly. They are only made public so that model classes can access them. Methods | Improve this Doc View Source Transform(IClass, TContext) Declaration T Transform(IClass that, TContext context) Parameters Type Name Description IClass that TContext context Returns Type Description T | Improve this Doc View Source TransformAdministrativeInformation(IAdministrativeInformation, TContext) Declaration T TransformAdministrativeInformation(IAdministrativeInformation that, TContext context) Parameters Type Name Description IAdministrativeInformation that TContext context Returns Type Description T | Improve this Doc View Source TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement, TContext) Declaration T TransformAnnotatedRelationshipElement(IAnnotatedRelationshipElement that, TContext context) Parameters Type Name Description IAnnotatedRelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source TransformAssetAdministrationShell(IAssetAdministrationShell, TContext) Declaration T TransformAssetAdministrationShell(IAssetAdministrationShell that, TContext context) Parameters Type Name Description IAssetAdministrationShell that TContext context Returns Type Description T | Improve this Doc View Source TransformAssetInformation(IAssetInformation, TContext) Declaration T TransformAssetInformation(IAssetInformation that, TContext context) Parameters Type Name Description IAssetInformation that TContext context Returns Type Description T | Improve this Doc View Source TransformBasicEventElement(IBasicEventElement, TContext) Declaration T TransformBasicEventElement(IBasicEventElement that, TContext context) Parameters Type Name Description IBasicEventElement that TContext context Returns Type Description T | Improve this Doc View Source TransformBlob(IBlob, TContext) Declaration T TransformBlob(IBlob that, TContext context) Parameters Type Name Description IBlob that TContext context Returns Type Description T | Improve this Doc View Source TransformCapability(ICapability, TContext) Declaration T TransformCapability(ICapability that, TContext context) Parameters Type Name Description ICapability that TContext context Returns Type Description T | Improve this Doc View Source TransformConceptDescription(IConceptDescription, TContext) Declaration T TransformConceptDescription(IConceptDescription that, TContext context) Parameters Type Name Description IConceptDescription that TContext context Returns Type Description T | Improve this Doc View Source TransformDataSpecificationIec61360(IDataSpecificationIec61360, TContext) Declaration T TransformDataSpecificationIec61360(IDataSpecificationIec61360 that, TContext context) Parameters Type Name Description IDataSpecificationIec61360 that TContext context Returns Type Description T | Improve this Doc View Source TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit, TContext) Declaration T TransformDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description IDataSpecificationPhysicalUnit that TContext context Returns Type Description T | Improve this Doc View Source TransformEmbeddedDataSpecification(IEmbeddedDataSpecification, TContext) Declaration T TransformEmbeddedDataSpecification(IEmbeddedDataSpecification that, TContext context) Parameters Type Name Description IEmbeddedDataSpecification that TContext context Returns Type Description T | Improve this Doc View Source TransformEntity(IEntity, TContext) Declaration T TransformEntity(IEntity that, TContext context) Parameters Type Name Description IEntity that TContext context Returns Type Description T | Improve this Doc View Source TransformEnvironment(IEnvironment, TContext) Declaration T TransformEnvironment(IEnvironment that, TContext context) Parameters Type Name Description IEnvironment that TContext context Returns Type Description T | Improve this Doc View Source TransformEventPayload(IEventPayload, TContext) Declaration T TransformEventPayload(IEventPayload that, TContext context) Parameters Type Name Description IEventPayload that TContext context Returns Type Description T | Improve this Doc View Source TransformExtension(IExtension, TContext) Declaration T TransformExtension(IExtension that, TContext context) Parameters Type Name Description IExtension that TContext context Returns Type Description T | Improve this Doc View Source TransformFile(IFile, TContext) Declaration T TransformFile(IFile that, TContext context) Parameters Type Name Description IFile that TContext context Returns Type Description T | Improve this Doc View Source TransformKey(IKey, TContext) Declaration T TransformKey(IKey that, TContext context) Parameters Type Name Description IKey that TContext context Returns Type Description T | Improve this Doc View Source TransformLangString(ILangString, TContext) Declaration T TransformLangString(ILangString that, TContext context) Parameters Type Name Description ILangString that TContext context Returns Type Description T | Improve this Doc View Source TransformMultiLanguageProperty(IMultiLanguageProperty, TContext) Declaration T TransformMultiLanguageProperty(IMultiLanguageProperty that, TContext context) Parameters Type Name Description IMultiLanguageProperty that TContext context Returns Type Description T | Improve this Doc View Source TransformOperation(IOperation, TContext) Declaration T TransformOperation(IOperation that, TContext context) Parameters Type Name Description IOperation that TContext context Returns Type Description T | Improve this Doc View Source TransformOperationVariable(IOperationVariable, TContext) Declaration T TransformOperationVariable(IOperationVariable that, TContext context) Parameters Type Name Description IOperationVariable that TContext context Returns Type Description T | Improve this Doc View Source TransformProperty(IProperty, TContext) Declaration T TransformProperty(IProperty that, TContext context) Parameters Type Name Description IProperty that TContext context Returns Type Description T | Improve this Doc View Source TransformQualifier(IQualifier, TContext) Declaration T TransformQualifier(IQualifier that, TContext context) Parameters Type Name Description IQualifier that TContext context Returns Type Description T | Improve this Doc View Source TransformRange(IRange, TContext) Declaration T TransformRange(IRange that, TContext context) Parameters Type Name Description IRange that TContext context Returns Type Description T | Improve this Doc View Source TransformReference(IReference, TContext) Declaration T TransformReference(IReference that, TContext context) Parameters Type Name Description IReference that TContext context Returns Type Description T | Improve this Doc View Source TransformReferenceElement(IReferenceElement, TContext) Declaration T TransformReferenceElement(IReferenceElement that, TContext context) Parameters Type Name Description IReferenceElement that TContext context Returns Type Description T | Improve this Doc View Source TransformRelationshipElement(IRelationshipElement, TContext) Declaration T TransformRelationshipElement(IRelationshipElement that, TContext context) Parameters Type Name Description IRelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source TransformResource(IResource, TContext) Declaration T TransformResource(IResource that, TContext context) Parameters Type Name Description IResource that TContext context Returns Type Description T | Improve this Doc View Source TransformSpecificAssetId(ISpecificAssetId, TContext) Declaration T TransformSpecificAssetId(ISpecificAssetId that, TContext context) Parameters Type Name Description ISpecificAssetId that TContext context Returns Type Description T | Improve this Doc View Source TransformSubmodel(ISubmodel, TContext) Declaration T TransformSubmodel(ISubmodel that, TContext context) Parameters Type Name Description ISubmodel that TContext context Returns Type Description T | Improve this Doc View Source TransformSubmodelElementCollection(ISubmodelElementCollection, TContext) Declaration T TransformSubmodelElementCollection(ISubmodelElementCollection that, TContext context) Parameters Type Name Description ISubmodelElementCollection that TContext context Returns Type Description T | Improve this Doc View Source TransformSubmodelElementList(ISubmodelElementList, TContext) Declaration T TransformSubmodelElementList(ISubmodelElementList that, TContext context) Parameters Type Name Description ISubmodelElementList that TContext context Returns Type Description T | Improve this Doc View Source TransformValueList(IValueList, TContext) Declaration T TransformValueList(IValueList that, TContext context) Parameters Type Name Description IValueList that TContext context Returns Type Description T | Improve this Doc View Source TransformValueReferencePair(IValueReferencePair, TContext) Declaration T TransformValueReferencePair(IValueReferencePair that, TContext context) Parameters Type Name Description IValueReferencePair that TContext context Returns Type Description T"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.IVisitor.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.IVisitor.html",
    "title": "Interface Visitation.IVisitor",
    "keywords": "Interface Visitation.IVisitor Define the interface for a visitor which visits the instances of the model. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IVisitor Remarks When you use the visitor, please always call the main dispatching method Visit(IClass) . You should most probably never call the Visit* methods directly. They are only made public so that model classes can access them. Methods | Improve this Doc View Source Visit(IClass) Declaration void Visit(IClass that) Parameters Type Name Description IClass that | Improve this Doc View Source VisitAdministrativeInformation(IAdministrativeInformation) Declaration void VisitAdministrativeInformation(IAdministrativeInformation that) Parameters Type Name Description IAdministrativeInformation that | Improve this Doc View Source VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement) Declaration void VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement that) Parameters Type Name Description IAnnotatedRelationshipElement that | Improve this Doc View Source VisitAssetAdministrationShell(IAssetAdministrationShell) Declaration void VisitAssetAdministrationShell(IAssetAdministrationShell that) Parameters Type Name Description IAssetAdministrationShell that | Improve this Doc View Source VisitAssetInformation(IAssetInformation) Declaration void VisitAssetInformation(IAssetInformation that) Parameters Type Name Description IAssetInformation that | Improve this Doc View Source VisitBasicEventElement(IBasicEventElement) Declaration void VisitBasicEventElement(IBasicEventElement that) Parameters Type Name Description IBasicEventElement that | Improve this Doc View Source VisitBlob(IBlob) Declaration void VisitBlob(IBlob that) Parameters Type Name Description IBlob that | Improve this Doc View Source VisitCapability(ICapability) Declaration void VisitCapability(ICapability that) Parameters Type Name Description ICapability that | Improve this Doc View Source VisitConceptDescription(IConceptDescription) Declaration void VisitConceptDescription(IConceptDescription that) Parameters Type Name Description IConceptDescription that | Improve this Doc View Source VisitDataSpecificationIec61360(IDataSpecificationIec61360) Declaration void VisitDataSpecificationIec61360(IDataSpecificationIec61360 that) Parameters Type Name Description IDataSpecificationIec61360 that | Improve this Doc View Source VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit) Declaration void VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that) Parameters Type Name Description IDataSpecificationPhysicalUnit that | Improve this Doc View Source VisitEmbeddedDataSpecification(IEmbeddedDataSpecification) Declaration void VisitEmbeddedDataSpecification(IEmbeddedDataSpecification that) Parameters Type Name Description IEmbeddedDataSpecification that | Improve this Doc View Source VisitEntity(IEntity) Declaration void VisitEntity(IEntity that) Parameters Type Name Description IEntity that | Improve this Doc View Source VisitEnvironment(IEnvironment) Declaration void VisitEnvironment(IEnvironment that) Parameters Type Name Description IEnvironment that | Improve this Doc View Source VisitEventPayload(IEventPayload) Declaration void VisitEventPayload(IEventPayload that) Parameters Type Name Description IEventPayload that | Improve this Doc View Source VisitExtension(IExtension) Declaration void VisitExtension(IExtension that) Parameters Type Name Description IExtension that | Improve this Doc View Source VisitFile(IFile) Declaration void VisitFile(IFile that) Parameters Type Name Description IFile that | Improve this Doc View Source VisitKey(IKey) Declaration void VisitKey(IKey that) Parameters Type Name Description IKey that | Improve this Doc View Source VisitLangString(ILangString) Declaration void VisitLangString(ILangString that) Parameters Type Name Description ILangString that | Improve this Doc View Source VisitMultiLanguageProperty(IMultiLanguageProperty) Declaration void VisitMultiLanguageProperty(IMultiLanguageProperty that) Parameters Type Name Description IMultiLanguageProperty that | Improve this Doc View Source VisitOperation(IOperation) Declaration void VisitOperation(IOperation that) Parameters Type Name Description IOperation that | Improve this Doc View Source VisitOperationVariable(IOperationVariable) Declaration void VisitOperationVariable(IOperationVariable that) Parameters Type Name Description IOperationVariable that | Improve this Doc View Source VisitProperty(IProperty) Declaration void VisitProperty(IProperty that) Parameters Type Name Description IProperty that | Improve this Doc View Source VisitQualifier(IQualifier) Declaration void VisitQualifier(IQualifier that) Parameters Type Name Description IQualifier that | Improve this Doc View Source VisitRange(IRange) Declaration void VisitRange(IRange that) Parameters Type Name Description IRange that | Improve this Doc View Source VisitReference(IReference) Declaration void VisitReference(IReference that) Parameters Type Name Description IReference that | Improve this Doc View Source VisitReferenceElement(IReferenceElement) Declaration void VisitReferenceElement(IReferenceElement that) Parameters Type Name Description IReferenceElement that | Improve this Doc View Source VisitRelationshipElement(IRelationshipElement) Declaration void VisitRelationshipElement(IRelationshipElement that) Parameters Type Name Description IRelationshipElement that | Improve this Doc View Source VisitResource(IResource) Declaration void VisitResource(IResource that) Parameters Type Name Description IResource that | Improve this Doc View Source VisitSpecificAssetId(ISpecificAssetId) Declaration void VisitSpecificAssetId(ISpecificAssetId that) Parameters Type Name Description ISpecificAssetId that | Improve this Doc View Source VisitSubmodel(ISubmodel) Declaration void VisitSubmodel(ISubmodel that) Parameters Type Name Description ISubmodel that | Improve this Doc View Source VisitSubmodelElementCollection(ISubmodelElementCollection) Declaration void VisitSubmodelElementCollection(ISubmodelElementCollection that) Parameters Type Name Description ISubmodelElementCollection that | Improve this Doc View Source VisitSubmodelElementList(ISubmodelElementList) Declaration void VisitSubmodelElementList(ISubmodelElementList that) Parameters Type Name Description ISubmodelElementList that | Improve this Doc View Source VisitValueList(IValueList) Declaration void VisitValueList(IValueList that) Parameters Type Name Description IValueList that | Improve this Doc View Source VisitValueReferencePair(IValueReferencePair) Declaration void VisitValueReferencePair(IValueReferencePair that) Parameters Type Name Description IValueReferencePair that"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.IVisitorWithContext-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.IVisitorWithContext-1.html",
    "title": "Interface Visitation.IVisitorWithContext<TContext>",
    "keywords": "Interface Visitation.IVisitorWithContext<TContext> Define the interface for a visitor which visits the instances of the model. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IVisitorWithContext<in TContext> Type Parameters Name Description TContext Context type Remarks When you use the visitor, please always call the main dispatching method Visit(IClass, TContext) . You should most probably never call the Visit* methods directly. They are only made public so that model classes can access them. Methods | Improve this Doc View Source Visit(IClass, TContext) Declaration void Visit(IClass that, TContext context) Parameters Type Name Description IClass that TContext context | Improve this Doc View Source VisitAdministrativeInformation(IAdministrativeInformation, TContext) Declaration void VisitAdministrativeInformation(IAdministrativeInformation that, TContext context) Parameters Type Name Description IAdministrativeInformation that TContext context | Improve this Doc View Source VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement, TContext) Declaration void VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement that, TContext context) Parameters Type Name Description IAnnotatedRelationshipElement that TContext context | Improve this Doc View Source VisitAssetAdministrationShell(IAssetAdministrationShell, TContext) Declaration void VisitAssetAdministrationShell(IAssetAdministrationShell that, TContext context) Parameters Type Name Description IAssetAdministrationShell that TContext context | Improve this Doc View Source VisitAssetInformation(IAssetInformation, TContext) Declaration void VisitAssetInformation(IAssetInformation that, TContext context) Parameters Type Name Description IAssetInformation that TContext context | Improve this Doc View Source VisitBasicEventElement(IBasicEventElement, TContext) Declaration void VisitBasicEventElement(IBasicEventElement that, TContext context) Parameters Type Name Description IBasicEventElement that TContext context | Improve this Doc View Source VisitBlob(IBlob, TContext) Declaration void VisitBlob(IBlob that, TContext context) Parameters Type Name Description IBlob that TContext context | Improve this Doc View Source VisitCapability(ICapability, TContext) Declaration void VisitCapability(ICapability that, TContext context) Parameters Type Name Description ICapability that TContext context | Improve this Doc View Source VisitConceptDescription(IConceptDescription, TContext) Declaration void VisitConceptDescription(IConceptDescription that, TContext context) Parameters Type Name Description IConceptDescription that TContext context | Improve this Doc View Source VisitDataSpecificationIec61360(IDataSpecificationIec61360, TContext) Declaration void VisitDataSpecificationIec61360(IDataSpecificationIec61360 that, TContext context) Parameters Type Name Description IDataSpecificationIec61360 that TContext context | Improve this Doc View Source VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit, TContext) Declaration void VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description IDataSpecificationPhysicalUnit that TContext context | Improve this Doc View Source VisitEmbeddedDataSpecification(IEmbeddedDataSpecification, TContext) Declaration void VisitEmbeddedDataSpecification(IEmbeddedDataSpecification that, TContext context) Parameters Type Name Description IEmbeddedDataSpecification that TContext context | Improve this Doc View Source VisitEntity(IEntity, TContext) Declaration void VisitEntity(IEntity that, TContext context) Parameters Type Name Description IEntity that TContext context | Improve this Doc View Source VisitEnvironment(IEnvironment, TContext) Declaration void VisitEnvironment(IEnvironment that, TContext context) Parameters Type Name Description IEnvironment that TContext context | Improve this Doc View Source VisitEventPayload(IEventPayload, TContext) Declaration void VisitEventPayload(IEventPayload that, TContext context) Parameters Type Name Description IEventPayload that TContext context | Improve this Doc View Source VisitExtension(IExtension, TContext) Declaration void VisitExtension(IExtension that, TContext context) Parameters Type Name Description IExtension that TContext context | Improve this Doc View Source VisitFile(IFile, TContext) Declaration void VisitFile(IFile that, TContext context) Parameters Type Name Description IFile that TContext context | Improve this Doc View Source VisitKey(IKey, TContext) Declaration void VisitKey(IKey that, TContext context) Parameters Type Name Description IKey that TContext context | Improve this Doc View Source VisitLangString(ILangString, TContext) Declaration void VisitLangString(ILangString that, TContext context) Parameters Type Name Description ILangString that TContext context | Improve this Doc View Source VisitMultiLanguageProperty(IMultiLanguageProperty, TContext) Declaration void VisitMultiLanguageProperty(IMultiLanguageProperty that, TContext context) Parameters Type Name Description IMultiLanguageProperty that TContext context | Improve this Doc View Source VisitOperation(IOperation, TContext) Declaration void VisitOperation(IOperation that, TContext context) Parameters Type Name Description IOperation that TContext context | Improve this Doc View Source VisitOperationVariable(IOperationVariable, TContext) Declaration void VisitOperationVariable(IOperationVariable that, TContext context) Parameters Type Name Description IOperationVariable that TContext context | Improve this Doc View Source VisitProperty(IProperty, TContext) Declaration void VisitProperty(IProperty that, TContext context) Parameters Type Name Description IProperty that TContext context | Improve this Doc View Source VisitQualifier(IQualifier, TContext) Declaration void VisitQualifier(IQualifier that, TContext context) Parameters Type Name Description IQualifier that TContext context | Improve this Doc View Source VisitRange(IRange, TContext) Declaration void VisitRange(IRange that, TContext context) Parameters Type Name Description IRange that TContext context | Improve this Doc View Source VisitReference(IReference, TContext) Declaration void VisitReference(IReference that, TContext context) Parameters Type Name Description IReference that TContext context | Improve this Doc View Source VisitReferenceElement(IReferenceElement, TContext) Declaration void VisitReferenceElement(IReferenceElement that, TContext context) Parameters Type Name Description IReferenceElement that TContext context | Improve this Doc View Source VisitRelationshipElement(IRelationshipElement, TContext) Declaration void VisitRelationshipElement(IRelationshipElement that, TContext context) Parameters Type Name Description IRelationshipElement that TContext context | Improve this Doc View Source VisitResource(IResource, TContext) Declaration void VisitResource(IResource that, TContext context) Parameters Type Name Description IResource that TContext context | Improve this Doc View Source VisitSpecificAssetId(ISpecificAssetId, TContext) Declaration void VisitSpecificAssetId(ISpecificAssetId that, TContext context) Parameters Type Name Description ISpecificAssetId that TContext context | Improve this Doc View Source VisitSubmodel(ISubmodel, TContext) Declaration void VisitSubmodel(ISubmodel that, TContext context) Parameters Type Name Description ISubmodel that TContext context | Improve this Doc View Source VisitSubmodelElementCollection(ISubmodelElementCollection, TContext) Declaration void VisitSubmodelElementCollection(ISubmodelElementCollection that, TContext context) Parameters Type Name Description ISubmodelElementCollection that TContext context | Improve this Doc View Source VisitSubmodelElementList(ISubmodelElementList, TContext) Declaration void VisitSubmodelElementList(ISubmodelElementList that, TContext context) Parameters Type Name Description ISubmodelElementList that TContext context | Improve this Doc View Source VisitValueList(IValueList, TContext) Declaration void VisitValueList(IValueList that, TContext context) Parameters Type Name Description IValueList that TContext context | Improve this Doc View Source VisitValueReferencePair(IValueReferencePair, TContext) Declaration void VisitValueReferencePair(IValueReferencePair that, TContext context) Parameters Type Name Description IValueReferencePair that TContext context"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.VisitorThrough.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.VisitorThrough.html",
    "title": "Class Visitation.VisitorThrough",
    "keywords": "Class Visitation.VisitorThrough Just descend through the instances without any action. Inheritance System.Object Visitation.VisitorThrough Implements Visitation.IVisitor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class VisitorThrough : Visitation.IVisitor Remarks This class is meaningless for itself. However, it is a good base if you want to descend through instances and apply actions only on a subset of classes. Methods | Improve this Doc View Source Visit(IClass) Declaration public virtual void Visit(IClass that) Parameters Type Name Description IClass that | Improve this Doc View Source VisitAdministrativeInformation(IAdministrativeInformation) Declaration public virtual void VisitAdministrativeInformation(IAdministrativeInformation that) Parameters Type Name Description IAdministrativeInformation that | Improve this Doc View Source VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement) Declaration public virtual void VisitAnnotatedRelationshipElement(IAnnotatedRelationshipElement that) Parameters Type Name Description IAnnotatedRelationshipElement that | Improve this Doc View Source VisitAssetAdministrationShell(IAssetAdministrationShell) Declaration public virtual void VisitAssetAdministrationShell(IAssetAdministrationShell that) Parameters Type Name Description IAssetAdministrationShell that | Improve this Doc View Source VisitAssetInformation(IAssetInformation) Declaration public virtual void VisitAssetInformation(IAssetInformation that) Parameters Type Name Description IAssetInformation that | Improve this Doc View Source VisitBasicEventElement(IBasicEventElement) Declaration public virtual void VisitBasicEventElement(IBasicEventElement that) Parameters Type Name Description IBasicEventElement that | Improve this Doc View Source VisitBlob(IBlob) Declaration public virtual void VisitBlob(IBlob that) Parameters Type Name Description IBlob that | Improve this Doc View Source VisitCapability(ICapability) Declaration public virtual void VisitCapability(ICapability that) Parameters Type Name Description ICapability that | Improve this Doc View Source VisitConceptDescription(IConceptDescription) Declaration public virtual void VisitConceptDescription(IConceptDescription that) Parameters Type Name Description IConceptDescription that | Improve this Doc View Source VisitDataSpecificationIec61360(IDataSpecificationIec61360) Declaration public virtual void VisitDataSpecificationIec61360(IDataSpecificationIec61360 that) Parameters Type Name Description IDataSpecificationIec61360 that | Improve this Doc View Source VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit) Declaration public virtual void VisitDataSpecificationPhysicalUnit(IDataSpecificationPhysicalUnit that) Parameters Type Name Description IDataSpecificationPhysicalUnit that | Improve this Doc View Source VisitEmbeddedDataSpecification(IEmbeddedDataSpecification) Declaration public virtual void VisitEmbeddedDataSpecification(IEmbeddedDataSpecification that) Parameters Type Name Description IEmbeddedDataSpecification that | Improve this Doc View Source VisitEntity(IEntity) Declaration public virtual void VisitEntity(IEntity that) Parameters Type Name Description IEntity that | Improve this Doc View Source VisitEnvironment(IEnvironment) Declaration public virtual void VisitEnvironment(IEnvironment that) Parameters Type Name Description IEnvironment that | Improve this Doc View Source VisitEventPayload(IEventPayload) Declaration public virtual void VisitEventPayload(IEventPayload that) Parameters Type Name Description IEventPayload that | Improve this Doc View Source VisitExtension(IExtension) Declaration public virtual void VisitExtension(IExtension that) Parameters Type Name Description IExtension that | Improve this Doc View Source VisitFile(IFile) Declaration public virtual void VisitFile(IFile that) Parameters Type Name Description IFile that | Improve this Doc View Source VisitKey(IKey) Declaration public virtual void VisitKey(IKey that) Parameters Type Name Description IKey that | Improve this Doc View Source VisitLangString(ILangString) Declaration public virtual void VisitLangString(ILangString that) Parameters Type Name Description ILangString that | Improve this Doc View Source VisitMultiLanguageProperty(IMultiLanguageProperty) Declaration public virtual void VisitMultiLanguageProperty(IMultiLanguageProperty that) Parameters Type Name Description IMultiLanguageProperty that | Improve this Doc View Source VisitOperation(IOperation) Declaration public virtual void VisitOperation(IOperation that) Parameters Type Name Description IOperation that | Improve this Doc View Source VisitOperationVariable(IOperationVariable) Declaration public virtual void VisitOperationVariable(IOperationVariable that) Parameters Type Name Description IOperationVariable that | Improve this Doc View Source VisitProperty(IProperty) Declaration public virtual void VisitProperty(IProperty that) Parameters Type Name Description IProperty that | Improve this Doc View Source VisitQualifier(IQualifier) Declaration public virtual void VisitQualifier(IQualifier that) Parameters Type Name Description IQualifier that | Improve this Doc View Source VisitRange(IRange) Declaration public virtual void VisitRange(IRange that) Parameters Type Name Description IRange that | Improve this Doc View Source VisitReference(IReference) Declaration public virtual void VisitReference(IReference that) Parameters Type Name Description IReference that | Improve this Doc View Source VisitReferenceElement(IReferenceElement) Declaration public virtual void VisitReferenceElement(IReferenceElement that) Parameters Type Name Description IReferenceElement that | Improve this Doc View Source VisitRelationshipElement(IRelationshipElement) Declaration public virtual void VisitRelationshipElement(IRelationshipElement that) Parameters Type Name Description IRelationshipElement that | Improve this Doc View Source VisitResource(IResource) Declaration public virtual void VisitResource(IResource that) Parameters Type Name Description IResource that | Improve this Doc View Source VisitSpecificAssetId(ISpecificAssetId) Declaration public virtual void VisitSpecificAssetId(ISpecificAssetId that) Parameters Type Name Description ISpecificAssetId that | Improve this Doc View Source VisitSubmodel(ISubmodel) Declaration public virtual void VisitSubmodel(ISubmodel that) Parameters Type Name Description ISubmodel that | Improve this Doc View Source VisitSubmodelElementCollection(ISubmodelElementCollection) Declaration public virtual void VisitSubmodelElementCollection(ISubmodelElementCollection that) Parameters Type Name Description ISubmodelElementCollection that | Improve this Doc View Source VisitSubmodelElementList(ISubmodelElementList) Declaration public virtual void VisitSubmodelElementList(ISubmodelElementList that) Parameters Type Name Description ISubmodelElementList that | Improve this Doc View Source VisitValueList(IValueList) Declaration public virtual void VisitValueList(IValueList that) Parameters Type Name Description IValueList that | Improve this Doc View Source VisitValueReferencePair(IValueReferencePair) Declaration public virtual void VisitValueReferencePair(IValueReferencePair that) Parameters Type Name Description IValueReferencePair that Implements Visitation.IVisitor"
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.Deserialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.Deserialize.html",
    "title": "Class Xmlization.Deserialize",
    "keywords": "Class Xmlization.Deserialize Deserialize instances of meta-model classes from XML. Inheritance System.Object Xmlization.Deserialize Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Deserialize Examples Here is an example how to parse an instance of class IHasSemantics: var reader = new System.Xml.XmlReader(/* some arguments */); Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom( reader); If the elements live in a namespace, you have to supply it. For example: var reader = new System.Xml.XmlReader(/* some arguments */); Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom( reader, \"http://www.example.com/5/12\"); Methods | Improve this Doc View Source AdministrativeInformationFrom(XmlReader) Deserialize an instance of AdministrativeInformation from reader . Declaration public static AdministrativeInformation AdministrativeInformationFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AdministrativeInformation Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AdministrativeInformation. | Improve this Doc View Source AnnotatedRelationshipElementFrom(XmlReader) Deserialize an instance of AnnotatedRelationshipElement from reader . Declaration public static AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AnnotatedRelationshipElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AnnotatedRelationshipElement. | Improve this Doc View Source AssetAdministrationShellFrom(XmlReader) Deserialize an instance of AssetAdministrationShell from reader . Declaration public static AssetAdministrationShell AssetAdministrationShellFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AssetAdministrationShell Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AssetAdministrationShell. | Improve this Doc View Source AssetInformationFrom(XmlReader) Deserialize an instance of AssetInformation from reader . Declaration public static AssetInformation AssetInformationFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AssetInformation Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AssetInformation. | Improve this Doc View Source BasicEventElementFrom(XmlReader) Deserialize an instance of BasicEventElement from reader . Declaration public static BasicEventElement BasicEventElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description BasicEventElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of BasicEventElement. | Improve this Doc View Source BlobFrom(XmlReader) Deserialize an instance of Blob from reader . Declaration public static Blob BlobFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Blob Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Blob. | Improve this Doc View Source CapabilityFrom(XmlReader) Deserialize an instance of Capability from reader . Declaration public static Capability CapabilityFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Capability Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Capability. | Improve this Doc View Source ConceptDescriptionFrom(XmlReader) Deserialize an instance of ConceptDescription from reader . Declaration public static ConceptDescription ConceptDescriptionFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ConceptDescription Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ConceptDescription. | Improve this Doc View Source DataSpecificationIec61360From(XmlReader) Deserialize an instance of DataSpecificationIec61360 from reader . Declaration public static DataSpecificationIec61360 DataSpecificationIec61360From(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description DataSpecificationIec61360 Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of DataSpecificationIec61360. | Improve this Doc View Source DataSpecificationPhysicalUnitFrom(XmlReader) Deserialize an instance of DataSpecificationPhysicalUnit from reader . Declaration public static DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description DataSpecificationPhysicalUnit Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of DataSpecificationPhysicalUnit. | Improve this Doc View Source EmbeddedDataSpecificationFrom(XmlReader) Deserialize an instance of EmbeddedDataSpecification from reader . Declaration public static EmbeddedDataSpecification EmbeddedDataSpecificationFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description EmbeddedDataSpecification Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of EmbeddedDataSpecification. | Improve this Doc View Source EntityFrom(XmlReader) Deserialize an instance of Entity from reader . Declaration public static Entity EntityFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Entity Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Entity. | Improve this Doc View Source EnvironmentFrom(XmlReader) Deserialize an instance of Environment from reader . Declaration public static Environment EnvironmentFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Environment Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Environment. | Improve this Doc View Source EventPayloadFrom(XmlReader) Deserialize an instance of EventPayload from reader . Declaration public static EventPayload EventPayloadFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description EventPayload Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of EventPayload. | Improve this Doc View Source ExtensionFrom(XmlReader) Deserialize an instance of Extension from reader . Declaration public static Extension ExtensionFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Extension Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Extension. | Improve this Doc View Source FileFrom(XmlReader) Deserialize an instance of File from reader . Declaration public static File FileFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description File Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of File. | Improve this Doc View Source IDataElementFrom(XmlReader) Deserialize an instance of IDataElement from reader . Declaration public static IDataElement IDataElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IDataElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IDataElement. | Improve this Doc View Source IDataSpecificationContentFrom(XmlReader) Deserialize an instance of IDataSpecificationContent from reader . Declaration public static IDataSpecificationContent IDataSpecificationContentFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IDataSpecificationContent Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IDataSpecificationContent. | Improve this Doc View Source IEventElementFrom(XmlReader) Deserialize an instance of IEventElement from reader . Declaration public static IEventElement IEventElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IEventElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IEventElement. | Improve this Doc View Source IHasDataSpecificationFrom(XmlReader) Deserialize an instance of IHasDataSpecification from reader . Declaration public static IHasDataSpecification IHasDataSpecificationFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasDataSpecification Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasDataSpecification. | Improve this Doc View Source IHasExtensionsFrom(XmlReader) Deserialize an instance of IHasExtensions from reader . Declaration public static IHasExtensions IHasExtensionsFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasExtensions Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasExtensions. | Improve this Doc View Source IHasKindFrom(XmlReader) Deserialize an instance of IHasKind from reader . Declaration public static IHasKind IHasKindFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasKind Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasKind. | Improve this Doc View Source IHasSemanticsFrom(XmlReader) Deserialize an instance of IHasSemantics from reader . Declaration public static IHasSemantics IHasSemanticsFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasSemantics Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasSemantics. | Improve this Doc View Source IIdentifiableFrom(XmlReader) Deserialize an instance of IIdentifiable from reader . Declaration public static IIdentifiable IIdentifiableFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IIdentifiable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IIdentifiable. | Improve this Doc View Source IQualifiableFrom(XmlReader) Deserialize an instance of IQualifiable from reader . Declaration public static IQualifiable IQualifiableFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IQualifiable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IQualifiable. | Improve this Doc View Source IReferableFrom(XmlReader) Deserialize an instance of IReferable from reader . Declaration public static IReferable IReferableFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IReferable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IReferable. | Improve this Doc View Source IRelationshipElementFrom(XmlReader) Deserialize an instance of IRelationshipElement from reader . Declaration public static IRelationshipElement IRelationshipElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IRelationshipElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IRelationshipElement. | Improve this Doc View Source ISubmodelElementFrom(XmlReader) Deserialize an instance of ISubmodelElement from reader . Declaration public static ISubmodelElement ISubmodelElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ISubmodelElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ISubmodelElement. | Improve this Doc View Source KeyFrom(XmlReader) Deserialize an instance of Key from reader . Declaration public static Key KeyFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Key Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Key. | Improve this Doc View Source LangStringFrom(XmlReader) Deserialize an instance of LangString from reader . Declaration public static LangString LangStringFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description LangString Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of LangString. | Improve this Doc View Source MultiLanguagePropertyFrom(XmlReader) Deserialize an instance of MultiLanguageProperty from reader . Declaration public static MultiLanguageProperty MultiLanguagePropertyFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description MultiLanguageProperty Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of MultiLanguageProperty. | Improve this Doc View Source OperationFrom(XmlReader) Deserialize an instance of Operation from reader . Declaration public static Operation OperationFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Operation Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Operation. | Improve this Doc View Source OperationVariableFrom(XmlReader) Deserialize an instance of OperationVariable from reader . Declaration public static OperationVariable OperationVariableFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description OperationVariable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of OperationVariable. | Improve this Doc View Source PropertyFrom(XmlReader) Deserialize an instance of Property from reader . Declaration public static Property PropertyFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Property Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Property. | Improve this Doc View Source QualifierFrom(XmlReader) Deserialize an instance of Qualifier from reader . Declaration public static Qualifier QualifierFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Qualifier Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Qualifier. | Improve this Doc View Source RangeFrom(XmlReader) Deserialize an instance of Range from reader . Declaration public static Range RangeFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Range Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Range. | Improve this Doc View Source ReferenceElementFrom(XmlReader) Deserialize an instance of ReferenceElement from reader . Declaration public static ReferenceElement ReferenceElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ReferenceElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ReferenceElement. | Improve this Doc View Source ReferenceFrom(XmlReader) Deserialize an instance of Reference from reader . Declaration public static Reference ReferenceFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Reference Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Reference. | Improve this Doc View Source RelationshipElementFrom(XmlReader) Deserialize an instance of RelationshipElement from reader . Declaration public static RelationshipElement RelationshipElementFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description RelationshipElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of RelationshipElement. | Improve this Doc View Source ResourceFrom(XmlReader) Deserialize an instance of Resource from reader . Declaration public static Resource ResourceFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Resource Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Resource. | Improve this Doc View Source SpecificAssetIdFrom(XmlReader) Deserialize an instance of SpecificAssetId from reader . Declaration public static SpecificAssetId SpecificAssetIdFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description SpecificAssetId Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of SpecificAssetId. | Improve this Doc View Source SubmodelElementCollectionFrom(XmlReader) Deserialize an instance of SubmodelElementCollection from reader . Declaration public static SubmodelElementCollection SubmodelElementCollectionFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description SubmodelElementCollection Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of SubmodelElementCollection. | Improve this Doc View Source SubmodelElementListFrom(XmlReader) Deserialize an instance of SubmodelElementList from reader . Declaration public static SubmodelElementList SubmodelElementListFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description SubmodelElementList Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of SubmodelElementList. | Improve this Doc View Source SubmodelFrom(XmlReader) Deserialize an instance of Submodel from reader . Declaration public static Submodel SubmodelFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Submodel Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Submodel. | Improve this Doc View Source ValueListFrom(XmlReader) Deserialize an instance of ValueList from reader . Declaration public static ValueList ValueListFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ValueList Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ValueList. | Improve this Doc View Source ValueReferencePairFrom(XmlReader) Deserialize an instance of ValueReferencePair from reader . Declaration public static ValueReferencePair ValueReferencePairFrom(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ValueReferencePair Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ValueReferencePair."
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.Exception.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.Exception.html",
    "title": "Class Xmlization.Exception",
    "keywords": "Class Xmlization.Exception Represent a critical error during the deserialization. Inheritance System.Object System.Exception Xmlization.Exception Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Exception : Exception, ISerializable Constructors | Improve this Doc View Source Exception(String, String) Declaration public Exception(string path, string cause) Parameters Type Name Description System.String path System.String cause Fields | Improve this Doc View Source Cause Declaration public readonly string Cause Field Value Type Description System.String | Improve this Doc View Source Path Declaration public readonly string Path Field Value Type Description System.String Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.html",
    "title": "Class Xmlization",
    "keywords": "Class Xmlization Provide de/serialization of meta-model classes to/from XML. Inheritance System.Object Xmlization Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Xmlization Fields | Improve this Doc View Source NS Declaration public static readonly string NS Field Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.Serialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.Serialize.html",
    "title": "Class Xmlization.Serialize",
    "keywords": "Class Xmlization.Serialize Serialize instances of meta-model classes to XML. Inheritance System.Object Xmlization.Serialize Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Serialize Examples Here is an example how to serialize an instance of IHasSemantics: var anInstance = new Aas.IHasSemantics( /* ... some constructor arguments ... */ ); var writer = new System.Xml.XmlWriter( /* some arguments */ ); Serialize.To( anInstance, writer); Methods | Improve this Doc View Source To(IClass, XmlWriter) Serialize an instance of the meta-model to XML. Declaration public static void To(IClass that, XmlWriter writer) Parameters Type Name Description IClass that System.Xml.XmlWriter writer"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "aas-core 3.0RC02 C# API",
    "keywords": "aas-core 3.0RC02 C# API The API of the SDK is split into six different units: Namespace Description AasCore.Aas3_0_RC02 Create the model programmatically AasCore.Aas3_0_RC02.Visitation Iterate over and transform the model AasCore.Aas3_0_RC02.Constants Specify constants such as constant sets of strings AasCore.Aas3_0_RC02.Verification Verify that the model fulfills the constraints AasCore.Aas3_0_RC02.Jsonization De/serialize from/to JSON AasCore.Aas3_0_RC02.Xmlization De/serialize from/to XML Please refer to Getting Started for a brief introduction on how to use the API."
  },
  "change_log.html": {
    "href": "change_log.html",
    "title": "Change Log",
    "keywords": "Change Log 1.1.1 Bug fixes: Exclude inherited properties in interfaces (#82) Fix minor typos in docs (#81) 1.1.0 New features: Allow for shallow and deep copies (#79) Bug fixes: Fix docs for XML serialization (#78) Fix date verification of BCE and zero years (#77) 1.0.1 Fix paths in xmlization exceptions (#73) 1.0.0 This is the first public version. It has been: battle-tested with aasx-server , stood the test of time for a couple of months, and corresponds to the AAS schemas V3.0.5RC02 ."
  },
  "contributing.html": {
    "href": "contributing.html",
    "title": "Contributing",
    "keywords": "Contributing Issues Please report bugs or feature requests by creating GitHub issues . In Code If you want to contribute in code, pull requests are welcome! Please do create a new issue before you dive into coding. It can well be that we already started working on the feature, or that there are upstream or downstream complexities involved which you might not be aware of. SDK Code Generation The biggest part of the code has been automatically generated by aas-core-codegen . It probably makes most sense to change the generator rather than add new functionality. However, this needs to be decided on a case-by-case basis. Test Code Generation The code of the unit tests has been automatically generated using the Python scripts in the testgen/ directory. To re-generate the test code, first create a virtual environment at the root of the repository: python -m venv venv Activate the virtual environment (in Windows): venv\\Scripts\\activate or in Linux: source venv/bin/activate Then install the dependencies: pip3 install -r testgen/requirements.txt Now you can run the generation scripts: python testgen/generate_all.py Test Data The test data is automatically generated by aas-core3.0rc02-testgen , and copied to this repository on every change. Build To build the solution, run: dotnet build src/ Pre-commit Checks Before you can run pre-commit checks, you need to install the tools from src/ directory: cd src dotnet tool restore Now you can execute the checks (from the repository root): powershell src/Check.ps1 Pull Requests Feature branches . We develop using the feature branches, see this section of the Git book . If you are a member of the development team, create a feature branch directly within the repository. Otherwise, if you are a non-member contributor, fork the repository and create the feature branch in your forked repository. See [this GitHub tuturial] for more guidance. Branch Prefix . Please prefix the branch with your Github user name ( e.g., mristin/Add-some-feature ). Continuous Integration . GitHub will run the continuous integration (CI) automatically through GitHub actions. The CI includes building the solution, running the test, inspecting the code etc. If you installed all the tools (by dotnet tool restore , see above), you can run the CI checks locally: powershell src/Check.ps1 Commit Messages The commit messages follow the guidelines from https://chris.beams.io/posts/git-commit : Separate subject from body with a blank line, Limit the subject line to 50 characters, Capitalize the subject line, Do not end the subject line with a period, Use the imperative mood in the subject line, Wrap the body at 72 characters, and Use the body to explain what and why (instead of how )."
  },
  "design_decisions.html": {
    "href": "design_decisions.html",
    "title": "Design Decisions",
    "keywords": "Design Decisions We explain a couple of design decisions and trade-offs we deliberately made during the development of the SDK. These are our opinions — you may or may not agree, which is totally OK as there are always more than one way to do things and do them well. However, the decisions elaborated here are not meant to convince you. We want to give you insight about why we did certain things, and why we didn't implement them in some other way. Aggregations as Lists instead of Dictionaries We decided to implement all the aggregations in the meta-model as System.Collections.Generic.List instead of System.Collections.Generic.Dictionary . Some structures just \"scream\" for a dictionary, such as SubmodelElements property in a Submodel . The submodel elements need to be unique w.r.t. their ID-shorts. So why didn't we model them as dictionaries, where keys are ID-shorts? There are multiple reasons: \"There are only two hard things in Computer Science: cache invalidation and naming things\" (see this StackExchange ). For example, the key in the dictionary and the IdShort property of the submodel element need to be always in sync. Keeping such things in sync can be hard. When de-serializing, you need to hash on all the key/value pairs. In many situations, you do not perform any look-ups, but want to read the whole environment only once, and act upon it. Hashing would have wasted computational resources. You may want to index on more things than IdShort . For example, retrieving submodel elements by their SemanticId is almost equally important. The order of the key/value pairs in a dictionary might not follow the order in the underlying serialized file. For example, if System.Collections.HashTable is used, the order is random. This would make the round-trip de-serialization 🠒 serialization non-deterministic. Generating code based on dictionaries would have incurred additional complexity in aas-core-meta and aas-core-codegen as we would need to capture indexing in our machine-readable meta-models. We therefore leave indexing (and syncing of the indices) to the user instead of pre-maturely providing a basic index on one of the features. No Parent ⟷ Child Associations We did not model the parent ⟷ child relations between the model elements for similar reasons why we did not implement dictionaries. Namely, keeping the associations in sync is hard. While you might have clear parent ⟷ child relationship when you deserialize an environment, this relationship becomes less clear when you start re-using objects between environments. Moreover, you need to sync the parent when an instance associated as its child is deleted. The complexity of this sync becomes hard (and computationally costly) as your object tree grows. And what if you re-assign the instance to multiple parents? For example, an instance of Submodel may appear in multiple instances of Environment . Which environment is the parent? Multiple solutions are possible, and they depend on the application domain. In some cases, where you deal with static data, a simple dictionary parent 🠒 child is sufficient. In other cases, more involved data structures and updating strategies are needed. As we did not want to prejudice the SDK for a particular application domain, we left out parent ⟷ child associations. We indeed discussed a couple of concrete solutions, but failed to find a unifying approach which would satisfy multiple scenarios. Please create an issue if you would like to discuss this point further. Values as Strings As you can see, say, in [Property] class, the Value property holds strings. This is indeed intentional though it might seem a bit outlandish. You have to bear in mind that the lexical space of XML basic data types , which we use to encode values in such properties, is large, and larger than C# primitive types. For example, xs:double 's can have an arbitrary prefix of zeros ( 001234 is a valid xs:double ). For another example, xs:decimal allows for an arbitrary size and precision. In C#, System.Decimal is probably our best bet, but it has a fixed precision. It might well be that our application domain requires more precision than System.Decimal ! Writing code for a setting where various systems interoperate with mixed application domains is difficult. We wanted to stick to the specification, which mandates XML basic data types , and thus leave the parsing of values up to the users. Thus, we do not restrict the domain where our SDK can be used. The users will know the best what precision and form they need. No AAS Registry An AAS Registry is considered an external dependency, since it requires network requests. We left it out-of-scope on purpose as this SDK focuses on the data exchange. Further aas-core projects will work on an AAS registry. One important consequence of leaving out the registry is that some constraints in the meta-model can not be enforced, as we do not know how to resolve the references. The full list of omitted constraints is available in the code of aas-core-meta . Build Your Own Abstraction on Top We intentionally kept the API surface of the SDK minimal. The idea was to give you basic building blocks which you can use to construct more complex structures. For example, LINQ in conjunction with Descend method of IClass allows for powerful queries. An implementation of AbstractVisitor or AbstractTransformer allows you to write converters to other formats. They give you a pre-structured code which you merely need to fill in, thus reducing your mental overhead. Maintainability versus Performance We chose to sacrifice the performance for maintainability of the code. In particular, we decided to generate the code automatically using aas-core-codegen . This imposed certain suboptimal spots in the code. For example, the constraints are automatically transpiled. A lot of constraints could have been optimized, but we are stuck with their representation in Python and the way they are translated into C#. We believe that this is a valid trade-off at the moment. At the moment, the meta-model changes too frequently to manually come up with the changes in an SDK without sacrificing the correctness. As more critical applications and domains in the AAS space arise, and the meta-model becomes more stable, hand optimization of certain parts of our SDK will probably make more sense."
  },
  "getting_started/create_get_set.html": {
    "href": "getting_started/create_get_set.html",
    "title": "Create, Get and Set Properties of an AAS Model",
    "keywords": "Create, Get and Set Properties of an AAS Model The namespace AasCore.Aas3_0_RC02 contains all the classes of the meta-model. You can simply use their constructors to create an AAS model. Usually you start bottom-up, all the way up to the AasCore.Aas3_0_RC02.Environment . Getters and Setters For each property in the meta-model, there is a corresponding getter and setter. For example, see the getter and setter for AasCore.Aas3_0_RC02.Submodel.Category . Getters with a Default Value For optional properties which come with a default value, we provide special getters, {property name}OrDefault . If the property has not been set, this getter will give you the default value. Otherwise, if the model sets the property, the value of the property will be returned. For example, see AasCore.Aas3_0_RC02.Submodel.KindOrDefault . Example: Create an environment with a submodel Here is a very rudimentary example where we show how to create an environment which contains a submodel. The submodel will contain two elements, a property and a blob. (We will alias the namespace AasCore.Aas3_0_RC02 to Aas for readability. You might or might not want to write your code like that; the aliasing is not necessary.) using System.Collections.Generic; using Aas = AasCore.Aas3_0_RC02; public class Program { public static void Main() { // Create the first element var someElement = new Aas.Property( Aas.DataTypeDefXsd.Int) { Value=\"1984\" }; // Create the second element var content = new byte[4] { 0xDE, 0xAD, 0xBE, 0xEF }; var anotherElement = new Aas.Blob( \"application/octet-stream\") { Value=content }; // You can also directly access the element properties anotherElement.Value[3] = 0xED; // Nest the elements in a submodel var elements = new List<Aas.ISubmodelElement>() { someElement, anotherElement }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = elements }; // Now create the environment to wrap it all var submodels = new List<Aas.Submodel>() { submodel }; var environment = new Aas.Environment() { Submodels = submodels }; // You can access the properties from the children // as well. ( environment .Submodels[0] .SubmodelElements[1] as Aas.Blob ).Value[3] = 0xEF; // Now you can do something with the environment... } } (You can run the snippet at: https://dotnetfiddle.net/jaLVpH )"
  },
  "getting_started/install.html": {
    "href": "getting_started/install.html",
    "title": "Installation",
    "keywords": "Installation The SDK is available as a NuGet package AasCore.Aas3_0_RC02 . Change to your project's directory ( i.e , the directory where your .csproj file resides). Add the SDK as the dependency using dotnet : dotnet add package AasCore.Aas3_0_RC02 The SDK should be now available. You might probably need to re-start your IDE and re-build the solution for changes to take effect."
  },
  "getting_started/intro.html": {
    "href": "getting_started/intro.html",
    "title": "Getting Started with aas-core 3.0RC02 C# SDK",
    "keywords": "Getting Started with aas-core 3.0RC02 C# SDK Here's a quick intro to get you started with the SDK. See how you can: Install the SDK , Programmatically create, get and set properties of an AAS model , Iterate over, copy and transform a model , Verify a model , De/serialize a model from and to JSON , and De/serialize a model from and to XML ."
  },
  "getting_started/iterate_copy_and_transform.html": {
    "href": "getting_started/iterate_copy_and_transform.html",
    "title": "Iterate, Copy and Transform",
    "keywords": "Iterate, Copy and Transform The SDK provides various ways how you can loop through the elements of the model, and how these elements can be transformed. Each following section will look into one of the approaches. OverXOrEmpty For all the optional lists, there is a corresponding Over{property name}OrEmpty getter. It gives you an System.Collection.IEnumerable . If the property is not set, this getter will give you an empty enumerable. Otherwise, it will return the enumerable over the list. For example, see OverSubmodelsOrEmpty in AasCore.Aas3_0_RC02.Environment.OverSubmodelsOrEmpty . DescendOnce and Descend If you are writing a simple script, want to use LINQ and do not care about the performance, the SDK provides two methods in the most general interface IClass , DescendOnce and Descend , which you can use to loop through the instances. Both DescendOnce and Descend iterate over model children of an IClass . DescendOnce , as it names suggests, stops after all the children has been iterated over. Descend continues recursively to grand-children etc. Here is a short example how you can get all the properties from an environment whose ID-short starts with another : using System.Collections.Generic; using System.Linq; using Aas = AasCore.Aas3_0_RC02; public class Program { public static void Main() { // Prepare the environment var someProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"someProperty\", }; var anotherProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"anotherProperty\" }; var yetAnotherProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"yetAnotherProperty\" }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = new List<Aas.ISubmodelElement>() { someProperty, anotherProperty, yetAnotherProperty } }; var environment = new Aas.Environment() { Submodels = new List<Aas.Submodel>() { submodel } }; // Iterate over all properties which have \"another\" // in the ID-short foreach ( var prop in environment .Descend() .OfType<Aas.Property>() .Where( prop => prop.IdShort.ToLower().Contains(\"another\") ) ) { System.Console.WriteLine(prop.IdShort); } // Outputs: // anotherProperty // yetAnotherProperty } } (You can also run the snippet at: https://dotnetfiddle.net/4Y8yAM ) Iteration with Descend and DescendOnce works well if the performance is irrelevant. However, if the performance matters, this is not a good approach. First, all the children model elements will be visited (even though you need only a small subset). Second, the call to LINQ's OfType<Aas.Submodel> needs to perform a type cast for every child. Let's see in the next section how we could use a more efficient, but also a more complex approach. Visitor Visitor pattern is a common design pattern in software engineering. We will not explain the details of the pattern here as you can read about in the ample literature in books or in Internet. The cornerstone of the visitor pattern in double dispatch : instead of casting to the desired type during the iteration, we add a method Accept to IClass , whose implementations then directly dispatch to the appropriate method. This allows us to spare casts and directly dispatch the execution. The SDK already implements Accept methods, so you only have to implement the visitor. The visitor class has a visiting method for each class of the meta-model. In the SDK, we provide different flavors of the visitor abstract classes which you can readily implement: AbstractVisitor which needs all the visit methods to be implemented, VisitorThrough which visits all the elements and does nothing, and AbstractVisitorWithContext which propagates a context object along the iteration. Let us re-write the above example related to Descend method with a visitor pattern: using System.Collections.Generic; using Aas = AasCore.Aas3_0_RC02; using AasVisitation = AasCore.Aas3_0_RC02.Visitation; class Visitor : AasVisitation.VisitorThrough { public override void Visit(Aas.Property prop) { if (prop.IdShort.ToLower().Contains(\"another\")) { System.Console.WriteLine(prop.IdShort); } } }; public class Program { public static void Main() { // Prepare the environment var someProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"someProperty\", }; var anotherProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"anotherProperty\" }; var yetAnotherProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"yetAnotherProperty\" }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = new List<Aas.ISubmodelElement>() { someProperty, anotherProperty, yetAnotherProperty } }; var environment = new Aas.Environment() { Submodels = new List<Aas.Submodel>() { submodel } }; // Iterate over all properties which have \"another\" // in the ID-short var visitor = new Visitor(); visitor.Visit(environment); // Outputs: // anotherProperty // yetAnotherProperty } } (You can run the snippet at: https://dotnetfiddle.net/mbswWD ) There are important differences to iteration with Descend : Due to double dispatch , we spare a cast. This is usually more efficient. We can handle multiple types of the elements, not only a single type ( Property in this case). This can allow for better readability of the code as well as better performance if two or more element types need to be considered in one iteration. The iteration logic in Descend lives very close to where it is executed. In contrast, the visitor needs to be defined as a separate class. While sometimes faster, writing the visitor makes the code less readable. Descend or Visitor? In general, people familiar with the visitor pattern and object-oriented programming will prefer, obviously, visitor class. People who like LINQ will prefer Descend . It is difficult to discuss different tastes, so you should probably come up with explicit code guidelines in your code and stick to them. Make sure you always profile before you sacrifice readability and blindly apply one or the other approach for performance reasons. Shallow and Deep Copies In the static class [Copying], we provide methods for making shallow and deep copies of an instance of AAS model. In both manners of copying, primitive values (such as bool , string etc. ) are copied by value. Shallow copying copies all the non-primitive values by reference. The lists are also copied by reference, and no new lists are created in the copy. Deep copying makes a deep copy recursively, where we make a deep copy of all the underlying non-primitive values. Here is an example of how you can make a shallow and a deep copy of an [Environment]: using System.Collections.Generic; using System.Linq; using Aas = AasCore.Aas3_0_RC02; public class Program { public static void Main() { // Prepare the environment var someProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"someProperty\", }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = new List<Aas.ISubmodelElement>() { someProperty } }; var environment = new Aas.Environment() { Submodels = new List<Aas.Submodel>() { submodel } }; // Make a deep copy var deepCopy = Aas.Copying.Deep(environment); // Make a shallow copy var shallowCopy = Aas.Copying.Shallow(environment); // Changes to the property affect only the shallow copy, // but not the deep one environment.Submodels[0].SubmodelElements![0].IdShort = \"changed\"; System.Console.WriteLine( shallowCopy.Submodels![0].SubmodelElements![0].IdShort); System.Console.WriteLine( deepCopy.Submodels![0].SubmodelElements![0].IdShort); // Output: // changed // someProperty } } (You can also run the snippet at: https://dotnetfiddle.net/XFSbFx ) Transformer A transformer pattern is an analogous to visitor pattern , where we \"transform\" the visited element into some other form (be it a string or a different object). It is very common in compiler design, where the abstract syntax tree is transformed into a different representation. The SDK provides two different flavors of a transformer: AbstractTransformer , where the model element is directly transformed into something, and AbstractTransformerWithContext , which propagates the context object along the transformations. Since we need to provide a transformation method for each class of the meta-model, we deliberately omit an example due to the length of the code. If you need a practical example, see the source code of the Verification static class, where we implemented the verification logic using an AbstractTransformer ."
  },
  "getting_started/jsonize.html": {
    "href": "getting_started/jsonize.html",
    "title": "JSON De/serialization",
    "keywords": "JSON De/serialization Our SDK handles the de/serialization of the AAS models from and to JSON format through the static class Jsonization . Serialize To serialize, you call the method ToJsonObject of Jsonization.Serialize static class on an instance of Environment which will convert it to an instance of System.Text.Json.Nodes.JsonObject . Here is a snippet that converts the environment first into an System.Text.Json.Nodes.JsonObject , and next converts the JSON object to text: using System.Collections.Generic; using Aas = AasCore.Aas3_0_RC02; using AasJsonization = AasCore.Aas3_0_RC02.Jsonization; public class Program { public static void Main() { // Prepare the environment var someProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"someProperty\", }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = new List<Aas.ISubmodelElement>() { someProperty } }; var environment = new Aas.Environment() { Submodels = new List<Aas.Submodel>() { submodel } }; // Serialize to a JSON object var jsonObject = AasJsonization.Serialize.ToJsonObject( environment ); // Print the JSON object System.Console.WriteLine(jsonObject); // Outputs: // { // \"submodels\": [ // { // \"id\": \"some-unique-global-identifier\", // \"submodelElements\": [ // { // \"idShort\": \"someProperty\", // \"valueType\": \"xs:boolean\", // \"modelType\": \"Property\" // } // ], // \"modelType\": \"Submodel\" // } // ] // } } } (You can run the snippet at: https://dotnetfiddle.net/dkBbFS ) De-serialize Our SDK can convert a System.Text.Json.Nodes.JsonNode back to an instance of Environment . All you have to do is call the method EnvironmentFrom from the static class Jsonization.Deserialize . Here is an example snippet: using Nodes = System.Text.Json.Nodes; using Aas = AasCore.Aas3_0_RC02; using AasJsonization = AasCore.Aas3_0_RC02.Jsonization; public class Program { public static void Main() { var text = @\"{ \"\"submodels\"\": [ { \"\"id\"\": \"\"some-unique-global-identifier\"\", \"\"submodelElements\"\": [ { \"\"idShort\"\": \"\"someProperty\"\", \"\"valueType\"\": \"\"xs:boolean\"\", \"\"modelType\"\": \"\"Property\"\" } ], \"\"modelType\"\": \"\"Submodel\"\" } ] }\"; var jsonNode = Nodes.JsonNode.Parse( text); // De-serialize from the JSON node Aas.Environment environment = ( AasJsonization.Deserialize.EnvironmentFrom( jsonNode) ); // Print the types of the model elements contained // in the environment foreach (var something in environment.Descend()) { System.Console.WriteLine(something.GetType()); } // Outputs: // AasCore.Aas3_0_RC02.Submodel // AasCore.Aas3_0_RC02.Property } } (You can run the snippet at: https://dotnetfiddle.net/uCv2f3 ) Errors If there are any errors during the de-serialization, a Jsonization.Exception will be thrown. Errors occur whenever we encounter invalid JSON values. For example, the de-serialization method expects a JSON object, but encounters a JSON array instead."
  },
  "getting_started/verify.html": {
    "href": "getting_started/verify.html",
    "title": "Verify",
    "keywords": "Verify Our SDK allows you to verify that a model satisfies the constraints of the meta-model. The verification logic is concentrated in the static class Verification , and all it takes is a call to Verify method. The method Verify will check that constraints in the given model element are satisfied, including the recursion into children elements. The method returns an iterator of errors, which you can use to for further processing ( e.g. , report to the user). Here is a short example snippet: using System.Collections.Generic; using System.Linq; using Aas = AasCore.Aas3_0_RC02; using AasVerification = AasCore.Aas3_0_RC02.Verification; using AasReporting = AasCore.Aas3_0_RC02.Reporting; public class Program { public static void Main() { // Prepare the environment var someProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { // 🗲🗲💀🗲🗲 // The ID-shorts must be proper variable names, // but there is a dash (\"-\") in this ID-short. IdShort = \"some-Property\", }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = new List<Aas.ISubmodelElement>() { someProperty } }; var environment = new Aas.Environment() { Submodels = new List<Aas.Submodel>() { submodel } }; // Verify the environment and print out the errors foreach (var error in AasVerification.Verify(environment)) { System.Console.WriteLine( error.Cause ); } // Outputs: // Invariant violated: // ID-short of Referables shall only feature letters, digits, underscore (``_``); // starting mandatory with a letter. *I.e.* ``[a-zA-Z][a-zA-Z0-9_]+``. } } (You can run the snippet at: https://dotnetfiddle.net/aI03At ) Reporting The error is an instance of Error , living in the scope of the static class Reporting . You can use the methods GenerateJsonPath and GenerateRelativeXPath to convert the error's path to a readable path. Here is the above snippet modified so that the path is included in the prints: // ... using AasVerification = AasCore.Aas3_0_RC02.Verification; using AasReporting = AasCore.Aas3_0_RC02.Reporting; public class Program { public static void Main() { // ... // Verify the environment and print out the errors foreach (var error in AasVerification.Verify(environment)) { System.Console.WriteLine( AasReporting.GenerateJsonPath(error.PathSegments) + \": \" + error.Cause ); } // Outputs: // submodels[0].submodelElements[0].idShort: Invariant violated: // ID-short of Referables shall only feature letters, digits, underscore (``_``); // starting mandatory with a letter. *I.e.* ``[a-zA-Z][a-zA-Z0-9_]+``. } } (You can run the snippet at: https://dotnetfiddle.net/aI03At ) Limit the Number of Reported Errors Since the Verify method of the static class Verification gives you an iterator (an IEnumerable ), you can simply stop the verification after observing a certain number of errors. Here is a snippet which reports only the first 10 errors: // Verify the environment and print out the first 10 errors int errorCount = 0; foreach (var error in AasVerification.Verify(environment)) { System.Console.WriteLine(error.Cause); errorCount++; if (errorCount == 10) break; } Omitted Constraints Not all constraints specified in the meta-model can be verified. Some constraints require external dependencies such as an AAS registry. Verifying the constraints with external dependencies is out-of-scope of our SDK, as we still lack standardized interfaces to those dependencies. However, all the constraints which need no external dependency are verified. For a full list of exception, consult the aas-core-meta description of the meta-model which this SDK has been generated after."
  },
  "getting_started/xmlize.html": {
    "href": "getting_started/xmlize.html",
    "title": "XML De/serialization",
    "keywords": "XML De/serialization The code that de/serializes AAS models from and to XML documents lives in the static class Xmlization . Serialize You serialize a model using the static class Xmlization.Serialize by calling its To method on an Environment . The To method writes to a System.Xml.XmlWriter . Here is an example snippet: using System.Collections.Generic; using Aas = AasCore.Aas3_0_RC02; using AasXmlization = AasCore.Aas3_0_RC02.Xmlization; public class Program { public static void Main() { // Prepare the environment var someProperty = new Aas.Property( Aas.DataTypeDefXsd.Boolean) { IdShort = \"someProperty\", }; var submodel = new Aas.Submodel( \"some-unique-global-identifier\") { SubmodelElements = new List<Aas.ISubmodelElement>() { someProperty } }; var environment = new Aas.Environment() { Submodels = new List<Aas.Submodel>() { submodel } }; // Serialize to an XML writer var outputBuilder = new System.Text.StringBuilder(); using var writer = System.Xml.XmlWriter.Create( outputBuilder, new System.Xml.XmlWriterSettings() { Encoding = System.Text.Encoding.UTF8 } ); AasXmlization.Serialize.To( environment, writer ); writer.Flush(); // Print the output System.Console.WriteLine( outputBuilder.ToString() ); // Outputs (all on a single line): // <?xml version=\"1.0\" encoding=\"utf-16\"?> // <environment xmlns=\"https://admin-shell.io/aas/3/0/RC02\"> // <submodels><submodel><id>some-unique-global-identifier</id> // <submodelElements><property><idShort>someProperty</idShort> // <valueType>xs:boolean</valueType></property></submodelElements> // </submodel></submodels></environment> } } (You can run the snippet at: https://dotnetfiddle.net/VEL2jU ) De-serialize The de-serialization is encapsulated in Xmlization.Deserialize static class. The crucial method is EnvironmentFrom which reads from an System.Xml.XmlReader and re-creates back an instance of Environment . The methods *From from Xmlization.Deserialize expect the reader to already point to the XML element of the instance. If you have non-content fields, such as an XML declaration, you have to invoke System.Xml.XmlReader.MoveToContent first. Here is a snippet which parses XML as text and then de-serializes it into an instance of Environment : using System.Collections.Generic; using Aas = AasCore.Aas3_0_RC02; using AasXmlization = AasCore.Aas3_0_RC02.Xmlization; public class Program { public static void Main() { var text = ( \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" + \"<environment xmlns=\\\"https://admin-shell.io/aas/3/0/RC02\\\">\" + \"<submodels><submodel><id>some-unique-global-identifier</id>\" + \"<submodelElements><property><idShort>someProperty</idShort>\" + \"<valueType>xs:boolean</valueType></property></submodelElements>\" + \"</submodel></submodels></environment>\" ); using var stringReader = new System.IO.StringReader( text); using var xmlReader = System.Xml.XmlReader.Create( stringReader); // This step is necessary to skip the non-content. Otherwise, // the deserialization would have thrown an exception. xmlReader.MoveToContent(); var environment = AasXmlization.Deserialize.EnvironmentFrom( xmlReader); // Print the types of the model elements contained // in the environment foreach (var something in environment.Descend()) { System.Console.WriteLine(something.GetType()); } // Outputs: // AasCore.Aas3_0_RC02.Submodel // AasCore.Aas3_0_RC02.Property } } (You can run the snippet at: https://dotnetfiddle.net/TD0Ro8 ) Errors If the XML document from System.Xml.XmlReader comes in an unexpected form, our SDK throws a Xmlization.Exception . This can happen, for example, if unexpected XML elements or XML attributes are encountered, or an expected XML element is missing."
  },
  "index.html": {
    "href": "index.html",
    "title": "aas-core 3.0RC02 C#",
    "keywords": "aas-core 3.0RC02 C# This is a software development kit (SDK) to: manipulate, verify, and de/serialize to and from JSON and XML ... Asset Administration Shells based on the version 3.0VRC02 of the meta-model . For a brief introduction, see Getting Started . For a detailed documentation of the API, see API ."
  }
}