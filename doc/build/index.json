{
  "api/AasCore.Aas3_0_RC02.AasSubmodelElements.html": {
    "href": "api/AasCore.Aas3_0_RC02.AasSubmodelElements.html",
    "title": "Enum AasSubmodelElements",
    "keywords": "Enum AasSubmodelElements Enumeration of all possible elements of a SubmodelElementList . Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum AasSubmodelElements : int Fields Name Description AnnotatedRelationshipElement BasicEventElement Blob Capability DataElement Entity EventElement File MultiLanguageProperty Operation Property Range ReferenceElement RelationshipElement SubmodelElement SubmodelElementCollection SubmodelElementList"
  },
  "api/AasCore.Aas3_0_RC02.AdministrativeInformation.html": {
    "href": "api/AasCore.Aas3_0_RC02.AdministrativeInformation.html",
    "title": "Class AdministrativeInformation",
    "keywords": "Class AdministrativeInformation Administrative meta-information for an element like version information. Inheritance System.Object AdministrativeInformation Implements IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AdministrativeInformation : object, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-005: If Version is not specified then also Revision shall be unspecified. This means, a revision requires a version. If there is no version there is no revision neither. Revision is optional. Constructors | Improve this Doc View Source AdministrativeInformation(Nullable<List<EmbeddedDataSpecification>>, Nullable<String>, Nullable<String>) Declaration public AdministrativeInformation(List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, string? version = null, string? revision = null) Parameters Type Name Description System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < System.String > version System.Nullable < System.String > revision Properties | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Revision Revision of the element. Declaration public string? Revision { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Version Version of the element. Declaration public string? Version { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.AnnotatedRelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.AnnotatedRelationshipElement.html",
    "title": "Class AnnotatedRelationshipElement",
    "keywords": "Class AnnotatedRelationshipElement An annotated relationship element is a relationship element that can be annotated with additional data elements. Inheritance System.Object AnnotatedRelationshipElement Implements IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AnnotatedRelationshipElement : object, IRelationshipElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source AnnotatedRelationshipElement(Reference, Reference, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<IDataElement>>) Declaration public AnnotatedRelationshipElement(Reference first, Reference second, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<IDataElement>? annotations = null) Parameters Type Name Description Reference first Reference second System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < IDataElement >> annotations Properties | Improve this Doc View Source Annotations A data element that represents an annotation that holds for the relationship between the two elements Declaration public List<IDataElement>? Annotations { get; set; } Property Value Type Description System.Nullable < List < IDataElement >> | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source First Reference to the first element in the relationship taking the role of the subject. Declaration public Reference First { get; set; } Property Value Type Description Reference | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source Second Reference to the second element in the relationship taking the role of the object. Declaration public Reference Second { get; set; } Property Value Type Description Reference | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverAnnotationsOrEmpty() Iterate over Annotations, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<IDataElement> OverAnnotationsOrEmpty() Returns Type Description IEnumerable < IDataElement > | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.AssetAdministrationShell.html": {
    "href": "api/AasCore.Aas3_0_RC02.AssetAdministrationShell.html",
    "title": "Class AssetAdministrationShell",
    "keywords": "Class AssetAdministrationShell An asset administration shell. Inheritance System.Object AssetAdministrationShell Implements IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AssetAdministrationShell : object, IIdentifiable, IReferable, IHasExtensions, IHasDataSpecification, IClass Constructors | Improve this Doc View Source AssetAdministrationShell(String, AssetInformation, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, AdministrativeInformation, Nullable<List<EmbeddedDataSpecification>>, Reference, Nullable<List<Reference>>) Declaration public AssetAdministrationShell(string id, AssetInformation assetInformation, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, AdministrativeInformation administration = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, Reference derivedFrom = null, List<Reference>? submodels = null) Parameters Type Name Description System.String id AssetInformation assetInformation System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum AdministrativeInformation administration System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications Reference derivedFrom System.Nullable < List < Reference >> submodels Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration public AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source AssetInformation Meta-information about the asset the AAS is representing. Declaration public AssetInformation AssetInformation { get; set; } Property Value Type Description AssetInformation | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source DerivedFrom The reference to the AAS the AAS was derived from. Declaration public Reference DerivedFrom { get; set; } Property Value Type Description Reference | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source Id The globally unique identification of the element. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Submodels References to submodels of the AAS. Declaration public List<Reference>? Submodels { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks A submodel is a description of an aspect of the asset the AAS is representing. The asset of an AAS is typically described by one or more submodels. Temporarily no submodel might be assigned to the AAS. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverSubmodelsOrEmpty() Iterate over Submodels, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSubmodelsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.AssetInformation.html": {
    "href": "api/AasCore.Aas3_0_RC02.AssetInformation.html",
    "title": "Class AssetInformation",
    "keywords": "Class AssetInformation In AssetInformation identifying meta data of the asset that is represented by an AAS is defined. Inheritance System.Object AssetInformation Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class AssetInformation : object, IClass Remarks The asset may either represent an asset type or an asset instance. The asset has a globally unique identifier plus – if needed – additional domain specific (proprietary) identifiers. However, to support the corner case of very first phase of lifecycle where a stabilised/constant_set global asset identifier does not already exist, the corresponding attribute GlobalAssetId is optional. Constraints: Constraint AASd-116: globalAssetId (case-insensitive) is a reserved key. If used as value for Name then Value shall be identical to GlobalAssetId . Constructors | Improve this Doc View Source AssetInformation(AssetKind, Reference, Nullable<List<SpecificAssetId>>, Resource) Declaration public AssetInformation(AssetKind assetKind, Reference globalAssetId = null, List<SpecificAssetId>? specificAssetIds = null, Resource defaultThumbnail = null) Parameters Type Name Description AssetKind assetKind Reference globalAssetId System.Nullable < List < SpecificAssetId >> specificAssetIds Resource defaultThumbnail Properties | Improve this Doc View Source AssetKind Denotes whether the Asset is of kind Type or Instance . Declaration public AssetKind AssetKind { get; set; } Property Value Type Description AssetKind | Improve this Doc View Source DefaultThumbnail Thumbnail of the asset represented by the Asset Administration Shell. Declaration public Resource DefaultThumbnail { get; set; } Property Value Type Description Resource Remarks Used as default. | Improve this Doc View Source GlobalAssetId Global identifier of the asset the AAS is representing. Declaration public Reference GlobalAssetId { get; set; } Property Value Type Description Reference Remarks This attribute is required as soon as the AAS is exchanged via partners in the life cycle of the asset. In a first phase of the life cycle the asset might not yet have a global ID but already an internal identifier. The internal identifier would be modelled via SpecificAssetIds . This is a global reference. | Improve this Doc View Source SpecificAssetIds Additional domain-specific, typically proprietary identifier for the asset like e.g., serial number etc. Declaration public List<SpecificAssetId>? SpecificAssetIds { get; set; } Property Value Type Description System.Nullable < List < SpecificAssetId >> Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverSpecificAssetIdsOrEmpty() Iterate over SpecificAssetIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<SpecificAssetId> OverSpecificAssetIdsOrEmpty() Returns Type Description IEnumerable < SpecificAssetId > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.AssetKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.AssetKind.html",
    "title": "Enum AssetKind",
    "keywords": "Enum AssetKind Enumeration for denoting whether an asset is a type asset or an instance asset. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum AssetKind : int Fields Name Description Instance concrete, clearly identifiable component of a certain type Type hardware or software element which specifies the common attributes shared by all instances of the type"
  },
  "api/AasCore.Aas3_0_RC02.BasicEventElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.BasicEventElement.html",
    "title": "Class BasicEventElement",
    "keywords": "Class BasicEventElement A basic event element. Inheritance System.Object BasicEventElement Implements IEventElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class BasicEventElement : object, IEventElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source BasicEventElement(Reference, Direction, StateOfEvent, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<String>, Reference, Nullable<String>, Nullable<String>, Nullable<String>) Declaration public BasicEventElement(Reference observed, Direction direction, StateOfEvent state, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, string? messageTopic = null, Reference messageBroker = null, string? lastUpdate = null, string? minInterval = null, string? maxInterval = null) Parameters Type Name Description Reference observed Direction direction StateOfEvent state System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < System.String > messageTopic Reference messageBroker System.Nullable < System.String > lastUpdate System.Nullable < System.String > minInterval System.Nullable < System.String > maxInterval Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source Direction Direction of event. Declaration public Direction Direction { get; set; } Property Value Type Description Direction Remarks Can be { Input, Output } . | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source LastUpdate Timestamp in UTC, when the last event was received (input direction) or sent (output direction). Declaration public string? LastUpdate { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source MaxInterval For input direction: not applicable. Declaration public string? MaxInterval { get; set; } Property Value Type Description System.Nullable < System.String > Remarks For output direction: maximum interval in time, the respective Referable shall send an update of the status of the event, even if no other trigger condition for the event was not met. Might be not specified, that is, there is no maximum interval | Improve this Doc View Source MessageBroker Information, which outer message infrastructure shall handle messages for the IEventElement . Refers to a Submodel , SubmodelElementList , SubmodelElementCollection or Entity , which contains IDataElement 's describing the proprietary specification for the message broker. Declaration public Reference MessageBroker { get; set; } Property Value Type Description Reference Remarks For different message infrastructure, e.g., OPC UA or MQTT or AMQP, this proprietary specification could be standardized by having respective Submodels. | Improve this Doc View Source MessageTopic Information for the outer message infrastructure for scheduling the event to the respective communication channel. Declaration public string? MessageTopic { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source MinInterval For input direction, reports on the maximum frequency, the software entity behind the respective Referable can handle input events. Declaration public string? MinInterval { get; set; } Property Value Type Description System.Nullable < System.String > Remarks For output events, specifies the maximum frequency of outputting this event to an outer infrastructure. Might be not specified, that is, there is no minimum interval. | Improve this Doc View Source Observed Reference to the IReferable , which defines the scope of the event. Can be AssetAdministrationShell , Submodel , or ISubmodelElement . Declaration public Reference Observed { get; set; } Property Value Type Description Reference Remarks Reference to a referable, e.g., a data element or a submodel, that is being observed. | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source State State of event. Declaration public StateOfEvent State { get; set; } Property Value Type Description StateOfEvent Remarks Can be { On, Off } . | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IEventElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Blob.html": {
    "href": "api/AasCore.Aas3_0_RC02.Blob.html",
    "title": "Class Blob",
    "keywords": "Class Blob A Blob is a data element that represents a file that is contained with its source code in the value attribute. Inheritance System.Object Blob Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Blob : object, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source Blob(String, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Byte[]) Declaration public Blob(string contentType, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, byte[] value = null) Parameters Type Name Description System.String contentType System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Byte [] value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source ContentType Content type of the content of the Blob . Declaration public string ContentType { get; set; } Property Value Type Description System.String Remarks The content type (MIME type) states which file extensions the file can have. Valid values are content types like e.g. application/json , application/xls , image/jpg . The allowed values are defined as in RFC2046. | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the Blob instance of a blob data element. Declaration public byte[] Value { get; set; } Property Value Type Description System.Byte [] Remarks In contrast to the file property the file content is stored directly as value in the Blob data element. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Capability.html": {
    "href": "api/AasCore.Aas3_0_RC02.Capability.html",
    "title": "Class Capability",
    "keywords": "Class Capability A capability is the implementation-independent description of the potential of an asset to achieve a certain effect in the physical or virtual world. Inheritance System.Object Capability Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Capability : object, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The SemanticId of a capability is typically an ontology. Thus, reasoning on capabilities is enabled. Constructors | Improve this Doc View Source Capability(Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>) Declaration public Capability(List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null) Parameters Type Name Description System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.ConceptDescription.html": {
    "href": "api/AasCore.Aas3_0_RC02.ConceptDescription.html",
    "title": "Class ConceptDescription",
    "keywords": "Class ConceptDescription The semantics of a property or other elements that may have a semantic description is defined by a concept description. Inheritance System.Object ConceptDescription Implements IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ConceptDescription : object, IIdentifiable, IReferable, IHasExtensions, IHasDataSpecification, IClass Remarks The description of the concept should follow a standardized schema (realized as data specification template). Constraints: Constraint AASd-051: A ConceptDescription shall have one of the following categories VALUE , PROPERTY , REFERENCE , DOCUMENT , CAPABILITY , RELATIONSHIP , COLLECTION , FUNCTION , EVENT , ENTITY , APPLICATION_CLASS , QUALIFIER , VIEW . Default: PROPERTY . Constraint AASc-004: For a ConceptDescription with Category PROPERTY or VALUE using data specification IEC61360, the DataType is mandatory and shall be one of: DATE , STRING , STRING_TRANSLATABLE , INTEGER_MEASURE , INTEGER_COUNT , INTEGER_CURRENCY , REAL_MEASURE , REAL_COUNT , REAL_CURRENCY , BOOLEAN , RATIONAL , RATIONAL_MEASURE , TIME , TIMESTAMP . Constraint AASc-005: For a ConceptDescription with Category REFERENCE using data specification IEC61360, the DataType is mandatory and shall be one of: STRING , IRI , IRDI . Constraint AASc-006: For a ConceptDescription with Category DOCUMENT using data specification IEC61360, the DataType is mandatory and shall be defined. Constraint AASc-007: For a ConceptDescription with Category QUALIFIER_TYPE using data specification IEC61360, the DataType is mandatory and shall be Constraint AASc-008: For all ConceptDescription 's with a category except Category VALUE using data specification IEC61360, Definition is mandatory and shall be defined at least in English. Constraint AASc-003: For a ConceptDescription with Category VALUE using data specification IEC61360, the Value shall be set. Constructors | Improve this Doc View Source ConceptDescription(String, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, AdministrativeInformation, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<Reference>>) Declaration public ConceptDescription(string id, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, AdministrativeInformation administration = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<Reference>? isCaseOf = null) Parameters Type Name Description System.String id System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum AdministrativeInformation administration System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < Reference >> isCaseOf Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration public AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source Id The globally unique identification of the element. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source IsCaseOf Reference to an external definition the concept is compatible to or was derived from. Declaration public List<Reference>? IsCaseOf { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Compare to is-case-of relationship in ISO 13584-32 & IEC EN 61360\" Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverIsCaseOfOrEmpty() Iterate over IsCaseOf, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverIsCaseOfOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IIdentifiable IReferable IHasExtensions IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Constants.html": {
    "href": "api/AasCore.Aas3_0_RC02.Constants.html",
    "title": "Class Constants",
    "keywords": "Class Constants Provide constant values of the meta-model. Inheritance System.Object Constants Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Constants : object Fields | Improve this Doc View Source AasIdentifiables Declaration public static readonly HashSet<KeyTypes?> AasIdentifiables Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source AasReferableNonIdentifiables Declaration public static readonly HashSet<KeyTypes?> AasReferableNonIdentifiables Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source AasReferables Declaration public static readonly HashSet<KeyTypes?> AasReferables Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source AasSubmodelElementsAsKeys Declaration public static readonly HashSet<KeyTypes?> AasSubmodelElementsAsKeys Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source DataTypeIec61360ForDocument Declaration public static readonly HashSet<DataTypeIec61360?> DataTypeIec61360ForDocument Field Value Type Description HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source DataTypeIec61360ForPropertyOrValue Declaration public static readonly HashSet<DataTypeIec61360?> DataTypeIec61360ForPropertyOrValue Field Value Type Description HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source DataTypeIec61360ForReference Declaration public static readonly HashSet<DataTypeIec61360?> DataTypeIec61360ForReference Field Value Type Description HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source FragmentKeys Declaration public static readonly HashSet<KeyTypes?> FragmentKeys Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source GenericFragmentKeys Declaration public static readonly HashSet<KeyTypes?> GenericFragmentKeys Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source GenericGloballyIdentifiables Declaration public static readonly HashSet<KeyTypes?> GenericGloballyIdentifiables Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source GloballyIdentifiables Declaration public static readonly HashSet<KeyTypes?> GloballyIdentifiables Field Value Type Description HashSet < System.Nullable < KeyTypes >> | Improve this Doc View Source Iec61360DataTypesWithUnit Declaration public static readonly HashSet<DataTypeIec61360?> Iec61360DataTypesWithUnit Field Value Type Description HashSet < System.Nullable < DataTypeIec61360 >> | Improve this Doc View Source ValidCategoriesForConceptDescription Declaration public static readonly HashSet<string> ValidCategoriesForConceptDescription Field Value Type Description HashSet < System.String > | Improve this Doc View Source ValidCategoriesForDataElement Declaration public static readonly HashSet<string> ValidCategoriesForDataElement Field Value Type Description HashSet < System.String >"
  },
  "api/AasCore.Aas3_0_RC02.DataSpecificationIec61360.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataSpecificationIec61360.html",
    "title": "Class DataSpecificationIec61360",
    "keywords": "Class DataSpecificationIec61360 Content of data specification template for concept descriptions for properties, values and value lists conformant to IEC 61360. Inheritance System.Object DataSpecificationIec61360 Implements IDataSpecificationContent IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class DataSpecificationIec61360 : object, IDataSpecificationContent, IClass Remarks IEC61360 requires also a globally unique identifier for a concept description. This ID is not part of the data specification template. Instead the Id as inherited via IIdentifiable is used. Same holds for administrative information like the version and revision. IdShort and ShortName are very similar. However, in this case the decision was to add ShortName explicitly to the data specification. Same holds for DisplayName and PreferredName . Same holds for Description and Definition . Constraints: Constraint AASc-010: If Value is not empty then ValueList shall be empty and vice versa. Constraint AASc-009: If DataType one of: IntegerMeasure , RealMeasure , RationalMeasure , IntegerCurrency , RealCurrency , then Unit or UnitId shall be defined. Constructors | Improve this Doc View Source DataSpecificationIec61360(List<LangString>, Nullable<List<LangString>>, Nullable<String>, Reference, Nullable<String>, Nullable<String>, Nullable<DataTypeIec61360>, Nullable<List<LangString>>, Nullable<String>, ValueList, Nullable<String>, Nullable<LevelType>) Declaration public DataSpecificationIec61360(List<LangString> preferredName, List<LangString>? shortName = null, string? unit = null, Reference unitId = null, string? sourceOfDefinition = null, string? symbol = null, DataTypeIec61360? dataType = null, List<LangString>? definition = null, string? valueFormat = null, ValueList valueList = null, string? value = null, LevelType? levelType = null) Parameters Type Name Description List < LangString > preferredName System.Nullable < List < LangString >> shortName System.Nullable < System.String > unit Reference unitId System.Nullable < System.String > sourceOfDefinition System.Nullable < System.String > symbol System.Nullable < DataTypeIec61360 > dataType System.Nullable < List < LangString >> definition System.Nullable < System.String > valueFormat ValueList valueList System.Nullable < System.String > value System.Nullable < LevelType > levelType Properties | Improve this Doc View Source DataType Data Type Declaration public DataTypeIec61360? DataType { get; set; } Property Value Type Description System.Nullable < DataTypeIec61360 > | Improve this Doc View Source Definition Definition in different languages Declaration public List<LangString>? Definition { get; set; } Property Value Type Description System.Nullable < List < LangString >> | Improve this Doc View Source LevelType Set of levels. Declaration public LevelType? LevelType { get; set; } Property Value Type Description System.Nullable < LevelType > | Improve this Doc View Source PreferredName Preferred name Declaration public List<LangString> PreferredName { get; set; } Property Value Type Description List < LangString > Remarks Constraints: Constraint AASc-002: PreferredName shall be provided at least in English. | Improve this Doc View Source ShortName Short name Declaration public List<LangString>? ShortName { get; set; } Property Value Type Description System.Nullable < List < LangString >> | Improve this Doc View Source SourceOfDefinition Source of definition Declaration public string? SourceOfDefinition { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Symbol Symbol Declaration public string? Symbol { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Unit Unit Declaration public string? Unit { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source UnitId Unique unit id Declaration public Reference UnitId { get; set; } Property Value Type Description Reference Remarks Unit and UnitId need to be consistent if both attributes are set It is recommended to use a global reference. Although the UnitId is a global reference there might exist a ConceptDescription with data specification DataSpecificationPhysicalUnit with the same ID. | Improve this Doc View Source Value Value Declaration public string? Value { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ValueFormat Value Format Declaration public string? ValueFormat { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ValueList List of allowed values Declaration public ValueList ValueList { get; set; } Property Value Type Description ValueList Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverDefinitionOrEmpty() Iterate over Definition, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDefinitionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverShortNameOrEmpty() Iterate over ShortName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverShortNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataSpecificationContent IClass"
  },
  "api/AasCore.Aas3_0_RC02.DataSpecificationPhysicalUnit.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataSpecificationPhysicalUnit.html",
    "title": "Class DataSpecificationPhysicalUnit",
    "keywords": "Class DataSpecificationPhysicalUnit Inheritance System.Object DataSpecificationPhysicalUnit Implements IDataSpecificationContent IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class DataSpecificationPhysicalUnit : object, IDataSpecificationContent, IClass Constructors | Improve this Doc View Source DataSpecificationPhysicalUnit(String, String, List<LangString>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>) Declaration public DataSpecificationPhysicalUnit(string unitName, string unitSymbol, List<LangString> definition, string? siNotation = null, string? siName = null, string? dinNotation = null, string? eceName = null, string? eceCode = null, string? nistName = null, string? sourceOfDefinition = null, string? conversionFactor = null, string? registrationAuthorityId = null, string? supplier = null) Parameters Type Name Description System.String unitName System.String unitSymbol List < LangString > definition System.Nullable < System.String > siNotation System.Nullable < System.String > siName System.Nullable < System.String > dinNotation System.Nullable < System.String > eceName System.Nullable < System.String > eceCode System.Nullable < System.String > nistName System.Nullable < System.String > sourceOfDefinition System.Nullable < System.String > conversionFactor System.Nullable < System.String > registrationAuthorityId System.Nullable < System.String > supplier Properties | Improve this Doc View Source ConversionFactor Conversion factor Declaration public string? ConversionFactor { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Definition Definition in different languages Declaration public List<LangString> Definition { get; set; } Property Value Type Description List < LangString > | Improve this Doc View Source DinNotation Notation of physical unit conformant to DIN Declaration public string? DinNotation { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source EceCode Code of physical unit conformant to ECE Declaration public string? EceCode { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source EceName Name of physical unit conformant to ECE Declaration public string? EceName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NistName Name of NIST physical unit Declaration public string? NistName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source RegistrationAuthorityId Registration authority ID Declaration public string? RegistrationAuthorityId { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SiName Name of SI physical unit Declaration public string? SiName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SiNotation Notation of SI physical unit Declaration public string? SiNotation { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SourceOfDefinition Source of definition Declaration public string? SourceOfDefinition { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Supplier Supplier Declaration public string? Supplier { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source UnitName Name of the physical unit Declaration public string UnitName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitSymbol Symbol for the physical unit Declaration public string UnitSymbol { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataSpecificationContent IClass"
  },
  "api/AasCore.Aas3_0_RC02.DataTypeDefXsd.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataTypeDefXsd.html",
    "title": "Enum DataTypeDefXsd",
    "keywords": "Enum DataTypeDefXsd Enumeration listing all xsd anySimpleTypes Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum DataTypeDefXsd : int Fields Name Description AnyUri Base64Binary Boolean Byte Date DateTime DateTimeStamp DayTimeDuration Decimal Double Duration Float GDay GMonth GMonthDay GYear GYearMonth HexBinary Int Integer Long NegativeInteger NonNegativeInteger NonPositiveInteger PositiveInteger Short String Time UnsignedByte UnsignedInt UnsignedLong UnsignedShort YearMonthDuration"
  },
  "api/AasCore.Aas3_0_RC02.DataTypeIec61360.html": {
    "href": "api/AasCore.Aas3_0_RC02.DataTypeIec61360.html",
    "title": "Enum DataTypeIec61360",
    "keywords": "Enum DataTypeIec61360 Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum DataTypeIec61360 : int Fields Name Description Blob values containing the content of a file. Values may be binaries. Boolean values representing truth of logic or Boolean algebra (TRUE, FALSE) Date values containing a calendar date, conformant to ISO 8601:2004 Format yyyy-mm-dd Example from IEC 61360-1:2017: \"1999-05-31\" is the [DATE] representation of: \"31 May 1999\". File values containing an address to a file. The values are of type URI and can represent an absolute or relative path. Html Values containing string with any sequence of characters, using the syntax of HTML5 (see W3C Recommendation 28:2014) IntegerCount values containing values of type INTEGER but are no currencies or measures IntegerCurrency values containing values of type INTEGER that are currencies IntegerMeasure values containing values that are measure of type INTEGER. In addition such a value comes with a physical unit. Irdi values conforming to ISO/IEC 11179 series global identifier sequences Iri values containing values of type STRING conformant to Rfc 3987 Rational values containing values of type rational RationalMeasure values containing values of type rational. In addition such a value comes with a physical unit. RealCount values containing numbers that can be written as a terminating or non-terminating decimal; a rational or irrational number but are no currencies or measures RealCurrency values containing values of type REAL that are currencies RealMeasure values containing values that are measures of type REAL. In addition such a value comes with a physical unit. String values consisting of sequence of characters but cannot be translated into other languages StringTranslatable values containing string but shall be represented as different string in different languages Time values containing a time, conformant to ISO 8601:2004 but restricted to what is allowed in the corresponding type in xml. Timestamp values containing a time, conformant to ISO 8601:2004 but restricted to what is allowed in the corresponding type in xml."
  },
  "api/AasCore.Aas3_0_RC02.Direction.html": {
    "href": "api/AasCore.Aas3_0_RC02.Direction.html",
    "title": "Enum Direction",
    "keywords": "Enum Direction Direction Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum Direction : int Fields Name Description Input Input direction. Output Output direction"
  },
  "api/AasCore.Aas3_0_RC02.EmbeddedDataSpecification.html": {
    "href": "api/AasCore.Aas3_0_RC02.EmbeddedDataSpecification.html",
    "title": "Class EmbeddedDataSpecification",
    "keywords": "Class EmbeddedDataSpecification Embed the content of a data specification. Inheritance System.Object EmbeddedDataSpecification Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class EmbeddedDataSpecification : object, IClass Constructors | Improve this Doc View Source EmbeddedDataSpecification(Reference, IDataSpecificationContent) Declaration public EmbeddedDataSpecification(Reference dataSpecification, IDataSpecificationContent dataSpecificationContent) Parameters Type Name Description Reference dataSpecification IDataSpecificationContent dataSpecificationContent Properties | Improve this Doc View Source DataSpecification Reference to the data specification Declaration public Reference DataSpecification { get; set; } Property Value Type Description Reference | Improve this Doc View Source DataSpecificationContent Actual content of the data specification Declaration public IDataSpecificationContent DataSpecificationContent { get; set; } Property Value Type Description IDataSpecificationContent Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.Entity.html": {
    "href": "api/AasCore.Aas3_0_RC02.Entity.html",
    "title": "Class Entity",
    "keywords": "Class Entity An entity is a submodel element that is used to model entities. Inheritance System.Object Entity Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Entity : object, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-014: Either the attribute GlobalAssetId or SpecificAssetId of an Entity must be set if EntityType is set to SelfManagedEntity . They are not existing otherwise. Constructors | Improve this Doc View Source Entity(EntityType, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<ISubmodelElement>>, Reference, SpecificAssetId) Declaration public Entity(EntityType entityType, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<ISubmodelElement>? statements = null, Reference globalAssetId = null, SpecificAssetId specificAssetId = null) Parameters Type Name Description EntityType entityType System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < ISubmodelElement >> statements Reference globalAssetId SpecificAssetId specificAssetId Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source EntityType Describes whether the entity is a co-managed entity or a self-managed entity. Declaration public EntityType EntityType { get; set; } Property Value Type Description EntityType | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source GlobalAssetId Global identifier of the asset the entity is representing. Declaration public Reference GlobalAssetId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SpecificAssetId Reference to a specific asset ID representing a supplementary identifier of the asset represented by the Asset Administration Shell. Declaration public SpecificAssetId SpecificAssetId { get; set; } Property Value Type Description SpecificAssetId | Improve this Doc View Source Statements Describes statements applicable to the entity by a set of submodel elements, typically with a qualified value. Declaration public List<ISubmodelElement>? Statements { get; set; } Property Value Type Description System.Nullable < List < ISubmodelElement >> | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverStatementsOrEmpty() Iterate over Statements, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverStatementsOrEmpty() Returns Type Description IEnumerable < ISubmodelElement > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.EntityType.html": {
    "href": "api/AasCore.Aas3_0_RC02.EntityType.html",
    "title": "Enum EntityType",
    "keywords": "Enum EntityType Enumeration for denoting whether an entity is a self-managed entity or a co-managed entity. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum EntityType : int Fields Name Description CoManagedEntity For co-managed entities there is no separate AAS. Co-managed entities need to be part of a self-managed entity. SelfManagedEntity Self-Managed Entities have their own AAS but can be part of the bill of material of a composite self-managed entity."
  },
  "api/AasCore.Aas3_0_RC02.Environment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Environment.html",
    "title": "Class Environment",
    "keywords": "Class Environment Container for the sets of different identifiables. Inheritance System.Object Environment Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Environment : object, IClass Remarks w.r.t. file exchange: There is exactly one environment independent on how many files the contained elements are split. If the file is split then there shall be no element with the same identifier in two different files. Constructors | Improve this Doc View Source Environment(Nullable<List<AssetAdministrationShell>>, Nullable<List<Submodel>>, Nullable<List<ConceptDescription>>) Declaration public Environment(List<AssetAdministrationShell>? assetAdministrationShells = null, List<Submodel>? submodels = null, List<ConceptDescription>? conceptDescriptions = null) Parameters Type Name Description System.Nullable < List < AssetAdministrationShell >> assetAdministrationShells System.Nullable < List < Submodel >> submodels System.Nullable < List < ConceptDescription >> conceptDescriptions Properties | Improve this Doc View Source AssetAdministrationShells Asset administration shell Declaration public List<AssetAdministrationShell>? AssetAdministrationShells { get; set; } Property Value Type Description System.Nullable < List < AssetAdministrationShell >> | Improve this Doc View Source ConceptDescriptions Concept description Declaration public List<ConceptDescription>? ConceptDescriptions { get; set; } Property Value Type Description System.Nullable < List < ConceptDescription >> | Improve this Doc View Source Submodels Submodel Declaration public List<Submodel>? Submodels { get; set; } Property Value Type Description System.Nullable < List < Submodel >> Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverAssetAdministrationShellsOrEmpty() Iterate over AssetAdministrationShells, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<AssetAdministrationShell> OverAssetAdministrationShellsOrEmpty() Returns Type Description IEnumerable < AssetAdministrationShell > | Improve this Doc View Source OverConceptDescriptionsOrEmpty() Iterate over ConceptDescriptions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ConceptDescription> OverConceptDescriptionsOrEmpty() Returns Type Description IEnumerable < ConceptDescription > | Improve this Doc View Source OverSubmodelsOrEmpty() Iterate over Submodels, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Submodel> OverSubmodelsOrEmpty() Returns Type Description IEnumerable < Submodel > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.EventPayload.html": {
    "href": "api/AasCore.Aas3_0_RC02.EventPayload.html",
    "title": "Class EventPayload",
    "keywords": "Class EventPayload Defines the necessary information of an event instance sent out or received. Inheritance System.Object EventPayload Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class EventPayload : object, IClass Constructors | Improve this Doc View Source EventPayload(Reference, Reference, String, Reference, Reference, Nullable<String>, Reference, Nullable<String>) Declaration public EventPayload(Reference source, Reference observableReference, string timeStamp, Reference sourceSemanticId = null, Reference observableSemanticId = null, string? topic = null, Reference subjectId = null, string? payload = null) Parameters Type Name Description Reference source Reference observableReference System.String timeStamp Reference sourceSemanticId Reference observableSemanticId System.Nullable < System.String > topic Reference subjectId System.Nullable < System.String > payload Properties | Improve this Doc View Source ObservableReference Reference to the referable, which defines the scope of the event. Declaration public Reference ObservableReference { get; set; } Property Value Type Description Reference Remarks Can be AssetAdministrationShell , Submodel or ISubmodelElement . | Improve this Doc View Source ObservableSemanticId SemanticId of the referable which defines the scope of the event, if available. Declaration public Reference ObservableSemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source Payload Event specific payload. Declaration public string? Payload { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Source Reference to the source event element, including identification of AssetAdministrationShell , Submodel , ISubmodelElement 's. Declaration public Reference Source { get; set; } Property Value Type Description Reference | Improve this Doc View Source SourceSemanticId SemanticId of the source event element, if available Declaration public Reference SourceSemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SubjectId Subject, who/which initiated the creation. Declaration public Reference SubjectId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source TimeStamp Timestamp in UTC, when this event was triggered. Declaration public string TimeStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source Topic Information for the outer message infrastructure for scheduling the event to the respective communication channel. Declaration public string? Topic { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.Extension.html": {
    "href": "api/AasCore.Aas3_0_RC02.Extension.html",
    "title": "Class Extension",
    "keywords": "Class Extension Single extension of an element. Inheritance System.Object Extension Implements IHasSemantics IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Extension : object, IHasSemantics, IClass Constructors | Improve this Doc View Source Extension(String, Reference, Nullable<List<Reference>>, Nullable<DataTypeDefXsd>, Nullable<String>, Reference) Declaration public Extension(string name, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, DataTypeDefXsd? valueType = null, string? value = null, Reference refersTo = null) Parameters Type Name Description System.String name Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < DataTypeDefXsd > valueType System.Nullable < System.String > value Reference refersTo Properties | Improve this Doc View Source Name Name of the extension. Declaration public string Name { get; set; } Property Value Type Description System.String Remarks Constraints: Constraint AASd-077: The name of an extension within IHasExtensions needs to be unique. | Improve this Doc View Source RefersTo Reference to an element the extension refers to. Declaration public Reference RefersTo { get; set; } Property Value Type Description Reference | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Value of the extension Declaration public string? Value { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ValueType Type of the value of the extension. Declaration public DataTypeDefXsd? ValueType { get; set; } Property Value Type Description System.Nullable < DataTypeDefXsd > Remarks Default: String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source ValueTypeOrDefault() Return the ValueType or the default value if it has not been set. Declaration public DataTypeDefXsd ValueTypeOrDefault() Returns Type Description DataTypeDefXsd Implements IHasSemantics IClass"
  },
  "api/AasCore.Aas3_0_RC02.File.html": {
    "href": "api/AasCore.Aas3_0_RC02.File.html",
    "title": "Class File",
    "keywords": "Class File A File is a data element that represents an address to a file (a locator). Inheritance System.Object File Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class File : object, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The value is an URI that can represent an absolute or relative path. Constructors | Improve this Doc View Source File(String, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<String>) Declaration public File(string contentType, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, string? value = null) Parameters Type Name Description System.String contentType System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < System.String > value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source ContentType Content type of the content of the file. Declaration public string ContentType { get; set; } Property Value Type Description System.String Remarks The content type states which file extensions the file can have. | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Path and name of the referenced file (with file extension). Declaration public string? Value { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The path can be absolute or relative. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.html": {
    "href": "api/AasCore.Aas3_0_RC02.html",
    "title": "Namespace AasCore.Aas3_0_RC02",
    "keywords": "Namespace AasCore.Aas3_0_RC02 Classes AdministrativeInformation Administrative meta-information for an element like version information. AnnotatedRelationshipElement An annotated relationship element is a relationship element that can be annotated with additional data elements. AssetAdministrationShell An asset administration shell. AssetInformation In AssetInformation identifying meta data of the asset that is represented by an AAS is defined. BasicEventElement A basic event element. Blob A Blob is a data element that represents a file that is contained with its source code in the value attribute. Capability A capability is the implementation-independent description of the potential of an asset to achieve a certain effect in the physical or virtual world. ConceptDescription The semantics of a property or other elements that may have a semantic description is defined by a concept description. Constants Provide constant values of the meta-model. DataSpecificationIec61360 Content of data specification template for concept descriptions for properties, values and value lists conformant to IEC 61360. DataSpecificationPhysicalUnit EmbeddedDataSpecification Embed the content of a data specification. Entity An entity is a submodel element that is used to model entities. Environment Container for the sets of different identifiables. EventPayload Defines the necessary information of an event instance sent out or received. Extension Single extension of an element. File A File is a data element that represents an address to a file (a locator). Jsonization Provide de/serialization of meta-model classes to/from JSON. Jsonization.Deserialize Deserialize instances of meta-model classes from JSON nodes. Jsonization.Exception Represent a critical error during the deserialization. Jsonization.Serialize Serialize instances of meta-model classes to JSON elements. Key A key is a reference to an element by its ID. LangString Strings with language tags MultiLanguageProperty A property is a data element that has a multi-language value. Operation An operation is a submodel element with input and output variables. OperationVariable The value of an operation variable is a submodel element that is used as input and/or output variable of an operation. Property A property is a data element that has a single value. Qualifier A qualifier is a type-value-pair that makes additional statements w.r.t. the value of the element. Range A range data element is a data element that defines a range with min and max. Reference Reference to either a model element of the same or another AAS or to an external entity. ReferenceElement A reference element is a data element that defines a logical reference to another element within the same or another AAS or a reference to an external object or entity. RelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). Reporting Provide reporting for de/serialization and verification. Reporting.Error Represent an error during the deserialization or the verification. Reporting.IndexSegment Reporting.NameSegment Reporting.Segment Capture a path segment of a value in a model. Resource Resource represents an address to a file (a locator). The value is an URI that can represent an absolute or relative path SpecificAssetId A specific asset ID describes a generic supplementary identifying attribute of the asset. Stringification Submodel A submodel defines a specific aspect of the asset represented by the AAS. SubmodelElementCollection A submodel element collection is a kind of struct, i.e. a a logical encapsulation of multiple named values. It has a fixed number of submodel elements. SubmodelElementList A submodel element list is an ordered list of submodel elements. ValueList A set of value reference pairs. ValueReferencePair A value reference pair within a value list. Each value has a global unique id defining its semantic. Verification Verify that the instances of the meta-model satisfy the invariants. Visitation Visitation.AbstractTransformer<T> Perform double-dispatch to transform recursively the instances into something else. Visitation.AbstractTransformerWithContext<TContext, T> Perform double-dispatch to transform recursively the instances into something else. Visitation.AbstractVisitor Perform double-dispatch to visit the concrete instances. Visitation.AbstractVisitorWithContext<TContext> Perform double-dispatch to visit the concrete instances with context. Visitation.VisitorThrough Just descend through the instances without any action. Xmlization Provide de/serialization of meta-model classes to/from XML. Xmlization.Deserialize Deserialize instances of meta-model classes from XML. Xmlization.Exception Represent a critical error during the deserialization. Xmlization.Serialize Serialize instances of meta-model classes to XML. Interfaces IClass Represent a general class of an AAS model. IDataElement A data element is a submodel element that is not further composed out of other submodel elements. IDataSpecificationContent Data specification content is part of a data specification template and defines which additional attributes shall be added to the element instance that references the data specification template and meta information about the template itself. IEventElement An event element. IHasDataSpecification Element that can be extended by using data specification templates. IHasExtensions Element that can be extended by proprietary extensions. IHasKind An element with a kind is an element that can either represent a template or an instance. IHasSemantics Element that can have a semantic definition plus some supplemental semantic definitions. IIdentifiable An element that has a globally unique identifier. IQualifiable The value of a qualifiable element may be further qualified by one or more qualifiers. IReferable An element that is referable by its IdShort . IRelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). ISubmodelElement A submodel element is an element suitable for the description and differentiation of assets. Visitation.ITransformer<T> Define the interface for a transformer which transforms recursively the instances into something else. Visitation.ITransformerWithContext<TContext, T> Define the interface for a transformer which recursively transforms the instances into something else while the context is passed along. Visitation.IVisitor Define the interface for a visitor which visits the instances of the model. Visitation.IVisitorWithContext<TContext> Define the interface for a visitor which visits the instances of the model. Enums AasSubmodelElements Enumeration of all possible elements of a SubmodelElementList . AssetKind Enumeration for denoting whether an asset is a type asset or an instance asset. DataTypeDefXsd Enumeration listing all xsd anySimpleTypes DataTypeIec61360 Direction Direction EntityType Enumeration for denoting whether an entity is a self-managed entity or a co-managed entity. KeyTypes Enumeration of different key value types within a key. LevelType ModelingKind Enumeration for denoting whether an element is a template or an instance. QualifierKind Enumeration for kinds of qualifiers. ReferenceTypes ReferenceTypes StateOfEvent State of an event"
  },
  "api/AasCore.Aas3_0_RC02.IClass.html": {
    "href": "api/AasCore.Aas3_0_RC02.IClass.html",
    "title": "Interface IClass",
    "keywords": "Interface IClass Represent a general class of an AAS model. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IClass Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T"
  },
  "api/AasCore.Aas3_0_RC02.IDataElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IDataElement.html",
    "title": "Interface IDataElement",
    "keywords": "Interface IDataElement A data element is a submodel element that is not further composed out of other submodel elements. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IDataElement : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks A data element is a submodel element that has a value. The type of value differs for different subtypes of data elements. Constraints: Constraint AASd-090: For data elements shall be one of the following values: CONSTANT , PARAMETER or VARIABLE . Default: VARIABLE Methods | Improve this Doc View Source CategoryOrDefault() Declaration string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference >"
  },
  "api/AasCore.Aas3_0_RC02.IDataSpecificationContent.html": {
    "href": "api/AasCore.Aas3_0_RC02.IDataSpecificationContent.html",
    "title": "Interface IDataSpecificationContent",
    "keywords": "Interface IDataSpecificationContent Data specification content is part of a data specification template and defines which additional attributes shall be added to the element instance that references the data specification template and meta information about the template itself. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IDataSpecificationContent : IClass"
  },
  "api/AasCore.Aas3_0_RC02.IEventElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IEventElement.html",
    "title": "Interface IEventElement",
    "keywords": "Interface IEventElement An event element. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IEventElement : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass"
  },
  "api/AasCore.Aas3_0_RC02.IHasDataSpecification.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasDataSpecification.html",
    "title": "Interface IHasDataSpecification",
    "keywords": "Interface IHasDataSpecification Element that can be extended by using data specification templates. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasDataSpecification : IClass Remarks A data specification template defines a named set of additional attributes an element may or shall have. The data specifications used are explicitly specified with their global ID. Properties | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >>"
  },
  "api/AasCore.Aas3_0_RC02.IHasExtensions.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasExtensions.html",
    "title": "Interface IHasExtensions",
    "keywords": "Interface IHasExtensions Element that can be extended by proprietary extensions. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasExtensions : IClass Remarks Extensions are proprietary, i.e. they do not support global interoperability. Properties | Improve this Doc View Source Extensions An extension of the element. Declaration List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >>"
  },
  "api/AasCore.Aas3_0_RC02.IHasKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasKind.html",
    "title": "Interface IHasKind",
    "keywords": "Interface IHasKind An element with a kind is an element that can either represent a template or an instance. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasKind : IClass Remarks Default for an element is that it is representing an instance. Properties | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance Methods | Improve this Doc View Source KindOrDefault() Declaration ModelingKind KindOrDefault() Returns Type Description ModelingKind"
  },
  "api/AasCore.Aas3_0_RC02.IHasSemantics.html": {
    "href": "api/AasCore.Aas3_0_RC02.IHasSemantics.html",
    "title": "Interface IHasSemantics",
    "keywords": "Interface IHasSemantics Element that can have a semantic definition plus some supplemental semantic definitions. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IHasSemantics : IClass Remarks Constraints: Constraint AASd-118: If there are ID SupplementalSemanticIds defined then there shall be also a main semantic ID SemanticId . Properties | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference."
  },
  "api/AasCore.Aas3_0_RC02.IIdentifiable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IIdentifiable.html",
    "title": "Interface IIdentifiable",
    "keywords": "Interface IIdentifiable An element that has a globally unique identifier. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IIdentifiable : IReferable, IHasExtensions, IClass Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source Id The globally unique identification of the element. Declaration string Id { get; set; } Property Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.IQualifiable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IQualifiable.html",
    "title": "Interface IQualifiable",
    "keywords": "Interface IQualifiable The value of a qualifiable element may be further qualified by one or more qualifiers. Inherited Members IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IQualifiable : IClass Remarks Constraints: Constraint AASd-119: If any Kind value of Qualifiers is equal to TemplateQualifier and the qualified element inherits from IHasKind then the qualified element shall be of kind Template ( Kind = Template ). Properties | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type ."
  },
  "api/AasCore.Aas3_0_RC02.IReferable.html": {
    "href": "api/AasCore.Aas3_0_RC02.IReferable.html",
    "title": "Interface IReferable",
    "keywords": "Interface IReferable An element that is referable by its IdShort . Inherited Members IHasExtensions.Extensions IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IReferable : IHasExtensions, IClass Remarks This ID is not globally unique. This ID is unique within the name space of the element. Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English."
  },
  "api/AasCore.Aas3_0_RC02.IRelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.IRelationshipElement.html",
    "title": "Interface IRelationshipElement",
    "keywords": "Interface IRelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IRelationshipElement : ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Properties | Improve this Doc View Source First Reference to the first element in the relationship taking the role of the subject. Declaration Reference First { get; set; } Property Value Type Description Reference | Improve this Doc View Source Second Reference to the second element in the relationship taking the role of the object. Declaration Reference Second { get; set; } Property Value Type Description Reference"
  },
  "api/AasCore.Aas3_0_RC02.ISubmodelElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.ISubmodelElement.html",
    "title": "Interface ISubmodelElement",
    "keywords": "Interface ISubmodelElement A submodel element is an element suitable for the description and differentiation of assets. Inherited Members IReferable.Category IReferable.IdShort IReferable.DisplayName IReferable.Description IReferable.Checksum IHasExtensions.Extensions IHasKind.Kind IHasKind.KindOrDefault() IHasSemantics.SemanticId IHasSemantics.SupplementalSemanticIds IQualifiable.Qualifiers IHasDataSpecification.EmbeddedDataSpecifications IClass.DescendOnce() IClass.Descend() IClass.Accept(Visitation.IVisitor) IClass.Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) IClass.Transform<T>(Visitation.ITransformer<T>) IClass.Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ISubmodelElement : IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks It is recommended to add a SemanticId to a submodel element."
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.Deserialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.Deserialize.html",
    "title": "Class Jsonization.Deserialize",
    "keywords": "Class Jsonization.Deserialize Deserialize instances of meta-model classes from JSON nodes. Inheritance System.Object Jsonization.Deserialize Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Deserialize : object Examples Here is an example how to parse an instance of IHasSemantics: string someString = \"... some JSON ...\"; var node = System.Text.Json.Nodes.JsonNode.Parse(someString); Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom( node); Methods | Improve this Doc View Source AasSubmodelElementsFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of AasSubmodelElements from node . Declaration public static AasSubmodelElements AasSubmodelElementsFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AasSubmodelElements Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AasSubmodelElements. | Improve this Doc View Source AdministrativeInformationFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of AdministrativeInformation from node . Declaration public static AdministrativeInformation AdministrativeInformationFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AdministrativeInformation Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AdministrativeInformation. | Improve this Doc View Source AnnotatedRelationshipElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of AnnotatedRelationshipElement from node . Declaration public static AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AnnotatedRelationshipElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AnnotatedRelationshipElement. | Improve this Doc View Source AssetAdministrationShellFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of AssetAdministrationShell from node . Declaration public static AssetAdministrationShell AssetAdministrationShellFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AssetAdministrationShell Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AssetAdministrationShell. | Improve this Doc View Source AssetInformationFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of AssetInformation from node . Declaration public static AssetInformation AssetInformationFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AssetInformation Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AssetInformation. | Improve this Doc View Source AssetKindFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of AssetKind from node . Declaration public static AssetKind AssetKindFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description AssetKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of AssetKind. | Improve this Doc View Source BasicEventElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of BasicEventElement from node . Declaration public static BasicEventElement BasicEventElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description BasicEventElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of BasicEventElement. | Improve this Doc View Source BlobFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Blob from node . Declaration public static Blob BlobFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Blob Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Blob. | Improve this Doc View Source CapabilityFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Capability from node . Declaration public static Capability CapabilityFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Capability Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Capability. | Improve this Doc View Source ConceptDescriptionFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ConceptDescription from node . Declaration public static ConceptDescription ConceptDescriptionFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ConceptDescription Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ConceptDescription. | Improve this Doc View Source DataSpecificationIec61360From(System.Text.Json.Nodes.JsonNode) Deserialize an instance of DataSpecificationIec61360 from node . Declaration public static DataSpecificationIec61360 DataSpecificationIec61360From(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataSpecificationIec61360 Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataSpecificationIec61360. | Improve this Doc View Source DataSpecificationPhysicalUnitFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of DataSpecificationPhysicalUnit from node . Declaration public static DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataSpecificationPhysicalUnit Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataSpecificationPhysicalUnit. | Improve this Doc View Source DataTypeDefXsdFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of DataTypeDefXsd from node . Declaration public static DataTypeDefXsd DataTypeDefXsdFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataTypeDefXsd Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataTypeDefXsd. | Improve this Doc View Source DataTypeIec61360From(System.Text.Json.Nodes.JsonNode) Deserialize an instance of DataTypeIec61360 from node . Declaration public static DataTypeIec61360 DataTypeIec61360From(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description DataTypeIec61360 Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of DataTypeIec61360. | Improve this Doc View Source DirectionFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Direction from node . Declaration public static Direction DirectionFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Direction Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Direction. | Improve this Doc View Source EmbeddedDataSpecificationFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of EmbeddedDataSpecification from node . Declaration public static EmbeddedDataSpecification EmbeddedDataSpecificationFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description EmbeddedDataSpecification Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of EmbeddedDataSpecification. | Improve this Doc View Source EntityFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Entity from node . Declaration public static Entity EntityFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Entity Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Entity. | Improve this Doc View Source EntityTypeFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of EntityType from node . Declaration public static EntityType EntityTypeFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description EntityType Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of EntityType. | Improve this Doc View Source EnvironmentFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Environment from node . Declaration public static Environment EnvironmentFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Environment Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Environment. | Improve this Doc View Source EventPayloadFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of EventPayload from node . Declaration public static EventPayload EventPayloadFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description EventPayload Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of EventPayload. | Improve this Doc View Source ExtensionFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Extension from node . Declaration public static Extension ExtensionFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Extension Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Extension. | Improve this Doc View Source FileFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of File from node . Declaration public static File FileFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description File Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of File. | Improve this Doc View Source IDataElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IDataElement from node . Declaration public static IDataElement IDataElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IDataElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IDataElement. | Improve this Doc View Source IDataSpecificationContentFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IDataSpecificationContent from node . Declaration public static IDataSpecificationContent IDataSpecificationContentFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IDataSpecificationContent Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IDataSpecificationContent. | Improve this Doc View Source IEventElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IEventElement from node . Declaration public static IEventElement IEventElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IEventElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IEventElement. | Improve this Doc View Source IHasDataSpecificationFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IHasDataSpecification from node . Declaration public static IHasDataSpecification IHasDataSpecificationFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasDataSpecification Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasDataSpecification. | Improve this Doc View Source IHasExtensionsFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IHasExtensions from node . Declaration public static IHasExtensions IHasExtensionsFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasExtensions Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasExtensions. | Improve this Doc View Source IHasKindFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IHasKind from node . Declaration public static IHasKind IHasKindFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasKind. | Improve this Doc View Source IHasSemanticsFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IHasSemantics from node . Declaration public static IHasSemantics IHasSemanticsFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IHasSemantics Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IHasSemantics. | Improve this Doc View Source IIdentifiableFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IIdentifiable from node . Declaration public static IIdentifiable IIdentifiableFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IIdentifiable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IIdentifiable. | Improve this Doc View Source IQualifiableFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IQualifiable from node . Declaration public static IQualifiable IQualifiableFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IQualifiable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IQualifiable. | Improve this Doc View Source IReferableFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IReferable from node . Declaration public static IReferable IReferableFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IReferable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IReferable. | Improve this Doc View Source IRelationshipElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of IRelationshipElement from node . Declaration public static IRelationshipElement IRelationshipElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description IRelationshipElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of IRelationshipElement. | Improve this Doc View Source ISubmodelElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ISubmodelElement from node . Declaration public static ISubmodelElement ISubmodelElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ISubmodelElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ISubmodelElement. | Improve this Doc View Source KeyFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Key from node . Declaration public static Key KeyFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Key Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Key. | Improve this Doc View Source KeyTypesFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of KeyTypes from node . Declaration public static KeyTypes KeyTypesFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description KeyTypes Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of KeyTypes. | Improve this Doc View Source LangStringFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of LangString from node . Declaration public static LangString LangStringFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description LangString Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of LangString. | Improve this Doc View Source LevelTypeFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of LevelType from node . Declaration public static LevelType LevelTypeFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description LevelType Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of LevelType. | Improve this Doc View Source ModelingKindFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ModelingKind from node . Declaration public static ModelingKind ModelingKindFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ModelingKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ModelingKind. | Improve this Doc View Source MultiLanguagePropertyFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of MultiLanguageProperty from node . Declaration public static MultiLanguageProperty MultiLanguagePropertyFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description MultiLanguageProperty Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of MultiLanguageProperty. | Improve this Doc View Source OperationFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Operation from node . Declaration public static Operation OperationFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Operation Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Operation. | Improve this Doc View Source OperationVariableFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of OperationVariable from node . Declaration public static OperationVariable OperationVariableFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description OperationVariable Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of OperationVariable. | Improve this Doc View Source PropertyFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Property from node . Declaration public static Property PropertyFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Property Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Property. | Improve this Doc View Source QualifierFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Qualifier from node . Declaration public static Qualifier QualifierFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Qualifier Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Qualifier. | Improve this Doc View Source QualifierKindFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of QualifierKind from node . Declaration public static QualifierKind QualifierKindFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description QualifierKind Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of QualifierKind. | Improve this Doc View Source RangeFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Range from node . Declaration public static Range RangeFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Range Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Range. | Improve this Doc View Source ReferenceElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ReferenceElement from node . Declaration public static ReferenceElement ReferenceElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ReferenceElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ReferenceElement. | Improve this Doc View Source ReferenceFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Reference from node . Declaration public static Reference ReferenceFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Reference Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Reference. | Improve this Doc View Source ReferenceTypesFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ReferenceTypes from node . Declaration public static ReferenceTypes ReferenceTypesFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ReferenceTypes Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ReferenceTypes. | Improve this Doc View Source RelationshipElementFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of RelationshipElement from node . Declaration public static RelationshipElement RelationshipElementFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description RelationshipElement Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of RelationshipElement. | Improve this Doc View Source ResourceFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Resource from node . Declaration public static Resource ResourceFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Resource Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Resource. | Improve this Doc View Source SpecificAssetIdFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of SpecificAssetId from node . Declaration public static SpecificAssetId SpecificAssetIdFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description SpecificAssetId Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of SpecificAssetId. | Improve this Doc View Source StateOfEventFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of StateOfEvent from node . Declaration public static StateOfEvent StateOfEventFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description StateOfEvent Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of StateOfEvent. | Improve this Doc View Source SubmodelElementCollectionFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of SubmodelElementCollection from node . Declaration public static SubmodelElementCollection SubmodelElementCollectionFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description SubmodelElementCollection Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of SubmodelElementCollection. | Improve this Doc View Source SubmodelElementListFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of SubmodelElementList from node . Declaration public static SubmodelElementList SubmodelElementListFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description SubmodelElementList Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of SubmodelElementList. | Improve this Doc View Source SubmodelFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of Submodel from node . Declaration public static Submodel SubmodelFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description Submodel Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of Submodel. | Improve this Doc View Source ValueListFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ValueList from node . Declaration public static ValueList ValueListFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ValueList Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ValueList. | Improve this Doc View Source ValueReferencePairFrom(System.Text.Json.Nodes.JsonNode) Deserialize an instance of ValueReferencePair from node . Declaration public static ValueReferencePair ValueReferencePairFrom(System.Text.Json.Nodes.JsonNode node) Parameters Type Name Description System.Text.Json.Nodes.JsonNode node JSON node to be parsed Returns Type Description ValueReferencePair Exceptions Type Condition Jsonization.Exception Thrown when node is not a valid JSON representation of ValueReferencePair."
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.Exception.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.Exception.html",
    "title": "Class Jsonization.Exception",
    "keywords": "Class Jsonization.Exception Represent a critical error during the deserialization. Inheritance System.Object Jsonization.Exception Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Exception : System.Exception Constructors | Improve this Doc View Source Exception(String, String) Declaration public Exception(string path, string cause) Parameters Type Name Description System.String path System.String cause Fields | Improve this Doc View Source Cause Declaration public readonly string Cause Field Value Type Description System.String | Improve this Doc View Source Path Declaration public readonly string Path Field Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.html",
    "title": "Class Jsonization",
    "keywords": "Class Jsonization Provide de/serialization of meta-model classes to/from JSON. Inheritance System.Object Jsonization Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Jsonization : object Remarks We can not use one-pass deserialization for JSON since the object properties do not have fixed order, and hence we can not read modelType property ahead of the remaining properties."
  },
  "api/AasCore.Aas3_0_RC02.Jsonization.Serialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Jsonization.Serialize.html",
    "title": "Class Jsonization.Serialize",
    "keywords": "Class Jsonization.Serialize Serialize instances of meta-model classes to JSON elements. Inheritance System.Object Jsonization.Serialize Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Serialize : object Examples Here is an example how to serialize an instance of IHasSemantics: var anInstance = new Aas.IHasSemantics( // ... some constructor arguments ... ); System.Text.Json.Nodes.JsonObject element = ( Serialize.ToJsonObject( anInstance)); Methods | Improve this Doc View Source AasSubmodelElementsToJsonValue(AasSubmodelElements) Serialize a literal of AasSubmodelElements into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue AasSubmodelElementsToJsonValue(AasSubmodelElements that) Parameters Type Name Description AasSubmodelElements that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source AssetKindToJsonValue(AssetKind) Serialize a literal of AssetKind into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue AssetKindToJsonValue(AssetKind that) Parameters Type Name Description AssetKind that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source DataTypeDefXsdToJsonValue(DataTypeDefXsd) Serialize a literal of DataTypeDefXsd into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue DataTypeDefXsdToJsonValue(DataTypeDefXsd that) Parameters Type Name Description DataTypeDefXsd that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source DataTypeIec61360ToJsonValue(DataTypeIec61360) Serialize a literal of DataTypeIec61360 into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue DataTypeIec61360ToJsonValue(DataTypeIec61360 that) Parameters Type Name Description DataTypeIec61360 that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source DirectionToJsonValue(Direction) Serialize a literal of Direction into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue DirectionToJsonValue(Direction that) Parameters Type Name Description Direction that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source EntityTypeToJsonValue(EntityType) Serialize a literal of EntityType into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue EntityTypeToJsonValue(EntityType that) Parameters Type Name Description EntityType that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source KeyTypesToJsonValue(KeyTypes) Serialize a literal of KeyTypes into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue KeyTypesToJsonValue(KeyTypes that) Parameters Type Name Description KeyTypes that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source LevelTypeToJsonValue(LevelType) Serialize a literal of LevelType into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue LevelTypeToJsonValue(LevelType that) Parameters Type Name Description LevelType that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source ModelingKindToJsonValue(ModelingKind) Serialize a literal of ModelingKind into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue ModelingKindToJsonValue(ModelingKind that) Parameters Type Name Description ModelingKind that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source QualifierKindToJsonValue(QualifierKind) Serialize a literal of QualifierKind into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue QualifierKindToJsonValue(QualifierKind that) Parameters Type Name Description QualifierKind that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source ReferenceTypesToJsonValue(ReferenceTypes) Serialize a literal of ReferenceTypes into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue ReferenceTypesToJsonValue(ReferenceTypes that) Parameters Type Name Description ReferenceTypes that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source StateOfEventToJsonValue(StateOfEvent) Serialize a literal of StateOfEvent into a JSON string. Declaration public static System.Text.Json.Nodes.JsonValue StateOfEventToJsonValue(StateOfEvent that) Parameters Type Name Description StateOfEvent that Returns Type Description System.Text.Json.Nodes.JsonValue | Improve this Doc View Source ToJsonObject(IClass) Serialize an instance of the meta-model into a JSON object. Declaration public static System.Text.Json.Nodes.JsonObject ToJsonObject(IClass that) Parameters Type Name Description IClass that Returns Type Description System.Text.Json.Nodes.JsonObject"
  },
  "api/AasCore.Aas3_0_RC02.Key.html": {
    "href": "api/AasCore.Aas3_0_RC02.Key.html",
    "title": "Class Key",
    "keywords": "Class Key A key is a reference to an element by its ID. Inheritance System.Object Key Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Key : object, IClass Constructors | Improve this Doc View Source Key(KeyTypes, String) Declaration public Key(KeyTypes type, string value) Parameters Type Name Description KeyTypes type System.String value Properties | Improve this Doc View Source Type Denotes which kind of entity is referenced. Declaration public KeyTypes Type { get; set; } Property Value Type Description KeyTypes Remarks In case Type = FragmentReference the key represents a bookmark or a similar local identifier within its parent element as specified by the key that precedes this key. In all other cases the key references a model element of the same or of another AAS. The name of the model element is explicitly listed. | Improve this Doc View Source Value The key value, for example an IRDI or an URI Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.KeyTypes.html": {
    "href": "api/AasCore.Aas3_0_RC02.KeyTypes.html",
    "title": "Enum KeyTypes",
    "keywords": "Enum KeyTypes Enumeration of different key value types within a key. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum KeyTypes : int Fields Name Description AnnotatedRelationshipElement AssetAdministrationShell BasicEventElement Blob Capability ConceptDescription DataElement Data element. Entity EventElement Event. File FragmentReference Bookmark or a similar local identifier of a subordinate part of a primary resource GlobalReference Identifiable Identifiable. MultiLanguageProperty Property with a value that can be provided in multiple languages Operation Property Range Range with min and max Referable ReferenceElement Reference RelationshipElement Relationship Submodel SubmodelElement Submodel Element SubmodelElementCollection Struct of Submodel Elements SubmodelElementList List of Submodel Elements"
  },
  "api/AasCore.Aas3_0_RC02.LangString.html": {
    "href": "api/AasCore.Aas3_0_RC02.LangString.html",
    "title": "Class LangString",
    "keywords": "Class LangString Strings with language tags Inheritance System.Object LangString Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class LangString : object, IClass Constructors | Improve this Doc View Source LangString(String, String) Declaration public LangString(string language, string text) Parameters Type Name Description System.String language System.String text Properties | Improve this Doc View Source Language Language tag conforming to BCP 47 Declaration public string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Text in the Language Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.LevelType.html": {
    "href": "api/AasCore.Aas3_0_RC02.LevelType.html",
    "title": "Enum LevelType",
    "keywords": "Enum LevelType Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum LevelType : int Fields Name Description Max Min Nom Typ"
  },
  "api/AasCore.Aas3_0_RC02.ModelingKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.ModelingKind.html",
    "title": "Enum ModelingKind",
    "keywords": "Enum ModelingKind Enumeration for denoting whether an element is a template or an instance. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum ModelingKind : int Fields Name Description Instance Concrete, clearly identifiable component of a certain template. Template Software element which specifies the common attributes shared by all instances of the template."
  },
  "api/AasCore.Aas3_0_RC02.MultiLanguageProperty.html": {
    "href": "api/AasCore.Aas3_0_RC02.MultiLanguageProperty.html",
    "title": "Class MultiLanguageProperty",
    "keywords": "Class MultiLanguageProperty A property is a data element that has a multi-language value. Inheritance System.Object MultiLanguageProperty Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class MultiLanguageProperty : object, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-012: If both the Value and the ValueId are present then for each string in a specific language the meaning must be the same as specified in ValueId . Constructors | Improve this Doc View Source MultiLanguageProperty(Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<LangString>>, Reference) Declaration public MultiLanguageProperty(List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<LangString>? value = null, Reference valueId = null) Parameters Type Name Description System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < LangString >> value Reference valueId Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the property instance. Declaration public List<LangString>? Value { get; set; } Property Value Type Description System.Nullable < List < LangString >> | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverValueOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Operation.html": {
    "href": "api/AasCore.Aas3_0_RC02.Operation.html",
    "title": "Class Operation",
    "keywords": "Class Operation An operation is a submodel element with input and output variables. Inheritance System.Object Operation Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Operation : object, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source Operation(Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<OperationVariable>>, Nullable<List<OperationVariable>>, Nullable<List<OperationVariable>>) Declaration public Operation(List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<OperationVariable>? inputVariables = null, List<OperationVariable>? outputVariables = null, List<OperationVariable>? inoutputVariables = null) Parameters Type Name Description System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < OperationVariable >> inputVariables System.Nullable < List < OperationVariable >> outputVariables System.Nullable < List < OperationVariable >> inoutputVariables Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source InoutputVariables Parameter that is input and output of the operation. Declaration public List<OperationVariable>? InoutputVariables { get; set; } Property Value Type Description System.Nullable < List < OperationVariable >> | Improve this Doc View Source InputVariables Input parameter of the operation. Declaration public List<OperationVariable>? InputVariables { get; set; } Property Value Type Description System.Nullable < List < OperationVariable >> | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source OutputVariables Output parameter of the operation. Declaration public List<OperationVariable>? OutputVariables { get; set; } Property Value Type Description System.Nullable < List < OperationVariable >> | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverInoutputVariablesOrEmpty() Iterate over InoutputVariables, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<OperationVariable> OverInoutputVariablesOrEmpty() Returns Type Description IEnumerable < OperationVariable > | Improve this Doc View Source OverInputVariablesOrEmpty() Iterate over InputVariables, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<OperationVariable> OverInputVariablesOrEmpty() Returns Type Description IEnumerable < OperationVariable > | Improve this Doc View Source OverOutputVariablesOrEmpty() Iterate over OutputVariables, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<OperationVariable> OverOutputVariablesOrEmpty() Returns Type Description IEnumerable < OperationVariable > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.OperationVariable.html": {
    "href": "api/AasCore.Aas3_0_RC02.OperationVariable.html",
    "title": "Class OperationVariable",
    "keywords": "Class OperationVariable The value of an operation variable is a submodel element that is used as input and/or output variable of an operation. Inheritance System.Object OperationVariable Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class OperationVariable : object, IClass Constructors | Improve this Doc View Source OperationVariable(ISubmodelElement) Declaration public OperationVariable(ISubmodelElement value) Parameters Type Name Description ISubmodelElement value Properties | Improve this Doc View Source Value Describes an argument or result of an operation via a submodel element Declaration public ISubmodelElement Value { get; set; } Property Value Type Description ISubmodelElement Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.Property.html": {
    "href": "api/AasCore.Aas3_0_RC02.Property.html",
    "title": "Class Property",
    "keywords": "Class Property A property is a data element that has a single value. Inheritance System.Object Property Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Property : object, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks Constraints: Constraint AASd-007: If both, the Value and the ValueId are present then the value of Value needs to be identical to the value of the referenced coded value in ValueId . Constructors | Improve this Doc View Source Property(DataTypeDefXsd, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<String>, Reference) Declaration public Property(DataTypeDefXsd valueType, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, string? value = null, Reference valueId = null) Parameters Type Name Description DataTypeDefXsd valueType System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < System.String > value Reference valueId Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the property instance. Declaration public string? Value { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the value Declaration public DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Qualifier.html": {
    "href": "api/AasCore.Aas3_0_RC02.Qualifier.html",
    "title": "Class Qualifier",
    "keywords": "Class Qualifier A qualifier is a type-value-pair that makes additional statements w.r.t. the value of the element. Inheritance System.Object Qualifier Implements IHasSemantics IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Qualifier : object, IHasSemantics, IClass Remarks Constraints: Constraint AASd-006: If both the Value and the ValueId of a Qualifier are present then the Value needs to be identical to the value of the referenced coded value in ValueId . Constraint AASd-020: The value of Value shall be consistent to the data type as defined in ValueType . Constructors | Improve this Doc View Source Qualifier(String, DataTypeDefXsd, Reference, Nullable<List<Reference>>, Nullable<QualifierKind>, Nullable<String>, Reference) Declaration public Qualifier(string type, DataTypeDefXsd valueType, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, QualifierKind? kind = null, string? value = null, Reference valueId = null) Parameters Type Name Description System.String type DataTypeDefXsd valueType Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < QualifierKind > kind System.Nullable < System.String > value Reference valueId Properties | Improve this Doc View Source Kind The qualifier kind describes the kind of the qualifier that is applied to the element. Declaration public QualifierKind? Kind { get; set; } Property Value Type Description System.Nullable < QualifierKind > Remarks Default: ConceptQualifier | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Type The qualifier type describes the type of the qualifier that is applied to the element. Declaration public string Type { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The qualifier value is the value of the qualifier. Declaration public string? Value { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ValueId Reference to the global unique ID of a coded value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the qualifier value. Declaration public DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public QualifierKind KindOrDefault() Returns Type Description QualifierKind | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IHasSemantics IClass"
  },
  "api/AasCore.Aas3_0_RC02.QualifierKind.html": {
    "href": "api/AasCore.Aas3_0_RC02.QualifierKind.html",
    "title": "Enum QualifierKind",
    "keywords": "Enum QualifierKind Enumeration for kinds of qualifiers. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum QualifierKind : int Fields Name Description ConceptQualifier qualifies the semantic definition the element is referring to ( SemanticId ) TemplateQualifier qualifies the elements within a specific submodel on concept level. ValueQualifier qualifies the value of the element and can change during run-time."
  },
  "api/AasCore.Aas3_0_RC02.Range.html": {
    "href": "api/AasCore.Aas3_0_RC02.Range.html",
    "title": "Class Range",
    "keywords": "Class Range A range data element is a data element that defines a range with min and max. Inheritance System.Object Range Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Range : object, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source Range(DataTypeDefXsd, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<String>, Nullable<String>) Declaration public Range(DataTypeDefXsd valueType, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, string? min = null, string? max = null) Parameters Type Name Description DataTypeDefXsd valueType System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < System.String > min System.Nullable < System.String > max Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Max The maximum value of the range. Declaration public string? Max { get; set; } Property Value Type Description System.Nullable < System.String > Remarks If the max value is missing, then the value is assumed to be positive infinite. | Improve this Doc View Source Min The minimum value of the range. Declaration public string? Min { get; set; } Property Value Type Description System.Nullable < System.String > Remarks If the min value is missing, then the value is assumed to be negative infinite. | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source ValueType Data type of the min und max Declaration public DataTypeDefXsd ValueType { get; set; } Property Value Type Description DataTypeDefXsd Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Reference.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reference.html",
    "title": "Class Reference",
    "keywords": "Class Reference Reference to either a model element of the same or another AAS or to an external entity. Inheritance System.Object Reference Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Reference : object, IClass Remarks A reference is an ordered list of keys. A model reference is an ordered list of keys, each key referencing an element. The complete list of keys may for example be concatenated to a path that then gives unique access to an element. A global reference is a reference to an external entity. Constraints: Constraint AASd-121: For Reference 's the Type of the first key of Keys shall be one of GloballyIdentifiables . Constraint AASd-122: For global references, i.e. Reference 's with Type = GlobalReference , the type of the first key of Keys shall be one of GenericGloballyIdentifiables . Constraint AASd-123: For model references, i.e. Reference 's with Type = ModelReference , the type of the first key of Keys shall be one of AasIdentifiables . Constraint AASd-124: For global references, i.e. Reference 's with Type = GlobalReference , the last key of Keys shall be either one of GenericGloballyIdentifiables or one of GenericFragmentKeys . Constraint AASd-125: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys the type of the keys following the first key of Keys shall be one of FragmentKeys . Constraint AASd-125 ensures that the shortest path is used. Constraint AASd-126: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys the type of the last key in the reference key chain may be one of GenericFragmentKeys or no key at all shall have a value out of GenericFragmentKeys . Constraint AASd-127: For model references, i.e. Reference 's with Type = ModelReference , with more than one key in Keys a key with Type FragmentReference shall be preceded by a key with Type File or Blob . All other AAS fragments, i.e. type values out of AasSubmodelElementsAsKeys , do not support fragments. Which kind of fragments are supported depends on the content type and the specification of allowed fragment identifiers for the corresponding resource being referenced via the reference. Constraint AASd-128: For model references, i.e. Reference 's with Type = ModelReference , the Value of a Key preceded by a Key with Type = SubmodelElementList is an integer number denoting the position in the array of the submodel element list. Constructors | Improve this Doc View Source Reference(ReferenceTypes, List<Key>, Reference) Declaration public Reference(ReferenceTypes type, List<Key> keys, Reference referredSemanticId = null) Parameters Type Name Description ReferenceTypes type List < Key > keys Reference referredSemanticId Properties | Improve this Doc View Source Keys Unique references in their name space. Declaration public List<Key> Keys { get; set; } Property Value Type Description List < Key > | Improve this Doc View Source ReferredSemanticId SemanticId of the referenced model element ( Type = ModelReference ). Declaration public Reference ReferredSemanticId { get; set; } Property Value Type Description Reference Remarks For global references there typically is no semantic ID. It is recommended to use a global reference. | Improve this Doc View Source Type Type of the reference. Declaration public ReferenceTypes Type { get; set; } Property Value Type Description ReferenceTypes Remarks Denotes, whether reference is a global reference or a model reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.ReferenceElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.ReferenceElement.html",
    "title": "Class ReferenceElement",
    "keywords": "Class ReferenceElement A reference element is a data element that defines a logical reference to another element within the same or another AAS or a reference to an external object or entity. Inheritance System.Object ReferenceElement Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ReferenceElement : object, IDataElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source ReferenceElement(Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Reference) Declaration public ReferenceElement(List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, Reference value = null) Parameters Type Name Description System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications Reference value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Global reference to an external object or entity or a logical reference to another element within the same or another AAS (i.e. a model reference to a Referable). Declaration public Reference Value { get; set; } Property Value Type Description Reference Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source CategoryOrDefault() Return the Category or the default value if it has not been set. Declaration public string CategoryOrDefault() Returns Type Description System.String | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IDataElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.ReferenceTypes.html": {
    "href": "api/AasCore.Aas3_0_RC02.ReferenceTypes.html",
    "title": "Enum ReferenceTypes",
    "keywords": "Enum ReferenceTypes ReferenceTypes Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum ReferenceTypes : int Fields Name Description GlobalReference GlobalReference. ModelReference ModelReference"
  },
  "api/AasCore.Aas3_0_RC02.RelationshipElement.html": {
    "href": "api/AasCore.Aas3_0_RC02.RelationshipElement.html",
    "title": "Class RelationshipElement",
    "keywords": "Class RelationshipElement A relationship element is used to define a relationship between two elements being either referable (model reference) or external (global reference). Inheritance System.Object RelationshipElement Implements IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class RelationshipElement : object, IRelationshipElement, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source RelationshipElement(Reference, Reference, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>) Declaration public RelationshipElement(Reference first, Reference second, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null) Parameters Type Name Description Reference first Reference second System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source First Reference to the first element in the relationship taking the role of the subject. Declaration public Reference First { get; set; } Property Value Type Description Reference | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source Second Reference to the second element in the relationship taking the role of the object. Declaration public Reference Second { get; set; } Property Value Type Description Reference | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IRelationshipElement ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.Error.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.Error.html",
    "title": "Class Reporting.Error",
    "keywords": "Class Reporting.Error Represent an error during the deserialization or the verification. Inheritance System.Object Reporting.Error Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Error : object Constructors | Improve this Doc View Source Error(String) Declaration public Error(string cause) Parameters Type Name Description System.String cause Fields | Improve this Doc View Source Cause Declaration public readonly string Cause Field Value Type Description System.String Properties | Improve this Doc View Source PathSegments Declaration public ICollection<Reporting.Segment> PathSegments { get; } Property Value Type Description ICollection < Reporting.Segment > Methods | Improve this Doc View Source PrependSegment(Reporting.Segment) Declaration public void PrependSegment(Reporting.Segment segment) Parameters Type Name Description Reporting.Segment segment"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.html",
    "title": "Class Reporting",
    "keywords": "Class Reporting Provide reporting for de/serialization and verification. Inheritance System.Object Reporting Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Reporting : object Methods | Improve this Doc View Source GenerateJsonPath(ICollection<Reporting.Segment>) Generate a JSON Path based on the path segments. Declaration public static string GenerateJsonPath(ICollection<Reporting.Segment> segments) Parameters Type Name Description ICollection < Reporting.Segment > segments Returns Type Description System.String Remarks See, for example, this page for more information on JSON path: https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html | Improve this Doc View Source GenerateRelativeXPath(ICollection<Reporting.Segment>) Generate a relative XPath based on the path segments. Declaration public static string GenerateRelativeXPath(ICollection<Reporting.Segment> segments) Parameters Type Name Description ICollection < Reporting.Segment > segments Returns Type Description System.String Remarks This method leaves out the leading slash ('/'). This is helpful if to embed the error report in a larger document with a prefix etc."
  },
  "api/AasCore.Aas3_0_RC02.Reporting.IndexSegment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.IndexSegment.html",
    "title": "Class Reporting.IndexSegment",
    "keywords": "Class Reporting.IndexSegment Inheritance System.Object Reporting.Segment Reporting.IndexSegment Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class IndexSegment : Reporting.Segment Constructors | Improve this Doc View Source IndexSegment(Int32) Declaration public IndexSegment(int index) Parameters Type Name Description System.Int32 index Fields | Improve this Doc View Source Index Declaration public readonly int Index Field Value Type Description System.Int32"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.NameSegment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.NameSegment.html",
    "title": "Class Reporting.NameSegment",
    "keywords": "Class Reporting.NameSegment Inheritance System.Object Reporting.Segment Reporting.NameSegment Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class NameSegment : Reporting.Segment Constructors | Improve this Doc View Source NameSegment(String) Declaration public NameSegment(string name) Parameters Type Name Description System.String name Fields | Improve this Doc View Source Name Declaration public readonly string Name Field Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.Reporting.Segment.html": {
    "href": "api/AasCore.Aas3_0_RC02.Reporting.Segment.html",
    "title": "Class Reporting.Segment",
    "keywords": "Class Reporting.Segment Capture a path segment of a value in a model. Inheritance System.Object Reporting.Segment Reporting.IndexSegment Reporting.NameSegment Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class Segment : object"
  },
  "api/AasCore.Aas3_0_RC02.Resource.html": {
    "href": "api/AasCore.Aas3_0_RC02.Resource.html",
    "title": "Class Resource",
    "keywords": "Class Resource Resource represents an address to a file (a locator). The value is an URI that can represent an absolute or relative path Inheritance System.Object Resource Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Resource : object, IClass Constructors | Improve this Doc View Source Resource(String, Nullable<String>) Declaration public Resource(string path, string? contentType = null) Parameters Type Name Description System.String path System.Nullable < System.String > contentType Properties | Improve this Doc View Source ContentType Content type of the content of the file. Declaration public string? ContentType { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The content type states which file extensions the file can have. | Improve this Doc View Source Path Path and name of the resource (with file extension). Declaration public string Path { get; set; } Property Value Type Description System.String Remarks The path can be absolute or relative. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.SpecificAssetId.html": {
    "href": "api/AasCore.Aas3_0_RC02.SpecificAssetId.html",
    "title": "Class SpecificAssetId",
    "keywords": "Class SpecificAssetId A specific asset ID describes a generic supplementary identifying attribute of the asset. Inheritance System.Object SpecificAssetId Implements IHasSemantics IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class SpecificAssetId : object, IHasSemantics, IClass Remarks The specific asset ID is not necessarily globally unique. Constructors | Improve this Doc View Source SpecificAssetId(String, String, Reference, Reference, Nullable<List<Reference>>) Declaration public SpecificAssetId(string name, string value, Reference externalSubjectId, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null) Parameters Type Name Description System.String name System.String value Reference externalSubjectId Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds Properties | Improve this Doc View Source ExternalSubjectId The (external) subject the key belongs to or has meaning to. Declaration public Reference ExternalSubjectId { get; set; } Property Value Type Description Reference Remarks This is a global reference. | Improve this Doc View Source Name Name of the identifier Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value The value of the specific asset identifier with the corresponding name. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IHasSemantics IClass"
  },
  "api/AasCore.Aas3_0_RC02.StateOfEvent.html": {
    "href": "api/AasCore.Aas3_0_RC02.StateOfEvent.html",
    "title": "Enum StateOfEvent",
    "keywords": "Enum StateOfEvent State of an event Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public enum StateOfEvent : int Fields Name Description Off Event is off. On Event is on"
  },
  "api/AasCore.Aas3_0_RC02.Stringification.html": {
    "href": "api/AasCore.Aas3_0_RC02.Stringification.html",
    "title": "Class Stringification",
    "keywords": "Class Stringification Inheritance System.Object Stringification Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Stringification : object Methods | Improve this Doc View Source AasSubmodelElementsFromString(String) Parse the string representation of AasSubmodelElements . Declaration public static AasSubmodelElements? AasSubmodelElementsFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < AasSubmodelElements > Remarks If text is not a valid string representation of a literal of AasSubmodelElements , return null . | Improve this Doc View Source AssetKindFromString(String) Parse the string representation of AssetKind . Declaration public static AssetKind? AssetKindFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < AssetKind > Remarks If text is not a valid string representation of a literal of AssetKind , return null . | Improve this Doc View Source DataTypeDefXsdFromString(String) Parse the string representation of DataTypeDefXsd . Declaration public static DataTypeDefXsd? DataTypeDefXsdFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < DataTypeDefXsd > Remarks If text is not a valid string representation of a literal of DataTypeDefXsd , return null . | Improve this Doc View Source DataTypeIec61360FromString(String) Parse the string representation of DataTypeIec61360 . Declaration public static DataTypeIec61360? DataTypeIec61360FromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < DataTypeIec61360 > Remarks If text is not a valid string representation of a literal of DataTypeIec61360 , return null . | Improve this Doc View Source DirectionFromString(String) Parse the string representation of Direction . Declaration public static Direction? DirectionFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < Direction > Remarks If text is not a valid string representation of a literal of Direction , return null . | Improve this Doc View Source EntityTypeFromString(String) Parse the string representation of EntityType . Declaration public static EntityType? EntityTypeFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < EntityType > Remarks If text is not a valid string representation of a literal of EntityType , return null . | Improve this Doc View Source KeyTypesFromString(String) Parse the string representation of KeyTypes . Declaration public static KeyTypes? KeyTypesFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < KeyTypes > Remarks If text is not a valid string representation of a literal of KeyTypes , return null . | Improve this Doc View Source LevelTypeFromString(String) Parse the string representation of LevelType . Declaration public static LevelType? LevelTypeFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < LevelType > Remarks If text is not a valid string representation of a literal of LevelType , return null . | Improve this Doc View Source ModelingKindFromString(String) Parse the string representation of ModelingKind . Declaration public static ModelingKind? ModelingKindFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < ModelingKind > Remarks If text is not a valid string representation of a literal of ModelingKind , return null . | Improve this Doc View Source QualifierKindFromString(String) Parse the string representation of QualifierKind . Declaration public static QualifierKind? QualifierKindFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < QualifierKind > Remarks If text is not a valid string representation of a literal of QualifierKind , return null . | Improve this Doc View Source ReferenceTypesFromString(String) Parse the string representation of ReferenceTypes . Declaration public static ReferenceTypes? ReferenceTypesFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < ReferenceTypes > Remarks If text is not a valid string representation of a literal of ReferenceTypes , return null . | Improve this Doc View Source StateOfEventFromString(String) Parse the string representation of StateOfEvent . Declaration public static StateOfEvent? StateOfEventFromString(string text) Parameters Type Name Description System.String text Returns Type Description System.Nullable < StateOfEvent > Remarks If text is not a valid string representation of a literal of StateOfEvent , return null . | Improve this Doc View Source ToString(Nullable<AasSubmodelElements>) Retrieve the string representation of that . Declaration public static string? ToString(AasSubmodelElements? that) Parameters Type Name Description System.Nullable < AasSubmodelElements > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<AssetKind>) Retrieve the string representation of that . Declaration public static string? ToString(AssetKind? that) Parameters Type Name Description System.Nullable < AssetKind > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<DataTypeDefXsd>) Retrieve the string representation of that . Declaration public static string? ToString(DataTypeDefXsd? that) Parameters Type Name Description System.Nullable < DataTypeDefXsd > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<DataTypeIec61360>) Retrieve the string representation of that . Declaration public static string? ToString(DataTypeIec61360? that) Parameters Type Name Description System.Nullable < DataTypeIec61360 > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<Direction>) Retrieve the string representation of that . Declaration public static string? ToString(Direction? that) Parameters Type Name Description System.Nullable < Direction > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<EntityType>) Retrieve the string representation of that . Declaration public static string? ToString(EntityType? that) Parameters Type Name Description System.Nullable < EntityType > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<KeyTypes>) Retrieve the string representation of that . Declaration public static string? ToString(KeyTypes? that) Parameters Type Name Description System.Nullable < KeyTypes > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<LevelType>) Retrieve the string representation of that . Declaration public static string? ToString(LevelType? that) Parameters Type Name Description System.Nullable < LevelType > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<ModelingKind>) Retrieve the string representation of that . Declaration public static string? ToString(ModelingKind? that) Parameters Type Name Description System.Nullable < ModelingKind > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<QualifierKind>) Retrieve the string representation of that . Declaration public static string? ToString(QualifierKind? that) Parameters Type Name Description System.Nullable < QualifierKind > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<ReferenceTypes>) Retrieve the string representation of that . Declaration public static string? ToString(ReferenceTypes? that) Parameters Type Name Description System.Nullable < ReferenceTypes > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null . | Improve this Doc View Source ToString(Nullable<StateOfEvent>) Retrieve the string representation of that . Declaration public static string? ToString(StateOfEvent? that) Parameters Type Name Description System.Nullable < StateOfEvent > that Returns Type Description System.Nullable < System.String > Remarks If that is not a valid literal, return null ."
  },
  "api/AasCore.Aas3_0_RC02.Submodel.html": {
    "href": "api/AasCore.Aas3_0_RC02.Submodel.html",
    "title": "Class Submodel",
    "keywords": "Class Submodel A submodel defines a specific aspect of the asset represented by the AAS. Inheritance System.Object Submodel Implements IIdentifiable IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Submodel : object, IIdentifiable, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks A submodel is used to structure the digital representation and technical functionality of an Administration Shell into distinguishable parts. Each submodel refers to a well-defined domain or subject matter. Submodels can become standardized and, thus, become submodels templates. Constructors | Improve this Doc View Source Submodel(String, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, AdministrativeInformation, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<ISubmodelElement>>) Declaration public Submodel(string id, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, AdministrativeInformation administration = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<ISubmodelElement>? submodelElements = null) Parameters Type Name Description System.String id System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum AdministrativeInformation administration System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < ISubmodelElement >> submodelElements Properties | Improve this Doc View Source Administration Administrative information of an identifiable element. Declaration public AdministrativeInformation Administration { get; set; } Property Value Type Description AdministrativeInformation Remarks Some of the administrative information like the version number might need to be part of the identification. | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source Id The globally unique identification of the element. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SubmodelElements A submodel consists of zero or more submodel elements. Declaration public List<ISubmodelElement>? SubmodelElements { get; set; } Property Value Type Description System.Nullable < List < ISubmodelElement >> | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSubmodelElementsOrEmpty() Iterate over SubmodelElements, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverSubmodelElementsOrEmpty() Returns Type Description IEnumerable < ISubmodelElement > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IIdentifiable IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.SubmodelElementCollection.html": {
    "href": "api/AasCore.Aas3_0_RC02.SubmodelElementCollection.html",
    "title": "Class SubmodelElementCollection",
    "keywords": "Class SubmodelElementCollection A submodel element collection is a kind of struct, i.e. a a logical encapsulation of multiple named values. It has a fixed number of submodel elements. Inheritance System.Object SubmodelElementCollection Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class SubmodelElementCollection : object, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Constructors | Improve this Doc View Source SubmodelElementCollection(Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<List<ISubmodelElement>>) Declaration public SubmodelElementCollection(List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, List<ISubmodelElement>? value = null) Parameters Type Name Description System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < List < ISubmodelElement >> value Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source Value Submodel element contained in the collection. Declaration public List<ISubmodelElement>? Value { get; set; } Property Value Type Description System.Nullable < List < ISubmodelElement >> Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverValueOrEmpty() Returns Type Description IEnumerable < ISubmodelElement > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.SubmodelElementList.html": {
    "href": "api/AasCore.Aas3_0_RC02.SubmodelElementList.html",
    "title": "Class SubmodelElementList",
    "keywords": "Class SubmodelElementList A submodel element list is an ordered list of submodel elements. Inheritance System.Object SubmodelElementList Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class SubmodelElementList : object, ISubmodelElement, IReferable, IHasExtensions, IHasKind, IHasSemantics, IQualifiable, IHasDataSpecification, IClass Remarks The numbering starts with zero (0). Constraints: Constraint AASd-107: If a first level child element in a SubmodelElementList has a SemanticId it shall be identical to SemanticIdListElement . Constraint AASd-114: If two first level child elements in a SubmodelElementList have a SemanticId then they shall be identical. Constraint AASd-115: If a first level child element in a SubmodelElementList does not specify a SemanticId then the value is assumed to be identical to SemanticIdListElement . Constraint AASd-108: All first level child elements in a SubmodelElementList shall have the same submodel element type as specified in TypeValueListElement . Constraint AASd-109: If TypeValueListElement is equal to Property or Range ValueTypeListElement shall be set and all first level child elements in the SubmodelElementList shall have the value type as specified in ValueTypeListElement . Constructors | Improve this Doc View Source SubmodelElementList(AasSubmodelElements, Nullable<List<Extension>>, Nullable<String>, Nullable<String>, Nullable<List<LangString>>, Nullable<List<LangString>>, Nullable<String>, Nullable<ModelingKind>, Reference, Nullable<List<Reference>>, Nullable<List<Qualifier>>, Nullable<List<EmbeddedDataSpecification>>, Nullable<Boolean>, Nullable<List<ISubmodelElement>>, Reference, Nullable<DataTypeDefXsd>) Declaration public SubmodelElementList(AasSubmodelElements typeValueListElement, List<Extension>? extensions = null, string? category = null, string? idShort = null, List<LangString>? displayName = null, List<LangString>? description = null, string? checksum = null, ModelingKind? kind = null, Reference semanticId = null, List<Reference>? supplementalSemanticIds = null, List<Qualifier>? qualifiers = null, List<EmbeddedDataSpecification>? embeddedDataSpecifications = null, bool? orderRelevant = null, List<ISubmodelElement>? value = null, Reference semanticIdListElement = null, DataTypeDefXsd? valueTypeListElement = null) Parameters Type Name Description AasSubmodelElements typeValueListElement System.Nullable < List < Extension >> extensions System.Nullable < System.String > category System.Nullable < System.String > idShort System.Nullable < List < LangString >> displayName System.Nullable < List < LangString >> description System.Nullable < System.String > checksum System.Nullable < ModelingKind > kind Reference semanticId System.Nullable < List < Reference >> supplementalSemanticIds System.Nullable < List < Qualifier >> qualifiers System.Nullable < List < EmbeddedDataSpecification >> embeddedDataSpecifications System.Nullable < System.Boolean > orderRelevant System.Nullable < List < ISubmodelElement >> value Reference semanticIdListElement System.Nullable < DataTypeDefXsd > valueTypeListElement Properties | Improve this Doc View Source Category The category is a value that gives further meta information w.r.t. to the class of the element. It affects the expected existence of attributes and the applicability of constraints. Declaration public string? Category { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The category is not identical to the semantic definition ( IHasSemantics ) of an element. The category e.g. could denote that the element is a measurement value whereas the semantic definition of the element would denote that it is the measured temperature. | Improve this Doc View Source Checksum Checksum to be used to determine if an Referable (including its aggregated child elements) has changed. Declaration public string? Checksum { get; set; } Property Value Type Description System.Nullable < System.String > Remarks The checksum is calculated by the user's tool environment. The checksum has no semantic meaning for an asset administration shell model and there is no requirement for asset administration shell tools to manage the checksum | Improve this Doc View Source Description Description or comments on the element. Declaration public List<LangString>? Description { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks The description can be provided in several languages. If no description is defined, then the definition of the concept description that defines the semantics of the element is used. Additional information can be provided, e.g., if the element is qualified and which qualifier types can be expected in which context or which additional data specification templates are provided. | Improve this Doc View Source DisplayName Display name. Can be provided in several languages. Declaration public List<LangString>? DisplayName { get; set; } Property Value Type Description System.Nullable < List < LangString >> Remarks If no display name is defined in the language requested by the application, then the display name is selected in the following order if available: the preferred name in the requested language of the concept description defining the semantics of the element If there is a default language list defined in the application, then the corresponding preferred name in the language is chosen according to this order. the English preferred name of the concept description defining the semantics of the element the short name of the concept description the IdShort of the element | Improve this Doc View Source EmbeddedDataSpecifications Embedded data specification. Declaration public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; } Property Value Type Description System.Nullable < List < EmbeddedDataSpecification >> | Improve this Doc View Source Extensions An extension of the element. Declaration public List<Extension>? Extensions { get; set; } Property Value Type Description System.Nullable < List < Extension >> | Improve this Doc View Source IdShort In case of identifiables this attribute is a short name of the element. In case of referable this ID is an identifying string of the element within its name space. Declaration public string? IdShort { get; set; } Property Value Type Description System.Nullable < System.String > Remarks In case the element is a property and the property has a semantic definition ( SemanticId ) conformant to IEC61360 the IdShort is typically identical to the short name in English. | Improve this Doc View Source Kind Kind of the element: either type or instance. Declaration public ModelingKind? Kind { get; set; } Property Value Type Description System.Nullable < ModelingKind > Remarks Default: Instance | Improve this Doc View Source OrderRelevant Defines whether order in list is relevant. If OrderRelevant = False then the list is representing a set or a bag. Declaration public bool? OrderRelevant { get; set; } Property Value Type Description System.Nullable < System.Boolean > Remarks Default: True | Improve this Doc View Source Qualifiers Additional qualification of a qualifiable element. Declaration public List<Qualifier>? Qualifiers { get; set; } Property Value Type Description System.Nullable < List < Qualifier >> Remarks Constraints: Constraint AASd-021: Every qualifiable can only have one qualifier with the same Type . | Improve this Doc View Source SemanticId Identifier of the semantic definition of the element. It is called semantic ID of the element or also main semantic ID of the element. Declaration public Reference SemanticId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SemanticIdListElement Semantic ID the submodel elements contained in the list match to. Declaration public Reference SemanticIdListElement { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. | Improve this Doc View Source SupplementalSemanticIds Identifier of a supplemental semantic definition of the element. It is called supplemental semantic ID of the element. Declaration public List<Reference>? SupplementalSemanticIds { get; set; } Property Value Type Description System.Nullable < List < Reference >> Remarks It is recommended to use a global reference. | Improve this Doc View Source TypeValueListElement The submodel element type of the submodel elements contained in the list. Declaration public AasSubmodelElements TypeValueListElement { get; set; } Property Value Type Description AasSubmodelElements | Improve this Doc View Source Value Submodel element contained in the list. Declaration public List<ISubmodelElement>? Value { get; set; } Property Value Type Description System.Nullable < List < ISubmodelElement >> Remarks The list is ordered. | Improve this Doc View Source ValueTypeListElement The value type of the submodel element contained in the list. Declaration public DataTypeDefXsd? ValueTypeListElement { get; set; } Property Value Type Description System.Nullable < DataTypeDefXsd > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source KindOrDefault() Return the Kind or the default value if it has not been set. Declaration public ModelingKind KindOrDefault() Returns Type Description ModelingKind | Improve this Doc View Source OrderRelevantOrDefault() Return the OrderRelevant or the default value if it has not been set. Declaration public bool OrderRelevantOrDefault() Returns Type Description System.Boolean | Improve this Doc View Source OverDescriptionOrEmpty() Iterate over Description, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDescriptionOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverDisplayNameOrEmpty() Iterate over DisplayName, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<LangString> OverDisplayNameOrEmpty() Returns Type Description IEnumerable < LangString > | Improve this Doc View Source OverEmbeddedDataSpecificationsOrEmpty() Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty() Returns Type Description IEnumerable < EmbeddedDataSpecification > | Improve this Doc View Source OverExtensionsOrEmpty() Iterate over Extensions, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Extension> OverExtensionsOrEmpty() Returns Type Description IEnumerable < Extension > | Improve this Doc View Source OverQualifiersOrEmpty() Iterate over Qualifiers, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Qualifier> OverQualifiersOrEmpty() Returns Type Description IEnumerable < Qualifier > | Improve this Doc View Source OverSupplementalSemanticIdsOrEmpty() Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty() Returns Type Description IEnumerable < Reference > | Improve this Doc View Source OverValueOrEmpty() Iterate over Value, if set, and otherwise return an empty enumerable. Declaration public IEnumerable<ISubmodelElement> OverValueOrEmpty() Returns Type Description IEnumerable < ISubmodelElement > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements ISubmodelElement IReferable IHasExtensions IHasKind IHasSemantics IQualifiable IHasDataSpecification IClass"
  },
  "api/AasCore.Aas3_0_RC02.ValueList.html": {
    "href": "api/AasCore.Aas3_0_RC02.ValueList.html",
    "title": "Class ValueList",
    "keywords": "Class ValueList A set of value reference pairs. Inheritance System.Object ValueList Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ValueList : object, IClass Constructors | Improve this Doc View Source ValueList(List<ValueReferencePair>) Declaration public ValueList(List<ValueReferencePair> valueReferencePairs) Parameters Type Name Description List < ValueReferencePair > valueReferencePairs Properties | Improve this Doc View Source ValueReferencePairs A pair of a value together with its global unique id. Declaration public List<ValueReferencePair> ValueReferencePairs { get; set; } Property Value Type Description List < ValueReferencePair > Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.ValueReferencePair.html": {
    "href": "api/AasCore.Aas3_0_RC02.ValueReferencePair.html",
    "title": "Class ValueReferencePair",
    "keywords": "Class ValueReferencePair A value reference pair within a value list. Each value has a global unique id defining its semantic. Inheritance System.Object ValueReferencePair Implements IClass Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class ValueReferencePair : object, IClass Constructors | Improve this Doc View Source ValueReferencePair(String, Reference) Declaration public ValueReferencePair(string value, Reference valueId) Parameters Type Name Description System.String value Reference valueId Properties | Improve this Doc View Source Value The value of the referenced concept definition of the value in valueId. Declaration public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueId Global unique id of the value. Declaration public Reference ValueId { get; set; } Property Value Type Description Reference Remarks It is recommended to use a global reference. Methods | Improve this Doc View Source Accept(Visitation.IVisitor) Accept the visitor to visit this instance for double dispatch. Declaration public void Accept(Visitation.IVisitor visitor) Parameters Type Name Description Visitation.IVisitor visitor | Improve this Doc View Source Accept<TContext>(Visitation.IVisitorWithContext<TContext>, TContext) Accept the visitor to visit this instance for double dispatch with the context . Declaration public void Accept<TContext>(Visitation.IVisitorWithContext<TContext> visitor, TContext context) Parameters Type Name Description Visitation.IVisitorWithContext <TContext> visitor TContext context Type Parameters Name Description TContext | Improve this Doc View Source Descend() Iterate recursively over all the class instances referenced from this instance. Declaration public IEnumerable<IClass> Descend() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source DescendOnce() Iterate over all the class instances referenced from this instance without further recursion. Declaration public IEnumerable<IClass> DescendOnce() Returns Type Description IEnumerable < IClass > | Improve this Doc View Source Transform<T>(Visitation.ITransformer<T>) Accept the transformer to transform this instance for double dispatch. Declaration public T Transform<T>(Visitation.ITransformer<T> transformer) Parameters Type Name Description Visitation.ITransformer <T> transformer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T>, TContext) Accept the transformer to visit this instance for double dispatch with the context . Declaration public T Transform<TContext, T>(Visitation.ITransformerWithContext<TContext, T> transformer, TContext context) Parameters Type Name Description Visitation.ITransformerWithContext <TContext, T> transformer TContext context Returns Type Description T Type Parameters Name Description TContext T Implements IClass"
  },
  "api/AasCore.Aas3_0_RC02.Verification.html": {
    "href": "api/AasCore.Aas3_0_RC02.Verification.html",
    "title": "Class Verification",
    "keywords": "Class Verification Verify that the instances of the meta-model satisfy the invariants. Inheritance System.Object Verification Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Verification : object Examples Here is an example how to verify an instance of IHasSemantics: var anInstance = new Aas.IHasSemantics( // ... some constructor arguments ... ); foreach (var error in Verification.Verify(anInstance)) { System.Console.Writeln( $\"{error.Cause} at: \" + Reporting.GenerateJsonPath(error.PathSegments)); } Methods | Improve this Doc View Source DataSpecificationIec61360sForDocumentHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined appropriately for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sForDocumentHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined appropriately for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sForReferenceHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined appropriately for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sForReferenceHaveAppropriateDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sHaveDataType(IEnumerable<EmbeddedDataSpecification>) Check that the DataType is defined for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sHaveDataType(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(IEnumerable<EmbeddedDataSpecification>) Check that the Definition is defined for all data specifications whose content is given as IEC 61360 at least in English. Declaration public static bool DataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source DataSpecificationIec61360sHaveValue(IEnumerable<EmbeddedDataSpecification>) Check that the Value is defined for all data specifications whose content is given as IEC 61360. Declaration public static bool DataSpecificationIec61360sHaveValue(IEnumerable<EmbeddedDataSpecification> embeddedDataSpecifications) Parameters Type Name Description IEnumerable < EmbeddedDataSpecification > embeddedDataSpecifications Returns Type Description System.Boolean | Improve this Doc View Source ExtensionNamesAreUnique(IEnumerable<Extension>) Check that all Name are unique among extensions . Declaration public static bool ExtensionNamesAreUnique(IEnumerable<Extension> extensions) Parameters Type Name Description IEnumerable < Extension > extensions Returns Type Description System.Boolean | Improve this Doc View Source IdShortsAreUnique(IEnumerable<IReferable>) Check that all IdShort are unique among referables . Declaration public static bool IdShortsAreUnique(IEnumerable<IReferable> referables) Parameters Type Name Description IEnumerable < IReferable > referables Returns Type Description System.Boolean | Improve this Doc View Source IsBcp47ForEnglish(String) Check that the text corresponds to a BCP47 code for english. Declaration public static bool IsBcp47ForEnglish(string text) Parameters Type Name Description System.String text Returns Type Description System.Boolean | Improve this Doc View Source IsModelReferenceTo(Reference, KeyTypes) Check that the target of the model reference matches the expectedType . Declaration public static bool IsModelReferenceTo(Reference reference, KeyTypes expectedType) Parameters Type Name Description Reference reference KeyTypes expectedType Returns Type Description System.Boolean | Improve this Doc View Source IsModelReferenceToReferable(Reference) Check that the target of the reference matches a AasReferables . Declaration public static bool IsModelReferenceToReferable(Reference reference) Parameters Type Name Description Reference reference Returns Type Description System.Boolean | Improve this Doc View Source IsXsDateTimeStampUtc(String) Check that value is a xs:dateTimeStamp with the time zone set to UTC. Declaration public static bool IsXsDateTimeStampUtc(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Remarks The value is assumed to be already checked with MatchesXsDateTimeStampUtc(String) . | Improve this Doc View Source LangStringsHaveUniqueLanguages(IEnumerable<LangString>) Check that langStrings are specified each for a unique language. Declaration public static bool LangStringsHaveUniqueLanguages(IEnumerable<LangString> langStrings) Parameters Type Name Description IEnumerable < LangString > langStrings Returns Type Description System.Boolean | Improve this Doc View Source MatchesBcp47(String) Check that text is a valid BCP 47 language tag. Declaration public static bool MatchesBcp47(string text) Parameters Type Name Description System.String text Returns Type Description System.Boolean Remarks See: https://en.wikipedia.org/wiki/IETF_language_tag | Improve this Doc View Source MatchesGlobalAssetIdLiterally(String) Check that the text matches globalAssetId case-insensitive. Declaration public static bool MatchesGlobalAssetIdLiterally(string text) Parameters Type Name Description System.String text which needs to match globalAssetId literally Returns Type Description System.Boolean True if the text matches case-insensitive Remarks The case-insensitivity depends on the culture. For example in Turkish, uppercase \"i\" is \"İ\", not \"I\". We assume the culture to be English, and explicitly check for English case-folding. | Improve this Doc View Source MatchesIdShort(String) Check that text is a valid short ID. Declaration public static bool MatchesIdShort(string text) Parameters Type Name Description System.String text Returns Type Description System.Boolean | Improve this Doc View Source MatchesMimeType(String) Check that text conforms to the pattern of MIME type. Declaration public static bool MatchesMimeType(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks The definition has been taken from: https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1 , https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6 . | Improve this Doc View Source MatchesRfc8089Path(String) Check that text is a path conforming to the pattern of RFC 8089. Declaration public static bool MatchesRfc8089Path(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks The definition has been taken from: https://datatracker.ietf.org/doc/html/rfc8089 | Improve this Doc View Source MatchesXsAnyUri(String) Check that text conforms to the pattern of an xs:anyURI . Declaration public static bool MatchesXsAnyUri(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#anyURI and https://datatracker.ietf.org/doc/html/rfc3987 | Improve this Doc View Source MatchesXsBase64Binary(String) Check that text conforms to the pattern of an xs:base64Binary . Declaration public static bool MatchesXsBase64Binary(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#base64Binary | Improve this Doc View Source MatchesXsBoolean(String) Check that text conforms to the pattern of an xs:boolean . Declaration public static bool MatchesXsBoolean(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#boolean | Improve this Doc View Source MatchesXsByte(String) Check that text conforms to the pattern of an xs:byte . Declaration public static bool MatchesXsByte(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#byte | Improve this Doc View Source MatchesXsDate(String) Check that text conforms to the pattern of an xs:date . Declaration public static bool MatchesXsDate(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#date | Improve this Doc View Source MatchesXsDateTime(String) Check that text conforms to the pattern of an xs:dateTime . Declaration public static bool MatchesXsDateTime(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#dateTime | Improve this Doc View Source MatchesXsDateTimeStamp(String) Check that text conforms to the pattern of an xs:dateTimeStamp . Declaration public static bool MatchesXsDateTimeStamp(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp | Improve this Doc View Source MatchesXsDateTimeStampUtc(String) Check that text conforms to the pattern of an xs:dateTimeStamp . Declaration public static bool MatchesXsDateTimeStampUtc(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks The time zone must be fixed to UTC. We verify only that the text matches a pre-defined pattern. We do not verify that the day of month is correct nor do we check for leap seconds. See: https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp | Improve this Doc View Source MatchesXsDayTimeDuration(String) Check that text conforms to the pattern of an xs:dayTimeDuration . Declaration public static bool MatchesXsDayTimeDuration(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#dayTimeDuration | Improve this Doc View Source MatchesXsDecimal(String) Check that text conforms to the pattern of an xs:decimal . Declaration public static bool MatchesXsDecimal(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#decimal | Improve this Doc View Source MatchesXsDouble(String) Check that text conforms to the pattern of an xs:double . Declaration public static bool MatchesXsDouble(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#double | Improve this Doc View Source MatchesXsDuration(String) Check that text conforms to the pattern of an xs:duration . Declaration public static bool MatchesXsDuration(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#duration | Improve this Doc View Source MatchesXsFloat(String) Check that text conforms to the pattern of an xs:float . Declaration public static bool MatchesXsFloat(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#float | Improve this Doc View Source MatchesXsGDay(String) Check that text conforms to the pattern of an xs:gDay . Declaration public static bool MatchesXsGDay(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gDay | Improve this Doc View Source MatchesXsGMonth(String) Check that text conforms to the pattern of an xs:gMonth . Declaration public static bool MatchesXsGMonth(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gMonth | Improve this Doc View Source MatchesXsGMonthDay(String) Check that text conforms to the pattern of an xs:gMonthDay . Declaration public static bool MatchesXsGMonthDay(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gMonthDay | Improve this Doc View Source MatchesXsGYear(String) Check that text conforms to the pattern of an xs:gYear . Declaration public static bool MatchesXsGYear(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gYear | Improve this Doc View Source MatchesXsGYearMonth(String) Check that text conforms to the pattern of an xs:gYearMonth . Declaration public static bool MatchesXsGYearMonth(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#gYearMonth | Improve this Doc View Source MatchesXsHexBinary(String) Check that text conforms to the pattern of an xs:hexBinary . Declaration public static bool MatchesXsHexBinary(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#hexBinary | Improve this Doc View Source MatchesXsInt(String) Check that text conforms to the pattern of an xs:int . Declaration public static bool MatchesXsInt(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#int | Improve this Doc View Source MatchesXsInteger(String) Check that text conforms to the pattern of an xs:integer . Declaration public static bool MatchesXsInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#integer | Improve this Doc View Source MatchesXsLong(String) Check that text conforms to the pattern of an xs:long . Declaration public static bool MatchesXsLong(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#long | Improve this Doc View Source MatchesXsNegativeInteger(String) Check that text conforms to the pattern of an xs:negativeInteger . Declaration public static bool MatchesXsNegativeInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#negativeInteger | Improve this Doc View Source MatchesXsNonNegativeInteger(String) Check that text conforms to the pattern of an xs:nonNegativeInteger . Declaration public static bool MatchesXsNonNegativeInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger | Improve this Doc View Source MatchesXsNonPositiveInteger(String) Check that text conforms to the pattern of an xs:nonPositiveInteger . Declaration public static bool MatchesXsNonPositiveInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#nonPositiveInteger | Improve this Doc View Source MatchesXsPositiveInteger(String) Check that text conforms to the pattern of an xs:positiveInteger . Declaration public static bool MatchesXsPositiveInteger(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#positiveInteger | Improve this Doc View Source MatchesXsShort(String) Check that text conforms to the pattern of an xs:short . Declaration public static bool MatchesXsShort(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#short | Improve this Doc View Source MatchesXsString(String) Check that text conforms to the pattern of an xs:string . Declaration public static bool MatchesXsString(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#string | Improve this Doc View Source MatchesXsTime(String) Check that text conforms to the pattern of an xs:time . Declaration public static bool MatchesXsTime(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#time | Improve this Doc View Source MatchesXsUnsignedByte(String) Check that text conforms to the pattern of an xs:unsignedByte . Declaration public static bool MatchesXsUnsignedByte(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedByte | Improve this Doc View Source MatchesXsUnsignedInt(String) Check that text conforms to the pattern of an xs:unsignedInt . Declaration public static bool MatchesXsUnsignedInt(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedInt | Improve this Doc View Source MatchesXsUnsignedLong(String) Check that text conforms to the pattern of an xs:unsignedLong . Declaration public static bool MatchesXsUnsignedLong(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedLong | Improve this Doc View Source MatchesXsUnsignedShort(String) Check that text conforms to the pattern of an xs:unsignedShort . Declaration public static bool MatchesXsUnsignedShort(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#unsignedShort | Improve this Doc View Source MatchesXsYearMonthDuration(String) Check that text conforms to the pattern of an xs:yearMonthDuration . Declaration public static bool MatchesXsYearMonthDuration(string text) Parameters Type Name Description System.String text Text to be checked Returns Type Description System.Boolean True if the text conforms to the pattern Remarks See: https://www.w3.org/TR/xmlschema11-2/#yearMonthDuration | Improve this Doc View Source PropertiesOrRangesHaveValueType(IEnumerable<ISubmodelElement>, Nullable<DataTypeDefXsd>) Check that the elements which are Property or Range have the given valueType . Declaration public static bool PropertiesOrRangesHaveValueType(IEnumerable<ISubmodelElement> elements, DataTypeDefXsd? valueType) Parameters Type Name Description IEnumerable < ISubmodelElement > elements System.Nullable < DataTypeDefXsd > valueType Returns Type Description System.Boolean Remarks We have to use nullable valueType since the compiler does not really handle nullable C# value types. See https://endjin.com/blog/2022/02/csharp-10-generics-nullable-references-improvements-allownull | Improve this Doc View Source QualifierTypesAreUnique(IEnumerable<Qualifier>) Check that there are no duplicate Type 's in the qualifiers . Declaration public static bool QualifierTypesAreUnique(IEnumerable<Qualifier> qualifiers) Parameters Type Name Description IEnumerable < Qualifier > qualifiers Returns Type Description System.Boolean | Improve this Doc View Source ReferenceKeyValuesEqual(Reference, Reference) Check that the two references, that and other , are equal by comparing their Keys by Value 's. Declaration public static bool ReferenceKeyValuesEqual(Reference that, Reference other) Parameters Type Name Description Reference that Reference other Returns Type Description System.Boolean | Improve this Doc View Source SubmodelElementIsOfType(ISubmodelElement, AasSubmodelElements) Declaration public static bool SubmodelElementIsOfType(ISubmodelElement element, AasSubmodelElements elementType) Parameters Type Name Description ISubmodelElement element AasSubmodelElements elementType Returns Type Description System.Boolean | Improve this Doc View Source SubmodelElementsHaveIdenticalSemanticIds(IEnumerable<ISubmodelElement>) Check that all elements have the identical SemanticId 's. Declaration public static bool SubmodelElementsHaveIdenticalSemanticIds(IEnumerable<ISubmodelElement> elements) Parameters Type Name Description IEnumerable < ISubmodelElement > elements Returns Type Description System.Boolean | Improve this Doc View Source ValueConsistentWithXsdType(String, DataTypeDefXsd) Check that the value is consistent with the given valueType . Declaration public static bool ValueConsistentWithXsdType(string value, DataTypeDefXsd valueType) Parameters Type Name Description System.String value DataTypeDefXsd valueType Returns Type Description System.Boolean | Improve this Doc View Source Verify(IClass) Verify the constraints of that recursively. Declaration public static IEnumerable<Reporting.Error> Verify(IClass that) Parameters Type Name Description IClass that The instance of the meta-model to be verified Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyAasSubmodelElements(AasSubmodelElements) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyAasSubmodelElements(AasSubmodelElements that) Parameters Type Name Description AasSubmodelElements that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyAssetKind(AssetKind) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyAssetKind(AssetKind that) Parameters Type Name Description AssetKind that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyBcp47LanguageTag(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyBcp47LanguageTag(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyBlobType(Byte[]) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyBlobType(byte[] that) Parameters Type Name Description System.Byte [] that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyContentType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyContentType(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDataTypeDefXsd(DataTypeDefXsd) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyDataTypeDefXsd(DataTypeDefXsd that) Parameters Type Name Description DataTypeDefXsd that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDataTypeIec61360(DataTypeIec61360) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyDataTypeIec61360(DataTypeIec61360 that) Parameters Type Name Description DataTypeIec61360 that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDateTimeStampUtc(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyDateTimeStampUtc(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyDirection(Direction) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyDirection(Direction that) Parameters Type Name Description Direction that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyEntityType(EntityType) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyEntityType(EntityType that) Parameters Type Name Description EntityType that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyIdentifier(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyIdentifier(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyIdShort(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyIdShort(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyKeyTypes(KeyTypes) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyKeyTypes(KeyTypes that) Parameters Type Name Description KeyTypes that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyLevelType(LevelType) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyLevelType(LevelType that) Parameters Type Name Description LevelType that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyModelingKind(ModelingKind) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyModelingKind(ModelingKind that) Parameters Type Name Description ModelingKind that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyNonEmptyString(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyNonEmptyString(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyPathType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyPathType(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyQualifierKind(QualifierKind) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyQualifierKind(QualifierKind that) Parameters Type Name Description QualifierKind that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyQualifierType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyQualifierType(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyReferenceTypes(ReferenceTypes) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyReferenceTypes(ReferenceTypes that) Parameters Type Name Description ReferenceTypes that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyStateOfEvent(StateOfEvent) Verify that that is a valid enumeration value. Declaration public static IEnumerable<Reporting.Error> VerifyStateOfEvent(StateOfEvent that) Parameters Type Name Description StateOfEvent that Returns Type Description IEnumerable < Reporting.Error > | Improve this Doc View Source VerifyValueDataType(String) Verify the constraints of that . Declaration public static IEnumerable<Reporting.Error> VerifyValueDataType(string that) Parameters Type Name Description System.String that Returns Type Description IEnumerable < Reporting.Error >"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformer-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformer-1.html",
    "title": "Class Visitation.AbstractTransformer<T>",
    "keywords": "Class Visitation.AbstractTransformer<T> Perform double-dispatch to transform recursively the instances into something else. Inheritance System.Object Visitation.AbstractTransformer<T> Implements Visitation.ITransformer <T> Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractTransformer<T> : object, Visitation.ITransformer<T> Type Parameters Name Description T The type of the transformation result Methods | Improve this Doc View Source Transform(AdministrativeInformation) Declaration public abstract T Transform(AdministrativeInformation that) Parameters Type Name Description AdministrativeInformation that Returns Type Description T | Improve this Doc View Source Transform(AnnotatedRelationshipElement) Declaration public abstract T Transform(AnnotatedRelationshipElement that) Parameters Type Name Description AnnotatedRelationshipElement that Returns Type Description T | Improve this Doc View Source Transform(AssetAdministrationShell) Declaration public abstract T Transform(AssetAdministrationShell that) Parameters Type Name Description AssetAdministrationShell that Returns Type Description T | Improve this Doc View Source Transform(AssetInformation) Declaration public abstract T Transform(AssetInformation that) Parameters Type Name Description AssetInformation that Returns Type Description T | Improve this Doc View Source Transform(BasicEventElement) Declaration public abstract T Transform(BasicEventElement that) Parameters Type Name Description BasicEventElement that Returns Type Description T | Improve this Doc View Source Transform(Blob) Declaration public abstract T Transform(Blob that) Parameters Type Name Description Blob that Returns Type Description T | Improve this Doc View Source Transform(Capability) Declaration public abstract T Transform(Capability that) Parameters Type Name Description Capability that Returns Type Description T | Improve this Doc View Source Transform(ConceptDescription) Declaration public abstract T Transform(ConceptDescription that) Parameters Type Name Description ConceptDescription that Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationIec61360) Declaration public abstract T Transform(DataSpecificationIec61360 that) Parameters Type Name Description DataSpecificationIec61360 that Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationPhysicalUnit) Declaration public abstract T Transform(DataSpecificationPhysicalUnit that) Parameters Type Name Description DataSpecificationPhysicalUnit that Returns Type Description T | Improve this Doc View Source Transform(EmbeddedDataSpecification) Declaration public abstract T Transform(EmbeddedDataSpecification that) Parameters Type Name Description EmbeddedDataSpecification that Returns Type Description T | Improve this Doc View Source Transform(Entity) Declaration public abstract T Transform(Entity that) Parameters Type Name Description Entity that Returns Type Description T | Improve this Doc View Source Transform(Environment) Declaration public abstract T Transform(Environment that) Parameters Type Name Description Environment that Returns Type Description T | Improve this Doc View Source Transform(EventPayload) Declaration public abstract T Transform(EventPayload that) Parameters Type Name Description EventPayload that Returns Type Description T | Improve this Doc View Source Transform(Extension) Declaration public abstract T Transform(Extension that) Parameters Type Name Description Extension that Returns Type Description T | Improve this Doc View Source Transform(File) Declaration public abstract T Transform(File that) Parameters Type Name Description File that Returns Type Description T | Improve this Doc View Source Transform(IClass) Declaration public T Transform(IClass that) Parameters Type Name Description IClass that Returns Type Description T | Improve this Doc View Source Transform(Key) Declaration public abstract T Transform(Key that) Parameters Type Name Description Key that Returns Type Description T | Improve this Doc View Source Transform(LangString) Declaration public abstract T Transform(LangString that) Parameters Type Name Description LangString that Returns Type Description T | Improve this Doc View Source Transform(MultiLanguageProperty) Declaration public abstract T Transform(MultiLanguageProperty that) Parameters Type Name Description MultiLanguageProperty that Returns Type Description T | Improve this Doc View Source Transform(Operation) Declaration public abstract T Transform(Operation that) Parameters Type Name Description Operation that Returns Type Description T | Improve this Doc View Source Transform(OperationVariable) Declaration public abstract T Transform(OperationVariable that) Parameters Type Name Description OperationVariable that Returns Type Description T | Improve this Doc View Source Transform(Property) Declaration public abstract T Transform(Property that) Parameters Type Name Description Property that Returns Type Description T | Improve this Doc View Source Transform(Qualifier) Declaration public abstract T Transform(Qualifier that) Parameters Type Name Description Qualifier that Returns Type Description T | Improve this Doc View Source Transform(Range) Declaration public abstract T Transform(Range that) Parameters Type Name Description Range that Returns Type Description T | Improve this Doc View Source Transform(Reference) Declaration public abstract T Transform(Reference that) Parameters Type Name Description Reference that Returns Type Description T | Improve this Doc View Source Transform(ReferenceElement) Declaration public abstract T Transform(ReferenceElement that) Parameters Type Name Description ReferenceElement that Returns Type Description T | Improve this Doc View Source Transform(RelationshipElement) Declaration public abstract T Transform(RelationshipElement that) Parameters Type Name Description RelationshipElement that Returns Type Description T | Improve this Doc View Source Transform(Resource) Declaration public abstract T Transform(Resource that) Parameters Type Name Description Resource that Returns Type Description T | Improve this Doc View Source Transform(SpecificAssetId) Declaration public abstract T Transform(SpecificAssetId that) Parameters Type Name Description SpecificAssetId that Returns Type Description T | Improve this Doc View Source Transform(Submodel) Declaration public abstract T Transform(Submodel that) Parameters Type Name Description Submodel that Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementCollection) Declaration public abstract T Transform(SubmodelElementCollection that) Parameters Type Name Description SubmodelElementCollection that Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementList) Declaration public abstract T Transform(SubmodelElementList that) Parameters Type Name Description SubmodelElementList that Returns Type Description T | Improve this Doc View Source Transform(ValueList) Declaration public abstract T Transform(ValueList that) Parameters Type Name Description ValueList that Returns Type Description T | Improve this Doc View Source Transform(ValueReferencePair) Declaration public abstract T Transform(ValueReferencePair that) Parameters Type Name Description ValueReferencePair that Returns Type Description T Implements Visitation.ITransformer<T>"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformerWithContext-2.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractTransformerWithContext-2.html",
    "title": "Class Visitation.AbstractTransformerWithContext<TContext, T>",
    "keywords": "Class Visitation.AbstractTransformerWithContext<TContext, T> Perform double-dispatch to transform recursively the instances into something else. Inheritance System.Object Visitation.AbstractTransformerWithContext<TContext, T> Implements Visitation.ITransformerWithContext <TContext, T> Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractTransformerWithContext<TContext, T> : object, Visitation.ITransformerWithContext<TContext, T> Type Parameters Name Description TContext The type of the transformation context T The type of the transformation result Methods | Improve this Doc View Source Transform(AdministrativeInformation, TContext) Declaration public abstract T Transform(AdministrativeInformation that, TContext context) Parameters Type Name Description AdministrativeInformation that TContext context Returns Type Description T | Improve this Doc View Source Transform(AnnotatedRelationshipElement, TContext) Declaration public abstract T Transform(AnnotatedRelationshipElement that, TContext context) Parameters Type Name Description AnnotatedRelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(AssetAdministrationShell, TContext) Declaration public abstract T Transform(AssetAdministrationShell that, TContext context) Parameters Type Name Description AssetAdministrationShell that TContext context Returns Type Description T | Improve this Doc View Source Transform(AssetInformation, TContext) Declaration public abstract T Transform(AssetInformation that, TContext context) Parameters Type Name Description AssetInformation that TContext context Returns Type Description T | Improve this Doc View Source Transform(BasicEventElement, TContext) Declaration public abstract T Transform(BasicEventElement that, TContext context) Parameters Type Name Description BasicEventElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(Blob, TContext) Declaration public abstract T Transform(Blob that, TContext context) Parameters Type Name Description Blob that TContext context Returns Type Description T | Improve this Doc View Source Transform(Capability, TContext) Declaration public abstract T Transform(Capability that, TContext context) Parameters Type Name Description Capability that TContext context Returns Type Description T | Improve this Doc View Source Transform(ConceptDescription, TContext) Declaration public abstract T Transform(ConceptDescription that, TContext context) Parameters Type Name Description ConceptDescription that TContext context Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationIec61360, TContext) Declaration public abstract T Transform(DataSpecificationIec61360 that, TContext context) Parameters Type Name Description DataSpecificationIec61360 that TContext context Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationPhysicalUnit, TContext) Declaration public abstract T Transform(DataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description DataSpecificationPhysicalUnit that TContext context Returns Type Description T | Improve this Doc View Source Transform(EmbeddedDataSpecification, TContext) Declaration public abstract T Transform(EmbeddedDataSpecification that, TContext context) Parameters Type Name Description EmbeddedDataSpecification that TContext context Returns Type Description T | Improve this Doc View Source Transform(Entity, TContext) Declaration public abstract T Transform(Entity that, TContext context) Parameters Type Name Description Entity that TContext context Returns Type Description T | Improve this Doc View Source Transform(Environment, TContext) Declaration public abstract T Transform(Environment that, TContext context) Parameters Type Name Description Environment that TContext context Returns Type Description T | Improve this Doc View Source Transform(EventPayload, TContext) Declaration public abstract T Transform(EventPayload that, TContext context) Parameters Type Name Description EventPayload that TContext context Returns Type Description T | Improve this Doc View Source Transform(Extension, TContext) Declaration public abstract T Transform(Extension that, TContext context) Parameters Type Name Description Extension that TContext context Returns Type Description T | Improve this Doc View Source Transform(File, TContext) Declaration public abstract T Transform(File that, TContext context) Parameters Type Name Description File that TContext context Returns Type Description T | Improve this Doc View Source Transform(IClass, TContext) Declaration public T Transform(IClass that, TContext context) Parameters Type Name Description IClass that TContext context Returns Type Description T | Improve this Doc View Source Transform(Key, TContext) Declaration public abstract T Transform(Key that, TContext context) Parameters Type Name Description Key that TContext context Returns Type Description T | Improve this Doc View Source Transform(LangString, TContext) Declaration public abstract T Transform(LangString that, TContext context) Parameters Type Name Description LangString that TContext context Returns Type Description T | Improve this Doc View Source Transform(MultiLanguageProperty, TContext) Declaration public abstract T Transform(MultiLanguageProperty that, TContext context) Parameters Type Name Description MultiLanguageProperty that TContext context Returns Type Description T | Improve this Doc View Source Transform(Operation, TContext) Declaration public abstract T Transform(Operation that, TContext context) Parameters Type Name Description Operation that TContext context Returns Type Description T | Improve this Doc View Source Transform(OperationVariable, TContext) Declaration public abstract T Transform(OperationVariable that, TContext context) Parameters Type Name Description OperationVariable that TContext context Returns Type Description T | Improve this Doc View Source Transform(Property, TContext) Declaration public abstract T Transform(Property that, TContext context) Parameters Type Name Description Property that TContext context Returns Type Description T | Improve this Doc View Source Transform(Qualifier, TContext) Declaration public abstract T Transform(Qualifier that, TContext context) Parameters Type Name Description Qualifier that TContext context Returns Type Description T | Improve this Doc View Source Transform(Range, TContext) Declaration public abstract T Transform(Range that, TContext context) Parameters Type Name Description Range that TContext context Returns Type Description T | Improve this Doc View Source Transform(Reference, TContext) Declaration public abstract T Transform(Reference that, TContext context) Parameters Type Name Description Reference that TContext context Returns Type Description T | Improve this Doc View Source Transform(ReferenceElement, TContext) Declaration public abstract T Transform(ReferenceElement that, TContext context) Parameters Type Name Description ReferenceElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(RelationshipElement, TContext) Declaration public abstract T Transform(RelationshipElement that, TContext context) Parameters Type Name Description RelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(Resource, TContext) Declaration public abstract T Transform(Resource that, TContext context) Parameters Type Name Description Resource that TContext context Returns Type Description T | Improve this Doc View Source Transform(SpecificAssetId, TContext) Declaration public abstract T Transform(SpecificAssetId that, TContext context) Parameters Type Name Description SpecificAssetId that TContext context Returns Type Description T | Improve this Doc View Source Transform(Submodel, TContext) Declaration public abstract T Transform(Submodel that, TContext context) Parameters Type Name Description Submodel that TContext context Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementCollection, TContext) Declaration public abstract T Transform(SubmodelElementCollection that, TContext context) Parameters Type Name Description SubmodelElementCollection that TContext context Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementList, TContext) Declaration public abstract T Transform(SubmodelElementList that, TContext context) Parameters Type Name Description SubmodelElementList that TContext context Returns Type Description T | Improve this Doc View Source Transform(ValueList, TContext) Declaration public abstract T Transform(ValueList that, TContext context) Parameters Type Name Description ValueList that TContext context Returns Type Description T | Improve this Doc View Source Transform(ValueReferencePair, TContext) Declaration public abstract T Transform(ValueReferencePair that, TContext context) Parameters Type Name Description ValueReferencePair that TContext context Returns Type Description T Implements Visitation.ITransformerWithContext<TContext, T>"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitor.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitor.html",
    "title": "Class Visitation.AbstractVisitor",
    "keywords": "Class Visitation.AbstractVisitor Perform double-dispatch to visit the concrete instances. Inheritance System.Object Visitation.AbstractVisitor Implements Visitation.IVisitor Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractVisitor : object, Visitation.IVisitor Methods | Improve this Doc View Source Visit(AdministrativeInformation) Declaration public abstract void Visit(AdministrativeInformation that) Parameters Type Name Description AdministrativeInformation that | Improve this Doc View Source Visit(AnnotatedRelationshipElement) Declaration public abstract void Visit(AnnotatedRelationshipElement that) Parameters Type Name Description AnnotatedRelationshipElement that | Improve this Doc View Source Visit(AssetAdministrationShell) Declaration public abstract void Visit(AssetAdministrationShell that) Parameters Type Name Description AssetAdministrationShell that | Improve this Doc View Source Visit(AssetInformation) Declaration public abstract void Visit(AssetInformation that) Parameters Type Name Description AssetInformation that | Improve this Doc View Source Visit(BasicEventElement) Declaration public abstract void Visit(BasicEventElement that) Parameters Type Name Description BasicEventElement that | Improve this Doc View Source Visit(Blob) Declaration public abstract void Visit(Blob that) Parameters Type Name Description Blob that | Improve this Doc View Source Visit(Capability) Declaration public abstract void Visit(Capability that) Parameters Type Name Description Capability that | Improve this Doc View Source Visit(ConceptDescription) Declaration public abstract void Visit(ConceptDescription that) Parameters Type Name Description ConceptDescription that | Improve this Doc View Source Visit(DataSpecificationIec61360) Declaration public abstract void Visit(DataSpecificationIec61360 that) Parameters Type Name Description DataSpecificationIec61360 that | Improve this Doc View Source Visit(DataSpecificationPhysicalUnit) Declaration public abstract void Visit(DataSpecificationPhysicalUnit that) Parameters Type Name Description DataSpecificationPhysicalUnit that | Improve this Doc View Source Visit(EmbeddedDataSpecification) Declaration public abstract void Visit(EmbeddedDataSpecification that) Parameters Type Name Description EmbeddedDataSpecification that | Improve this Doc View Source Visit(Entity) Declaration public abstract void Visit(Entity that) Parameters Type Name Description Entity that | Improve this Doc View Source Visit(Environment) Declaration public abstract void Visit(Environment that) Parameters Type Name Description Environment that | Improve this Doc View Source Visit(EventPayload) Declaration public abstract void Visit(EventPayload that) Parameters Type Name Description EventPayload that | Improve this Doc View Source Visit(Extension) Declaration public abstract void Visit(Extension that) Parameters Type Name Description Extension that | Improve this Doc View Source Visit(File) Declaration public abstract void Visit(File that) Parameters Type Name Description File that | Improve this Doc View Source Visit(IClass) Declaration public virtual void Visit(IClass that) Parameters Type Name Description IClass that | Improve this Doc View Source Visit(Key) Declaration public abstract void Visit(Key that) Parameters Type Name Description Key that | Improve this Doc View Source Visit(LangString) Declaration public abstract void Visit(LangString that) Parameters Type Name Description LangString that | Improve this Doc View Source Visit(MultiLanguageProperty) Declaration public abstract void Visit(MultiLanguageProperty that) Parameters Type Name Description MultiLanguageProperty that | Improve this Doc View Source Visit(Operation) Declaration public abstract void Visit(Operation that) Parameters Type Name Description Operation that | Improve this Doc View Source Visit(OperationVariable) Declaration public abstract void Visit(OperationVariable that) Parameters Type Name Description OperationVariable that | Improve this Doc View Source Visit(Property) Declaration public abstract void Visit(Property that) Parameters Type Name Description Property that | Improve this Doc View Source Visit(Qualifier) Declaration public abstract void Visit(Qualifier that) Parameters Type Name Description Qualifier that | Improve this Doc View Source Visit(Range) Declaration public abstract void Visit(Range that) Parameters Type Name Description Range that | Improve this Doc View Source Visit(Reference) Declaration public abstract void Visit(Reference that) Parameters Type Name Description Reference that | Improve this Doc View Source Visit(ReferenceElement) Declaration public abstract void Visit(ReferenceElement that) Parameters Type Name Description ReferenceElement that | Improve this Doc View Source Visit(RelationshipElement) Declaration public abstract void Visit(RelationshipElement that) Parameters Type Name Description RelationshipElement that | Improve this Doc View Source Visit(Resource) Declaration public abstract void Visit(Resource that) Parameters Type Name Description Resource that | Improve this Doc View Source Visit(SpecificAssetId) Declaration public abstract void Visit(SpecificAssetId that) Parameters Type Name Description SpecificAssetId that | Improve this Doc View Source Visit(Submodel) Declaration public abstract void Visit(Submodel that) Parameters Type Name Description Submodel that | Improve this Doc View Source Visit(SubmodelElementCollection) Declaration public abstract void Visit(SubmodelElementCollection that) Parameters Type Name Description SubmodelElementCollection that | Improve this Doc View Source Visit(SubmodelElementList) Declaration public abstract void Visit(SubmodelElementList that) Parameters Type Name Description SubmodelElementList that | Improve this Doc View Source Visit(ValueList) Declaration public abstract void Visit(ValueList that) Parameters Type Name Description ValueList that | Improve this Doc View Source Visit(ValueReferencePair) Declaration public abstract void Visit(ValueReferencePair that) Parameters Type Name Description ValueReferencePair that Implements Visitation.IVisitor"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitorWithContext-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.AbstractVisitorWithContext-1.html",
    "title": "Class Visitation.AbstractVisitorWithContext<TContext>",
    "keywords": "Class Visitation.AbstractVisitorWithContext<TContext> Perform double-dispatch to visit the concrete instances with context. Inheritance System.Object Visitation.AbstractVisitorWithContext<TContext> Implements Visitation.IVisitorWithContext <TContext> Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public abstract class AbstractVisitorWithContext<TContext> : object, Visitation.IVisitorWithContext<TContext> Type Parameters Name Description TContext Context type Methods | Improve this Doc View Source Visit(AdministrativeInformation, TContext) Declaration public abstract void Visit(AdministrativeInformation that, TContext context) Parameters Type Name Description AdministrativeInformation that TContext context | Improve this Doc View Source Visit(AnnotatedRelationshipElement, TContext) Declaration public abstract void Visit(AnnotatedRelationshipElement that, TContext context) Parameters Type Name Description AnnotatedRelationshipElement that TContext context | Improve this Doc View Source Visit(AssetAdministrationShell, TContext) Declaration public abstract void Visit(AssetAdministrationShell that, TContext context) Parameters Type Name Description AssetAdministrationShell that TContext context | Improve this Doc View Source Visit(AssetInformation, TContext) Declaration public abstract void Visit(AssetInformation that, TContext context) Parameters Type Name Description AssetInformation that TContext context | Improve this Doc View Source Visit(BasicEventElement, TContext) Declaration public abstract void Visit(BasicEventElement that, TContext context) Parameters Type Name Description BasicEventElement that TContext context | Improve this Doc View Source Visit(Blob, TContext) Declaration public abstract void Visit(Blob that, TContext context) Parameters Type Name Description Blob that TContext context | Improve this Doc View Source Visit(Capability, TContext) Declaration public abstract void Visit(Capability that, TContext context) Parameters Type Name Description Capability that TContext context | Improve this Doc View Source Visit(ConceptDescription, TContext) Declaration public abstract void Visit(ConceptDescription that, TContext context) Parameters Type Name Description ConceptDescription that TContext context | Improve this Doc View Source Visit(DataSpecificationIec61360, TContext) Declaration public abstract void Visit(DataSpecificationIec61360 that, TContext context) Parameters Type Name Description DataSpecificationIec61360 that TContext context | Improve this Doc View Source Visit(DataSpecificationPhysicalUnit, TContext) Declaration public abstract void Visit(DataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description DataSpecificationPhysicalUnit that TContext context | Improve this Doc View Source Visit(EmbeddedDataSpecification, TContext) Declaration public abstract void Visit(EmbeddedDataSpecification that, TContext context) Parameters Type Name Description EmbeddedDataSpecification that TContext context | Improve this Doc View Source Visit(Entity, TContext) Declaration public abstract void Visit(Entity that, TContext context) Parameters Type Name Description Entity that TContext context | Improve this Doc View Source Visit(Environment, TContext) Declaration public abstract void Visit(Environment that, TContext context) Parameters Type Name Description Environment that TContext context | Improve this Doc View Source Visit(EventPayload, TContext) Declaration public abstract void Visit(EventPayload that, TContext context) Parameters Type Name Description EventPayload that TContext context | Improve this Doc View Source Visit(Extension, TContext) Declaration public abstract void Visit(Extension that, TContext context) Parameters Type Name Description Extension that TContext context | Improve this Doc View Source Visit(File, TContext) Declaration public abstract void Visit(File that, TContext context) Parameters Type Name Description File that TContext context | Improve this Doc View Source Visit(IClass, TContext) Declaration public void Visit(IClass that, TContext context) Parameters Type Name Description IClass that TContext context | Improve this Doc View Source Visit(Key, TContext) Declaration public abstract void Visit(Key that, TContext context) Parameters Type Name Description Key that TContext context | Improve this Doc View Source Visit(LangString, TContext) Declaration public abstract void Visit(LangString that, TContext context) Parameters Type Name Description LangString that TContext context | Improve this Doc View Source Visit(MultiLanguageProperty, TContext) Declaration public abstract void Visit(MultiLanguageProperty that, TContext context) Parameters Type Name Description MultiLanguageProperty that TContext context | Improve this Doc View Source Visit(Operation, TContext) Declaration public abstract void Visit(Operation that, TContext context) Parameters Type Name Description Operation that TContext context | Improve this Doc View Source Visit(OperationVariable, TContext) Declaration public abstract void Visit(OperationVariable that, TContext context) Parameters Type Name Description OperationVariable that TContext context | Improve this Doc View Source Visit(Property, TContext) Declaration public abstract void Visit(Property that, TContext context) Parameters Type Name Description Property that TContext context | Improve this Doc View Source Visit(Qualifier, TContext) Declaration public abstract void Visit(Qualifier that, TContext context) Parameters Type Name Description Qualifier that TContext context | Improve this Doc View Source Visit(Range, TContext) Declaration public abstract void Visit(Range that, TContext context) Parameters Type Name Description Range that TContext context | Improve this Doc View Source Visit(Reference, TContext) Declaration public abstract void Visit(Reference that, TContext context) Parameters Type Name Description Reference that TContext context | Improve this Doc View Source Visit(ReferenceElement, TContext) Declaration public abstract void Visit(ReferenceElement that, TContext context) Parameters Type Name Description ReferenceElement that TContext context | Improve this Doc View Source Visit(RelationshipElement, TContext) Declaration public abstract void Visit(RelationshipElement that, TContext context) Parameters Type Name Description RelationshipElement that TContext context | Improve this Doc View Source Visit(Resource, TContext) Declaration public abstract void Visit(Resource that, TContext context) Parameters Type Name Description Resource that TContext context | Improve this Doc View Source Visit(SpecificAssetId, TContext) Declaration public abstract void Visit(SpecificAssetId that, TContext context) Parameters Type Name Description SpecificAssetId that TContext context | Improve this Doc View Source Visit(Submodel, TContext) Declaration public abstract void Visit(Submodel that, TContext context) Parameters Type Name Description Submodel that TContext context | Improve this Doc View Source Visit(SubmodelElementCollection, TContext) Declaration public abstract void Visit(SubmodelElementCollection that, TContext context) Parameters Type Name Description SubmodelElementCollection that TContext context | Improve this Doc View Source Visit(SubmodelElementList, TContext) Declaration public abstract void Visit(SubmodelElementList that, TContext context) Parameters Type Name Description SubmodelElementList that TContext context | Improve this Doc View Source Visit(ValueList, TContext) Declaration public abstract void Visit(ValueList that, TContext context) Parameters Type Name Description ValueList that TContext context | Improve this Doc View Source Visit(ValueReferencePair, TContext) Declaration public abstract void Visit(ValueReferencePair that, TContext context) Parameters Type Name Description ValueReferencePair that TContext context Implements Visitation.IVisitorWithContext<TContext>"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.html",
    "title": "Class Visitation",
    "keywords": "Class Visitation Inheritance System.Object Visitation Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Visitation : object"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.ITransformer-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.ITransformer-1.html",
    "title": "Interface Visitation.ITransformer<T>",
    "keywords": "Interface Visitation.ITransformer<T> Define the interface for a transformer which transforms recursively the instances into something else. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ITransformer<out T> Type Parameters Name Description T The type of the transformation result Methods | Improve this Doc View Source Transform(AdministrativeInformation) Declaration T Transform(AdministrativeInformation that) Parameters Type Name Description AdministrativeInformation that Returns Type Description T | Improve this Doc View Source Transform(AnnotatedRelationshipElement) Declaration T Transform(AnnotatedRelationshipElement that) Parameters Type Name Description AnnotatedRelationshipElement that Returns Type Description T | Improve this Doc View Source Transform(AssetAdministrationShell) Declaration T Transform(AssetAdministrationShell that) Parameters Type Name Description AssetAdministrationShell that Returns Type Description T | Improve this Doc View Source Transform(AssetInformation) Declaration T Transform(AssetInformation that) Parameters Type Name Description AssetInformation that Returns Type Description T | Improve this Doc View Source Transform(BasicEventElement) Declaration T Transform(BasicEventElement that) Parameters Type Name Description BasicEventElement that Returns Type Description T | Improve this Doc View Source Transform(Blob) Declaration T Transform(Blob that) Parameters Type Name Description Blob that Returns Type Description T | Improve this Doc View Source Transform(Capability) Declaration T Transform(Capability that) Parameters Type Name Description Capability that Returns Type Description T | Improve this Doc View Source Transform(ConceptDescription) Declaration T Transform(ConceptDescription that) Parameters Type Name Description ConceptDescription that Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationIec61360) Declaration T Transform(DataSpecificationIec61360 that) Parameters Type Name Description DataSpecificationIec61360 that Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationPhysicalUnit) Declaration T Transform(DataSpecificationPhysicalUnit that) Parameters Type Name Description DataSpecificationPhysicalUnit that Returns Type Description T | Improve this Doc View Source Transform(EmbeddedDataSpecification) Declaration T Transform(EmbeddedDataSpecification that) Parameters Type Name Description EmbeddedDataSpecification that Returns Type Description T | Improve this Doc View Source Transform(Entity) Declaration T Transform(Entity that) Parameters Type Name Description Entity that Returns Type Description T | Improve this Doc View Source Transform(Environment) Declaration T Transform(Environment that) Parameters Type Name Description Environment that Returns Type Description T | Improve this Doc View Source Transform(EventPayload) Declaration T Transform(EventPayload that) Parameters Type Name Description EventPayload that Returns Type Description T | Improve this Doc View Source Transform(Extension) Declaration T Transform(Extension that) Parameters Type Name Description Extension that Returns Type Description T | Improve this Doc View Source Transform(File) Declaration T Transform(File that) Parameters Type Name Description File that Returns Type Description T | Improve this Doc View Source Transform(IClass) Declaration T Transform(IClass that) Parameters Type Name Description IClass that Returns Type Description T | Improve this Doc View Source Transform(Key) Declaration T Transform(Key that) Parameters Type Name Description Key that Returns Type Description T | Improve this Doc View Source Transform(LangString) Declaration T Transform(LangString that) Parameters Type Name Description LangString that Returns Type Description T | Improve this Doc View Source Transform(MultiLanguageProperty) Declaration T Transform(MultiLanguageProperty that) Parameters Type Name Description MultiLanguageProperty that Returns Type Description T | Improve this Doc View Source Transform(Operation) Declaration T Transform(Operation that) Parameters Type Name Description Operation that Returns Type Description T | Improve this Doc View Source Transform(OperationVariable) Declaration T Transform(OperationVariable that) Parameters Type Name Description OperationVariable that Returns Type Description T | Improve this Doc View Source Transform(Property) Declaration T Transform(Property that) Parameters Type Name Description Property that Returns Type Description T | Improve this Doc View Source Transform(Qualifier) Declaration T Transform(Qualifier that) Parameters Type Name Description Qualifier that Returns Type Description T | Improve this Doc View Source Transform(Range) Declaration T Transform(Range that) Parameters Type Name Description Range that Returns Type Description T | Improve this Doc View Source Transform(Reference) Declaration T Transform(Reference that) Parameters Type Name Description Reference that Returns Type Description T | Improve this Doc View Source Transform(ReferenceElement) Declaration T Transform(ReferenceElement that) Parameters Type Name Description ReferenceElement that Returns Type Description T | Improve this Doc View Source Transform(RelationshipElement) Declaration T Transform(RelationshipElement that) Parameters Type Name Description RelationshipElement that Returns Type Description T | Improve this Doc View Source Transform(Resource) Declaration T Transform(Resource that) Parameters Type Name Description Resource that Returns Type Description T | Improve this Doc View Source Transform(SpecificAssetId) Declaration T Transform(SpecificAssetId that) Parameters Type Name Description SpecificAssetId that Returns Type Description T | Improve this Doc View Source Transform(Submodel) Declaration T Transform(Submodel that) Parameters Type Name Description Submodel that Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementCollection) Declaration T Transform(SubmodelElementCollection that) Parameters Type Name Description SubmodelElementCollection that Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementList) Declaration T Transform(SubmodelElementList that) Parameters Type Name Description SubmodelElementList that Returns Type Description T | Improve this Doc View Source Transform(ValueList) Declaration T Transform(ValueList that) Parameters Type Name Description ValueList that Returns Type Description T | Improve this Doc View Source Transform(ValueReferencePair) Declaration T Transform(ValueReferencePair that) Parameters Type Name Description ValueReferencePair that Returns Type Description T"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.ITransformerWithContext-2.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.ITransformerWithContext-2.html",
    "title": "Interface Visitation.ITransformerWithContext<TContext, T>",
    "keywords": "Interface Visitation.ITransformerWithContext<TContext, T> Define the interface for a transformer which recursively transforms the instances into something else while the context is passed along. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface ITransformerWithContext<in TContext, out T> Type Parameters Name Description TContext Type of the transformation context T The type of the transformation result Methods | Improve this Doc View Source Transform(AdministrativeInformation, TContext) Declaration T Transform(AdministrativeInformation that, TContext context) Parameters Type Name Description AdministrativeInformation that TContext context Returns Type Description T | Improve this Doc View Source Transform(AnnotatedRelationshipElement, TContext) Declaration T Transform(AnnotatedRelationshipElement that, TContext context) Parameters Type Name Description AnnotatedRelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(AssetAdministrationShell, TContext) Declaration T Transform(AssetAdministrationShell that, TContext context) Parameters Type Name Description AssetAdministrationShell that TContext context Returns Type Description T | Improve this Doc View Source Transform(AssetInformation, TContext) Declaration T Transform(AssetInformation that, TContext context) Parameters Type Name Description AssetInformation that TContext context Returns Type Description T | Improve this Doc View Source Transform(BasicEventElement, TContext) Declaration T Transform(BasicEventElement that, TContext context) Parameters Type Name Description BasicEventElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(Blob, TContext) Declaration T Transform(Blob that, TContext context) Parameters Type Name Description Blob that TContext context Returns Type Description T | Improve this Doc View Source Transform(Capability, TContext) Declaration T Transform(Capability that, TContext context) Parameters Type Name Description Capability that TContext context Returns Type Description T | Improve this Doc View Source Transform(ConceptDescription, TContext) Declaration T Transform(ConceptDescription that, TContext context) Parameters Type Name Description ConceptDescription that TContext context Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationIec61360, TContext) Declaration T Transform(DataSpecificationIec61360 that, TContext context) Parameters Type Name Description DataSpecificationIec61360 that TContext context Returns Type Description T | Improve this Doc View Source Transform(DataSpecificationPhysicalUnit, TContext) Declaration T Transform(DataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description DataSpecificationPhysicalUnit that TContext context Returns Type Description T | Improve this Doc View Source Transform(EmbeddedDataSpecification, TContext) Declaration T Transform(EmbeddedDataSpecification that, TContext context) Parameters Type Name Description EmbeddedDataSpecification that TContext context Returns Type Description T | Improve this Doc View Source Transform(Entity, TContext) Declaration T Transform(Entity that, TContext context) Parameters Type Name Description Entity that TContext context Returns Type Description T | Improve this Doc View Source Transform(Environment, TContext) Declaration T Transform(Environment that, TContext context) Parameters Type Name Description Environment that TContext context Returns Type Description T | Improve this Doc View Source Transform(EventPayload, TContext) Declaration T Transform(EventPayload that, TContext context) Parameters Type Name Description EventPayload that TContext context Returns Type Description T | Improve this Doc View Source Transform(Extension, TContext) Declaration T Transform(Extension that, TContext context) Parameters Type Name Description Extension that TContext context Returns Type Description T | Improve this Doc View Source Transform(File, TContext) Declaration T Transform(File that, TContext context) Parameters Type Name Description File that TContext context Returns Type Description T | Improve this Doc View Source Transform(IClass, TContext) Declaration T Transform(IClass that, TContext context) Parameters Type Name Description IClass that TContext context Returns Type Description T | Improve this Doc View Source Transform(Key, TContext) Declaration T Transform(Key that, TContext context) Parameters Type Name Description Key that TContext context Returns Type Description T | Improve this Doc View Source Transform(LangString, TContext) Declaration T Transform(LangString that, TContext context) Parameters Type Name Description LangString that TContext context Returns Type Description T | Improve this Doc View Source Transform(MultiLanguageProperty, TContext) Declaration T Transform(MultiLanguageProperty that, TContext context) Parameters Type Name Description MultiLanguageProperty that TContext context Returns Type Description T | Improve this Doc View Source Transform(Operation, TContext) Declaration T Transform(Operation that, TContext context) Parameters Type Name Description Operation that TContext context Returns Type Description T | Improve this Doc View Source Transform(OperationVariable, TContext) Declaration T Transform(OperationVariable that, TContext context) Parameters Type Name Description OperationVariable that TContext context Returns Type Description T | Improve this Doc View Source Transform(Property, TContext) Declaration T Transform(Property that, TContext context) Parameters Type Name Description Property that TContext context Returns Type Description T | Improve this Doc View Source Transform(Qualifier, TContext) Declaration T Transform(Qualifier that, TContext context) Parameters Type Name Description Qualifier that TContext context Returns Type Description T | Improve this Doc View Source Transform(Range, TContext) Declaration T Transform(Range that, TContext context) Parameters Type Name Description Range that TContext context Returns Type Description T | Improve this Doc View Source Transform(Reference, TContext) Declaration T Transform(Reference that, TContext context) Parameters Type Name Description Reference that TContext context Returns Type Description T | Improve this Doc View Source Transform(ReferenceElement, TContext) Declaration T Transform(ReferenceElement that, TContext context) Parameters Type Name Description ReferenceElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(RelationshipElement, TContext) Declaration T Transform(RelationshipElement that, TContext context) Parameters Type Name Description RelationshipElement that TContext context Returns Type Description T | Improve this Doc View Source Transform(Resource, TContext) Declaration T Transform(Resource that, TContext context) Parameters Type Name Description Resource that TContext context Returns Type Description T | Improve this Doc View Source Transform(SpecificAssetId, TContext) Declaration T Transform(SpecificAssetId that, TContext context) Parameters Type Name Description SpecificAssetId that TContext context Returns Type Description T | Improve this Doc View Source Transform(Submodel, TContext) Declaration T Transform(Submodel that, TContext context) Parameters Type Name Description Submodel that TContext context Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementCollection, TContext) Declaration T Transform(SubmodelElementCollection that, TContext context) Parameters Type Name Description SubmodelElementCollection that TContext context Returns Type Description T | Improve this Doc View Source Transform(SubmodelElementList, TContext) Declaration T Transform(SubmodelElementList that, TContext context) Parameters Type Name Description SubmodelElementList that TContext context Returns Type Description T | Improve this Doc View Source Transform(ValueList, TContext) Declaration T Transform(ValueList that, TContext context) Parameters Type Name Description ValueList that TContext context Returns Type Description T | Improve this Doc View Source Transform(ValueReferencePair, TContext) Declaration T Transform(ValueReferencePair that, TContext context) Parameters Type Name Description ValueReferencePair that TContext context Returns Type Description T"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.IVisitor.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.IVisitor.html",
    "title": "Interface Visitation.IVisitor",
    "keywords": "Interface Visitation.IVisitor Define the interface for a visitor which visits the instances of the model. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IVisitor Methods | Improve this Doc View Source Visit(AdministrativeInformation) Declaration void Visit(AdministrativeInformation that) Parameters Type Name Description AdministrativeInformation that | Improve this Doc View Source Visit(AnnotatedRelationshipElement) Declaration void Visit(AnnotatedRelationshipElement that) Parameters Type Name Description AnnotatedRelationshipElement that | Improve this Doc View Source Visit(AssetAdministrationShell) Declaration void Visit(AssetAdministrationShell that) Parameters Type Name Description AssetAdministrationShell that | Improve this Doc View Source Visit(AssetInformation) Declaration void Visit(AssetInformation that) Parameters Type Name Description AssetInformation that | Improve this Doc View Source Visit(BasicEventElement) Declaration void Visit(BasicEventElement that) Parameters Type Name Description BasicEventElement that | Improve this Doc View Source Visit(Blob) Declaration void Visit(Blob that) Parameters Type Name Description Blob that | Improve this Doc View Source Visit(Capability) Declaration void Visit(Capability that) Parameters Type Name Description Capability that | Improve this Doc View Source Visit(ConceptDescription) Declaration void Visit(ConceptDescription that) Parameters Type Name Description ConceptDescription that | Improve this Doc View Source Visit(DataSpecificationIec61360) Declaration void Visit(DataSpecificationIec61360 that) Parameters Type Name Description DataSpecificationIec61360 that | Improve this Doc View Source Visit(DataSpecificationPhysicalUnit) Declaration void Visit(DataSpecificationPhysicalUnit that) Parameters Type Name Description DataSpecificationPhysicalUnit that | Improve this Doc View Source Visit(EmbeddedDataSpecification) Declaration void Visit(EmbeddedDataSpecification that) Parameters Type Name Description EmbeddedDataSpecification that | Improve this Doc View Source Visit(Entity) Declaration void Visit(Entity that) Parameters Type Name Description Entity that | Improve this Doc View Source Visit(Environment) Declaration void Visit(Environment that) Parameters Type Name Description Environment that | Improve this Doc View Source Visit(EventPayload) Declaration void Visit(EventPayload that) Parameters Type Name Description EventPayload that | Improve this Doc View Source Visit(Extension) Declaration void Visit(Extension that) Parameters Type Name Description Extension that | Improve this Doc View Source Visit(File) Declaration void Visit(File that) Parameters Type Name Description File that | Improve this Doc View Source Visit(IClass) Declaration void Visit(IClass that) Parameters Type Name Description IClass that | Improve this Doc View Source Visit(Key) Declaration void Visit(Key that) Parameters Type Name Description Key that | Improve this Doc View Source Visit(LangString) Declaration void Visit(LangString that) Parameters Type Name Description LangString that | Improve this Doc View Source Visit(MultiLanguageProperty) Declaration void Visit(MultiLanguageProperty that) Parameters Type Name Description MultiLanguageProperty that | Improve this Doc View Source Visit(Operation) Declaration void Visit(Operation that) Parameters Type Name Description Operation that | Improve this Doc View Source Visit(OperationVariable) Declaration void Visit(OperationVariable that) Parameters Type Name Description OperationVariable that | Improve this Doc View Source Visit(Property) Declaration void Visit(Property that) Parameters Type Name Description Property that | Improve this Doc View Source Visit(Qualifier) Declaration void Visit(Qualifier that) Parameters Type Name Description Qualifier that | Improve this Doc View Source Visit(Range) Declaration void Visit(Range that) Parameters Type Name Description Range that | Improve this Doc View Source Visit(Reference) Declaration void Visit(Reference that) Parameters Type Name Description Reference that | Improve this Doc View Source Visit(ReferenceElement) Declaration void Visit(ReferenceElement that) Parameters Type Name Description ReferenceElement that | Improve this Doc View Source Visit(RelationshipElement) Declaration void Visit(RelationshipElement that) Parameters Type Name Description RelationshipElement that | Improve this Doc View Source Visit(Resource) Declaration void Visit(Resource that) Parameters Type Name Description Resource that | Improve this Doc View Source Visit(SpecificAssetId) Declaration void Visit(SpecificAssetId that) Parameters Type Name Description SpecificAssetId that | Improve this Doc View Source Visit(Submodel) Declaration void Visit(Submodel that) Parameters Type Name Description Submodel that | Improve this Doc View Source Visit(SubmodelElementCollection) Declaration void Visit(SubmodelElementCollection that) Parameters Type Name Description SubmodelElementCollection that | Improve this Doc View Source Visit(SubmodelElementList) Declaration void Visit(SubmodelElementList that) Parameters Type Name Description SubmodelElementList that | Improve this Doc View Source Visit(ValueList) Declaration void Visit(ValueList that) Parameters Type Name Description ValueList that | Improve this Doc View Source Visit(ValueReferencePair) Declaration void Visit(ValueReferencePair that) Parameters Type Name Description ValueReferencePair that"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.IVisitorWithContext-1.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.IVisitorWithContext-1.html",
    "title": "Interface Visitation.IVisitorWithContext<TContext>",
    "keywords": "Interface Visitation.IVisitorWithContext<TContext> Define the interface for a visitor which visits the instances of the model. Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public interface IVisitorWithContext<in TContext> Type Parameters Name Description TContext Context type Methods | Improve this Doc View Source Visit(AdministrativeInformation, TContext) Declaration void Visit(AdministrativeInformation that, TContext context) Parameters Type Name Description AdministrativeInformation that TContext context | Improve this Doc View Source Visit(AnnotatedRelationshipElement, TContext) Declaration void Visit(AnnotatedRelationshipElement that, TContext context) Parameters Type Name Description AnnotatedRelationshipElement that TContext context | Improve this Doc View Source Visit(AssetAdministrationShell, TContext) Declaration void Visit(AssetAdministrationShell that, TContext context) Parameters Type Name Description AssetAdministrationShell that TContext context | Improve this Doc View Source Visit(AssetInformation, TContext) Declaration void Visit(AssetInformation that, TContext context) Parameters Type Name Description AssetInformation that TContext context | Improve this Doc View Source Visit(BasicEventElement, TContext) Declaration void Visit(BasicEventElement that, TContext context) Parameters Type Name Description BasicEventElement that TContext context | Improve this Doc View Source Visit(Blob, TContext) Declaration void Visit(Blob that, TContext context) Parameters Type Name Description Blob that TContext context | Improve this Doc View Source Visit(Capability, TContext) Declaration void Visit(Capability that, TContext context) Parameters Type Name Description Capability that TContext context | Improve this Doc View Source Visit(ConceptDescription, TContext) Declaration void Visit(ConceptDescription that, TContext context) Parameters Type Name Description ConceptDescription that TContext context | Improve this Doc View Source Visit(DataSpecificationIec61360, TContext) Declaration void Visit(DataSpecificationIec61360 that, TContext context) Parameters Type Name Description DataSpecificationIec61360 that TContext context | Improve this Doc View Source Visit(DataSpecificationPhysicalUnit, TContext) Declaration void Visit(DataSpecificationPhysicalUnit that, TContext context) Parameters Type Name Description DataSpecificationPhysicalUnit that TContext context | Improve this Doc View Source Visit(EmbeddedDataSpecification, TContext) Declaration void Visit(EmbeddedDataSpecification that, TContext context) Parameters Type Name Description EmbeddedDataSpecification that TContext context | Improve this Doc View Source Visit(Entity, TContext) Declaration void Visit(Entity that, TContext context) Parameters Type Name Description Entity that TContext context | Improve this Doc View Source Visit(Environment, TContext) Declaration void Visit(Environment that, TContext context) Parameters Type Name Description Environment that TContext context | Improve this Doc View Source Visit(EventPayload, TContext) Declaration void Visit(EventPayload that, TContext context) Parameters Type Name Description EventPayload that TContext context | Improve this Doc View Source Visit(Extension, TContext) Declaration void Visit(Extension that, TContext context) Parameters Type Name Description Extension that TContext context | Improve this Doc View Source Visit(File, TContext) Declaration void Visit(File that, TContext context) Parameters Type Name Description File that TContext context | Improve this Doc View Source Visit(IClass, TContext) Declaration void Visit(IClass that, TContext context) Parameters Type Name Description IClass that TContext context | Improve this Doc View Source Visit(Key, TContext) Declaration void Visit(Key that, TContext context) Parameters Type Name Description Key that TContext context | Improve this Doc View Source Visit(LangString, TContext) Declaration void Visit(LangString that, TContext context) Parameters Type Name Description LangString that TContext context | Improve this Doc View Source Visit(MultiLanguageProperty, TContext) Declaration void Visit(MultiLanguageProperty that, TContext context) Parameters Type Name Description MultiLanguageProperty that TContext context | Improve this Doc View Source Visit(Operation, TContext) Declaration void Visit(Operation that, TContext context) Parameters Type Name Description Operation that TContext context | Improve this Doc View Source Visit(OperationVariable, TContext) Declaration void Visit(OperationVariable that, TContext context) Parameters Type Name Description OperationVariable that TContext context | Improve this Doc View Source Visit(Property, TContext) Declaration void Visit(Property that, TContext context) Parameters Type Name Description Property that TContext context | Improve this Doc View Source Visit(Qualifier, TContext) Declaration void Visit(Qualifier that, TContext context) Parameters Type Name Description Qualifier that TContext context | Improve this Doc View Source Visit(Range, TContext) Declaration void Visit(Range that, TContext context) Parameters Type Name Description Range that TContext context | Improve this Doc View Source Visit(Reference, TContext) Declaration void Visit(Reference that, TContext context) Parameters Type Name Description Reference that TContext context | Improve this Doc View Source Visit(ReferenceElement, TContext) Declaration void Visit(ReferenceElement that, TContext context) Parameters Type Name Description ReferenceElement that TContext context | Improve this Doc View Source Visit(RelationshipElement, TContext) Declaration void Visit(RelationshipElement that, TContext context) Parameters Type Name Description RelationshipElement that TContext context | Improve this Doc View Source Visit(Resource, TContext) Declaration void Visit(Resource that, TContext context) Parameters Type Name Description Resource that TContext context | Improve this Doc View Source Visit(SpecificAssetId, TContext) Declaration void Visit(SpecificAssetId that, TContext context) Parameters Type Name Description SpecificAssetId that TContext context | Improve this Doc View Source Visit(Submodel, TContext) Declaration void Visit(Submodel that, TContext context) Parameters Type Name Description Submodel that TContext context | Improve this Doc View Source Visit(SubmodelElementCollection, TContext) Declaration void Visit(SubmodelElementCollection that, TContext context) Parameters Type Name Description SubmodelElementCollection that TContext context | Improve this Doc View Source Visit(SubmodelElementList, TContext) Declaration void Visit(SubmodelElementList that, TContext context) Parameters Type Name Description SubmodelElementList that TContext context | Improve this Doc View Source Visit(ValueList, TContext) Declaration void Visit(ValueList that, TContext context) Parameters Type Name Description ValueList that TContext context | Improve this Doc View Source Visit(ValueReferencePair, TContext) Declaration void Visit(ValueReferencePair that, TContext context) Parameters Type Name Description ValueReferencePair that TContext context"
  },
  "api/AasCore.Aas3_0_RC02.Visitation.VisitorThrough.html": {
    "href": "api/AasCore.Aas3_0_RC02.Visitation.VisitorThrough.html",
    "title": "Class Visitation.VisitorThrough",
    "keywords": "Class Visitation.VisitorThrough Just descend through the instances without any action. Inheritance System.Object Visitation.VisitorThrough Implements Visitation.IVisitor Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class VisitorThrough : object, Visitation.IVisitor Remarks This class is meaningless for itself. However, it is a good base if you want to descend through instances and apply actions only on a subset of classes. Methods | Improve this Doc View Source Visit(AdministrativeInformation) Declaration public virtual void Visit(AdministrativeInformation that) Parameters Type Name Description AdministrativeInformation that | Improve this Doc View Source Visit(AnnotatedRelationshipElement) Declaration public virtual void Visit(AnnotatedRelationshipElement that) Parameters Type Name Description AnnotatedRelationshipElement that | Improve this Doc View Source Visit(AssetAdministrationShell) Declaration public virtual void Visit(AssetAdministrationShell that) Parameters Type Name Description AssetAdministrationShell that | Improve this Doc View Source Visit(AssetInformation) Declaration public virtual void Visit(AssetInformation that) Parameters Type Name Description AssetInformation that | Improve this Doc View Source Visit(BasicEventElement) Declaration public virtual void Visit(BasicEventElement that) Parameters Type Name Description BasicEventElement that | Improve this Doc View Source Visit(Blob) Declaration public virtual void Visit(Blob that) Parameters Type Name Description Blob that | Improve this Doc View Source Visit(Capability) Declaration public virtual void Visit(Capability that) Parameters Type Name Description Capability that | Improve this Doc View Source Visit(ConceptDescription) Declaration public virtual void Visit(ConceptDescription that) Parameters Type Name Description ConceptDescription that | Improve this Doc View Source Visit(DataSpecificationIec61360) Declaration public virtual void Visit(DataSpecificationIec61360 that) Parameters Type Name Description DataSpecificationIec61360 that | Improve this Doc View Source Visit(DataSpecificationPhysicalUnit) Declaration public virtual void Visit(DataSpecificationPhysicalUnit that) Parameters Type Name Description DataSpecificationPhysicalUnit that | Improve this Doc View Source Visit(EmbeddedDataSpecification) Declaration public virtual void Visit(EmbeddedDataSpecification that) Parameters Type Name Description EmbeddedDataSpecification that | Improve this Doc View Source Visit(Entity) Declaration public virtual void Visit(Entity that) Parameters Type Name Description Entity that | Improve this Doc View Source Visit(Environment) Declaration public virtual void Visit(Environment that) Parameters Type Name Description Environment that | Improve this Doc View Source Visit(EventPayload) Declaration public virtual void Visit(EventPayload that) Parameters Type Name Description EventPayload that | Improve this Doc View Source Visit(Extension) Declaration public virtual void Visit(Extension that) Parameters Type Name Description Extension that | Improve this Doc View Source Visit(File) Declaration public virtual void Visit(File that) Parameters Type Name Description File that | Improve this Doc View Source Visit(IClass) Declaration public virtual void Visit(IClass that) Parameters Type Name Description IClass that | Improve this Doc View Source Visit(Key) Declaration public virtual void Visit(Key that) Parameters Type Name Description Key that | Improve this Doc View Source Visit(LangString) Declaration public virtual void Visit(LangString that) Parameters Type Name Description LangString that | Improve this Doc View Source Visit(MultiLanguageProperty) Declaration public virtual void Visit(MultiLanguageProperty that) Parameters Type Name Description MultiLanguageProperty that | Improve this Doc View Source Visit(Operation) Declaration public virtual void Visit(Operation that) Parameters Type Name Description Operation that | Improve this Doc View Source Visit(OperationVariable) Declaration public virtual void Visit(OperationVariable that) Parameters Type Name Description OperationVariable that | Improve this Doc View Source Visit(Property) Declaration public virtual void Visit(Property that) Parameters Type Name Description Property that | Improve this Doc View Source Visit(Qualifier) Declaration public virtual void Visit(Qualifier that) Parameters Type Name Description Qualifier that | Improve this Doc View Source Visit(Range) Declaration public virtual void Visit(Range that) Parameters Type Name Description Range that | Improve this Doc View Source Visit(Reference) Declaration public virtual void Visit(Reference that) Parameters Type Name Description Reference that | Improve this Doc View Source Visit(ReferenceElement) Declaration public virtual void Visit(ReferenceElement that) Parameters Type Name Description ReferenceElement that | Improve this Doc View Source Visit(RelationshipElement) Declaration public virtual void Visit(RelationshipElement that) Parameters Type Name Description RelationshipElement that | Improve this Doc View Source Visit(Resource) Declaration public virtual void Visit(Resource that) Parameters Type Name Description Resource that | Improve this Doc View Source Visit(SpecificAssetId) Declaration public virtual void Visit(SpecificAssetId that) Parameters Type Name Description SpecificAssetId that | Improve this Doc View Source Visit(Submodel) Declaration public virtual void Visit(Submodel that) Parameters Type Name Description Submodel that | Improve this Doc View Source Visit(SubmodelElementCollection) Declaration public virtual void Visit(SubmodelElementCollection that) Parameters Type Name Description SubmodelElementCollection that | Improve this Doc View Source Visit(SubmodelElementList) Declaration public virtual void Visit(SubmodelElementList that) Parameters Type Name Description SubmodelElementList that | Improve this Doc View Source Visit(ValueList) Declaration public virtual void Visit(ValueList that) Parameters Type Name Description ValueList that | Improve this Doc View Source Visit(ValueReferencePair) Declaration public virtual void Visit(ValueReferencePair that) Parameters Type Name Description ValueReferencePair that Implements Visitation.IVisitor"
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.Deserialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.Deserialize.html",
    "title": "Class Xmlization.Deserialize",
    "keywords": "Class Xmlization.Deserialize Deserialize instances of meta-model classes from XML. Inheritance System.Object Xmlization.Deserialize Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Deserialize : object Examples Here is an example how to parse an instance of class IHasSemantics: var reader = new System.Xml.XmlReader(/* some arguments */); Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom( reader); If the elements live in a namespace, you have to supply it. For example: var reader = new System.Xml.XmlReader(/* some arguments */); Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom( reader, \"http://www.example.com/5/12\"); Methods | Improve this Doc View Source AdministrativeInformationFrom(System.Xml.XmlReader) Deserialize an instance of AdministrativeInformation from reader . Declaration public static AdministrativeInformation AdministrativeInformationFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AdministrativeInformation Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AdministrativeInformation. | Improve this Doc View Source AnnotatedRelationshipElementFrom(System.Xml.XmlReader) Deserialize an instance of AnnotatedRelationshipElement from reader . Declaration public static AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AnnotatedRelationshipElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AnnotatedRelationshipElement. | Improve this Doc View Source AssetAdministrationShellFrom(System.Xml.XmlReader) Deserialize an instance of AssetAdministrationShell from reader . Declaration public static AssetAdministrationShell AssetAdministrationShellFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AssetAdministrationShell Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AssetAdministrationShell. | Improve this Doc View Source AssetInformationFrom(System.Xml.XmlReader) Deserialize an instance of AssetInformation from reader . Declaration public static AssetInformation AssetInformationFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description AssetInformation Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of AssetInformation. | Improve this Doc View Source BasicEventElementFrom(System.Xml.XmlReader) Deserialize an instance of BasicEventElement from reader . Declaration public static BasicEventElement BasicEventElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description BasicEventElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of BasicEventElement. | Improve this Doc View Source BlobFrom(System.Xml.XmlReader) Deserialize an instance of Blob from reader . Declaration public static Blob BlobFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Blob Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Blob. | Improve this Doc View Source CapabilityFrom(System.Xml.XmlReader) Deserialize an instance of Capability from reader . Declaration public static Capability CapabilityFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Capability Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Capability. | Improve this Doc View Source ConceptDescriptionFrom(System.Xml.XmlReader) Deserialize an instance of ConceptDescription from reader . Declaration public static ConceptDescription ConceptDescriptionFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ConceptDescription Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ConceptDescription. | Improve this Doc View Source DataSpecificationIec61360From(System.Xml.XmlReader) Deserialize an instance of DataSpecificationIec61360 from reader . Declaration public static DataSpecificationIec61360 DataSpecificationIec61360From(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description DataSpecificationIec61360 Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of DataSpecificationIec61360. | Improve this Doc View Source DataSpecificationPhysicalUnitFrom(System.Xml.XmlReader) Deserialize an instance of DataSpecificationPhysicalUnit from reader . Declaration public static DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description DataSpecificationPhysicalUnit Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of DataSpecificationPhysicalUnit. | Improve this Doc View Source EmbeddedDataSpecificationFrom(System.Xml.XmlReader) Deserialize an instance of EmbeddedDataSpecification from reader . Declaration public static EmbeddedDataSpecification EmbeddedDataSpecificationFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description EmbeddedDataSpecification Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of EmbeddedDataSpecification. | Improve this Doc View Source EntityFrom(System.Xml.XmlReader) Deserialize an instance of Entity from reader . Declaration public static Entity EntityFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Entity Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Entity. | Improve this Doc View Source EnvironmentFrom(System.Xml.XmlReader) Deserialize an instance of Environment from reader . Declaration public static Environment EnvironmentFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Environment Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Environment. | Improve this Doc View Source EventPayloadFrom(System.Xml.XmlReader) Deserialize an instance of EventPayload from reader . Declaration public static EventPayload EventPayloadFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description EventPayload Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of EventPayload. | Improve this Doc View Source ExtensionFrom(System.Xml.XmlReader) Deserialize an instance of Extension from reader . Declaration public static Extension ExtensionFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Extension Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Extension. | Improve this Doc View Source FileFrom(System.Xml.XmlReader) Deserialize an instance of File from reader . Declaration public static File FileFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description File Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of File. | Improve this Doc View Source IDataElementFrom(System.Xml.XmlReader) Deserialize an instance of IDataElement from reader . Declaration public static IDataElement IDataElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IDataElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IDataElement. | Improve this Doc View Source IDataSpecificationContentFrom(System.Xml.XmlReader) Deserialize an instance of IDataSpecificationContent from reader . Declaration public static IDataSpecificationContent IDataSpecificationContentFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IDataSpecificationContent Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IDataSpecificationContent. | Improve this Doc View Source IEventElementFrom(System.Xml.XmlReader) Deserialize an instance of IEventElement from reader . Declaration public static IEventElement IEventElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IEventElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IEventElement. | Improve this Doc View Source IHasDataSpecificationFrom(System.Xml.XmlReader) Deserialize an instance of IHasDataSpecification from reader . Declaration public static IHasDataSpecification IHasDataSpecificationFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasDataSpecification Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasDataSpecification. | Improve this Doc View Source IHasExtensionsFrom(System.Xml.XmlReader) Deserialize an instance of IHasExtensions from reader . Declaration public static IHasExtensions IHasExtensionsFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasExtensions Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasExtensions. | Improve this Doc View Source IHasKindFrom(System.Xml.XmlReader) Deserialize an instance of IHasKind from reader . Declaration public static IHasKind IHasKindFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasKind Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasKind. | Improve this Doc View Source IHasSemanticsFrom(System.Xml.XmlReader) Deserialize an instance of IHasSemantics from reader . Declaration public static IHasSemantics IHasSemanticsFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IHasSemantics Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IHasSemantics. | Improve this Doc View Source IIdentifiableFrom(System.Xml.XmlReader) Deserialize an instance of IIdentifiable from reader . Declaration public static IIdentifiable IIdentifiableFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IIdentifiable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IIdentifiable. | Improve this Doc View Source IQualifiableFrom(System.Xml.XmlReader) Deserialize an instance of IQualifiable from reader . Declaration public static IQualifiable IQualifiableFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IQualifiable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IQualifiable. | Improve this Doc View Source IReferableFrom(System.Xml.XmlReader) Deserialize an instance of IReferable from reader . Declaration public static IReferable IReferableFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IReferable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IReferable. | Improve this Doc View Source IRelationshipElementFrom(System.Xml.XmlReader) Deserialize an instance of IRelationshipElement from reader . Declaration public static IRelationshipElement IRelationshipElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description IRelationshipElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of IRelationshipElement. | Improve this Doc View Source ISubmodelElementFrom(System.Xml.XmlReader) Deserialize an instance of ISubmodelElement from reader . Declaration public static ISubmodelElement ISubmodelElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ISubmodelElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ISubmodelElement. | Improve this Doc View Source KeyFrom(System.Xml.XmlReader) Deserialize an instance of Key from reader . Declaration public static Key KeyFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Key Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Key. | Improve this Doc View Source LangStringFrom(System.Xml.XmlReader) Deserialize an instance of LangString from reader . Declaration public static LangString LangStringFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description LangString Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of LangString. | Improve this Doc View Source MultiLanguagePropertyFrom(System.Xml.XmlReader) Deserialize an instance of MultiLanguageProperty from reader . Declaration public static MultiLanguageProperty MultiLanguagePropertyFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description MultiLanguageProperty Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of MultiLanguageProperty. | Improve this Doc View Source OperationFrom(System.Xml.XmlReader) Deserialize an instance of Operation from reader . Declaration public static Operation OperationFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Operation Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Operation. | Improve this Doc View Source OperationVariableFrom(System.Xml.XmlReader) Deserialize an instance of OperationVariable from reader . Declaration public static OperationVariable OperationVariableFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description OperationVariable Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of OperationVariable. | Improve this Doc View Source PropertyFrom(System.Xml.XmlReader) Deserialize an instance of Property from reader . Declaration public static Property PropertyFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Property Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Property. | Improve this Doc View Source QualifierFrom(System.Xml.XmlReader) Deserialize an instance of Qualifier from reader . Declaration public static Qualifier QualifierFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Qualifier Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Qualifier. | Improve this Doc View Source RangeFrom(System.Xml.XmlReader) Deserialize an instance of Range from reader . Declaration public static Range RangeFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Range Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Range. | Improve this Doc View Source ReferenceElementFrom(System.Xml.XmlReader) Deserialize an instance of ReferenceElement from reader . Declaration public static ReferenceElement ReferenceElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ReferenceElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ReferenceElement. | Improve this Doc View Source ReferenceFrom(System.Xml.XmlReader) Deserialize an instance of Reference from reader . Declaration public static Reference ReferenceFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Reference Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Reference. | Improve this Doc View Source RelationshipElementFrom(System.Xml.XmlReader) Deserialize an instance of RelationshipElement from reader . Declaration public static RelationshipElement RelationshipElementFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description RelationshipElement Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of RelationshipElement. | Improve this Doc View Source ResourceFrom(System.Xml.XmlReader) Deserialize an instance of Resource from reader . Declaration public static Resource ResourceFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Resource Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Resource. | Improve this Doc View Source SpecificAssetIdFrom(System.Xml.XmlReader) Deserialize an instance of SpecificAssetId from reader . Declaration public static SpecificAssetId SpecificAssetIdFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description SpecificAssetId Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of SpecificAssetId. | Improve this Doc View Source SubmodelElementCollectionFrom(System.Xml.XmlReader) Deserialize an instance of SubmodelElementCollection from reader . Declaration public static SubmodelElementCollection SubmodelElementCollectionFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description SubmodelElementCollection Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of SubmodelElementCollection. | Improve this Doc View Source SubmodelElementListFrom(System.Xml.XmlReader) Deserialize an instance of SubmodelElementList from reader . Declaration public static SubmodelElementList SubmodelElementListFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description SubmodelElementList Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of SubmodelElementList. | Improve this Doc View Source SubmodelFrom(System.Xml.XmlReader) Deserialize an instance of Submodel from reader . Declaration public static Submodel SubmodelFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description Submodel Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of Submodel. | Improve this Doc View Source ValueListFrom(System.Xml.XmlReader) Deserialize an instance of ValueList from reader . Declaration public static ValueList ValueListFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ValueList Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ValueList. | Improve this Doc View Source ValueReferencePairFrom(System.Xml.XmlReader) Deserialize an instance of ValueReferencePair from reader . Declaration public static ValueReferencePair ValueReferencePairFrom(System.Xml.XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader Initialized XML reader with cursor set to the element Returns Type Description ValueReferencePair Exceptions Type Condition Xmlization.Exception Thrown when the element is not a valid XML representation of ValueReferencePair."
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.Exception.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.Exception.html",
    "title": "Class Xmlization.Exception",
    "keywords": "Class Xmlization.Exception Represent a critical error during the deserialization. Inheritance System.Object Xmlization.Exception Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public class Exception : System.Exception Constructors | Improve this Doc View Source Exception(String, String) Declaration public Exception(string path, string cause) Parameters Type Name Description System.String path System.String cause Fields | Improve this Doc View Source Cause Declaration public readonly string Cause Field Value Type Description System.String | Improve this Doc View Source Path Declaration public readonly string Path Field Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.html",
    "title": "Class Xmlization",
    "keywords": "Class Xmlization Provide de/serialization of meta-model classes to/from XML. Inheritance System.Object Xmlization Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Xmlization : object Fields | Improve this Doc View Source NS Declaration public static readonly string NS Field Value Type Description System.String"
  },
  "api/AasCore.Aas3_0_RC02.Xmlization.Serialize.html": {
    "href": "api/AasCore.Aas3_0_RC02.Xmlization.Serialize.html",
    "title": "Class Xmlization.Serialize",
    "keywords": "Class Xmlization.Serialize Serialize instances of meta-model classes to XML. Inheritance System.Object Xmlization.Serialize Namespace : AasCore.Aas3_0_RC02 Assembly : AasCore.Aas3_0_RC02.dll Syntax public static class Serialize : object Examples Here is an example how to serialize an instance of IHasSemantics: var anInstance = new Aas.IHasSemantics( /* ... some constructor arguments ... */ ); var writer = new System.Xml.XmlWriter( /* some arguments */ ); Serialize.To( anInstance, writer); You can also set the namespace and the prefix: var anInstance = new Aas.IHasSemantics( /* ... some constructor arguments ... */ ); var writer = new System.Xml.XmlWriter( /* some arguments */ ); Serialize.To( anInstance, writer, \"somePrefix\", \"https://some-namespace.com\"); Methods | Improve this Doc View Source To(IClass, System.Xml.XmlWriter) Serialize an instance of the meta-model to XML. Declaration public static void To(IClass that, System.Xml.XmlWriter writer) Parameters Type Name Description IClass that System.Xml.XmlWriter writer"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "aas-core 3.0RC02 C# API",
    "keywords": "aas-core 3.0RC02 C# API The API of the SDK is split into four different units: Namespace Description AasCore.Aas3_0_RC02 Create the model programmatically AasCore.Aas3_0_RC02.Visitation Iterate over and transform the model AasCore.Aas3_0_RC02.Constants The constants such as constant sets of strings AasCore.Aas3_0_RC02.Verification Verify that the model fulfills the constraints AasCore.Aas3_0_RC02.Jsonization De/serialize from/to JSON AasCore.Aas3_0_RC02.Xmlization De/serialize from/to XML Please refer to Getting Started for a brief introduction on how to use the API."
  },
  "getting_started/intro.html": {
    "href": "getting_started/intro.html",
    "title": "Getting Started with aas-core 3.0RC02 C# SDK",
    "keywords": "Getting Started with aas-core 3.0RC02 C# SDK"
  },
  "index.html": {
    "href": "index.html",
    "title": "aas-core 3.0RC02 C#",
    "keywords": "aas-core 3.0RC02 C# This is a software development kit (SDK) to: manipulate, verify, and de/serialize to and from JSON and XML ... Asset Administration Shells based on the version 3.0VRC02 of the meta-model. For a brief introduction, see Getting Started . For a detailed documentation of the API, see API ."
  }
}